/////==================================================================
// Product Name     :      Tsunami ERP// Version          :      1.0.0
// Coding Standard  :      CMM Level 3

// Module           :      ACCOMMODATION
// Screen Name      :      vacating and billing 
// Form Name        :      vacating and billing .aspx
// ClassFile Name   :      vacating and billing .aspx.cs
// Purpose          :      Used to Check out allocated rooms.
// Created by       :      Deepa 
// Created On       :      10-July-2010
// Last Modified    :      10-July-2010
//---------------------------------------------------------------------
// SL.NO   Date       Modified By  Reason     			Suggestion
//---------------------------------------------------------------------

//1       18/08/2010  Deepa       Design changes as per the review

//2	      14/10/2014 JITHU S S		
using System;
using System.Data;
using System.Data.Odbc;
using System.IO;
using System.Web.UI;
using System.Web.UI.WebControls;
using clsDAL;
using GenCode128;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Num2Wrd;
using PDF;


public partial class vacating_and_billing : System.Web.UI.Page
{
   # region Declaration
    int malyear, malyearid, tc,ddx;
    int ren, keyreturn;
    string pdfFilePath, minunit, user, pass, extunit;
    int donorpassno, roomrent, slnoo, donorid, reno, years, dep, userid, measureunit;
    static int con1 = 1,con3 = 0, check,depo = 0;
    DateTime dttt,datedt;
    string customertype, datetoday, plainstatus;
    int deposit, deposite2, rent, advance, totalrent1, totalday = 0, advance1;
    static int balancee = 0,flag=0;
    string datetodayh,counter;
    int counterno,cashierid,compid=0;
    int ForceVacRecieptno = 0;
    static string strConnection;
    int seasonid,  graceperiod;
    string measurement, minunits;
    OdbcConnection conn = new OdbcConnection();
    commonClass objcls = new commonClass();
    OdbcTransaction odbTrans = null;
    OdbcTransaction odbtrans1 = null;
    string ss, prin,loc;
    clsgridview objG = new clsgridview();
    int td,dd, n;
    int paytype=0, extime, vacattime;
    double rentchk, allocmin,oldrent,olddepo;
    int maxhour,defhour;
    DateTime alloctime,propdat;
    //static string payMode = "";

# endregion

   # region PAGE LOAD
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            ViewState["CONTROL"] = "0";
            userid =Convert.ToInt32(Session["userid"]);
            pass = Session["password"].ToString();
            user = Session["username"].ToString();         

        }
        catch 
        { }

        clsCommon obj = new clsCommon();
        strConnection = obj.ConnectionString();
        userid = Convert.ToInt32(Session["userid"]);
        Panel7.Visible = false;
        btnPrinterOnOff.Enabled = false;
        if (!Page.IsPostBack)
        {
            ViewState["payment_mode123"] = -2;
            //payMode = string.Empty;
            chkOldReceipt.Visible = false;
            Session["inmate"] = "not";
            Session["edit"] = 0;
            flag = 0;
            Session["executeflag"] = 0;
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            txtinmcharge.Text = "0";
            txtinmdeposit.Text = "0";
            Session["count"] = "";
            Session["time"] = "";

            pnlok2.Visible = false;
            Title = "Tsunami ARMS-Vacating and billing";
            ViewState["action"] = "NILL";
            ViewState["alloctime"] = "";
            ViewState["allocmin"] = "";
            ViewState["paytype"] = "0";
            Session["newdue"] = "0";
            Session["chk"] = "";
            Session["calc"] = "";
            Session["overstay"] = 0;
            Session["flag"] = "false";
            Session["normflag"] = "false";
            Session["overstay"] = 0;
            Session["changegross"] = "0";
            Session["unclaimed"] = "not";
            TextBox1.Visible = false;
            Label13.Visible = false;
            string ip = System.Web.HttpContext.Current.Request.UserHostAddress;
            gridview();
            # region Counter Load
            try
            {
                OdbcCommand cmd2051 = new OdbcCommand();
                cmd2051.CommandType = CommandType.StoredProcedure;
                cmd2051.Parameters.AddWithValue("tblname", "m_sub_counter");
                cmd2051.Parameters.AddWithValue("attribute", "counter_id,counter_no");
                cmd2051.Parameters.AddWithValue("conditionv", "  counter_ip='" + ip + "' ");
                DataTable dtt2051 = new DataTable();
                dtt2051 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd2051);
                if (dtt2051.Rows.Count > 0)
                {
                    counter = dtt2051.Rows[0]["counter_no"].ToString();
                    counterno = Convert.ToInt32(dtt2051.Rows[0]["counter_id"]);
                    Session["counterid"] = counterno;
                    Session["counter"] = counter;
                }
                else
                {
                    messagedisplay("No counter is set", "warn1");
                    return;
                }
            }
            catch
            {
                messagedisplay("No counter is set", "warn1");
                return;
            }
            # endregion
            # region Load Combo building
            OdbcCommand cmdbuild = new OdbcCommand();
            cmdbuild.CommandType = CommandType.StoredProcedure;
            cmdbuild.Parameters.AddWithValue("tblname", "t_roomallocation tr,m_sub_building msb ,m_room mr");
            cmdbuild.Parameters.AddWithValue("attribute", " distinct msb.build_id,buildingname");
            cmdbuild.Parameters.AddWithValue("conditionv", "  tr.room_id=mr.room_id and mr.build_id=msb.build_id and tr.roomstatus=2 ");
            DataTable dtt1 = new DataTable();
            dtt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdbuild);
            DataRow row = dtt1.NewRow();
            row["build_id"] = "-1";
            row["buildingname"] = "--Select--";
            dtt1.Rows.InsertAt(row, 0);
            cmbBuilding.DataSource = dtt1;
            cmbBuilding.DataBind();
            cmbBuilding.DataSource = dtt1;
            cmbBuilding.DataBind();
            cmbSelectBuilding.DataSource = dtt1;
            cmbSelectBuilding.DataBind();
            # endregion
            OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
            DateTime date = Convert.ToDateTime(cmd.ExecuteScalar());

            ViewState["date"] = date;
            string datestring1 = date.ToString("dd/MM/yyyy");
            txtVacatingDate.Text = datestring1.ToString();
            datetoday = objcls.yearmonthdate(datestring1);
            Session["datenow"] = datetoday.ToString() + " " + date.ToString("HH:mm:ss");
            txtVecatingTime.Text = date.ToShortTimeString();
            # region Day Close Date Load
            try
            {
                OdbcCommand cmddayclose = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmddayclose.CommandType = CommandType.StoredProcedure;
                cmddayclose.Parameters.AddWithValue("tblname", "t_dayclosing ");
                cmddayclose.Parameters.AddWithValue("attribute", " closedate_start");
                cmddayclose.Parameters.AddWithValue("conditionv", "  daystatus='" + "open" + "' order by  closedate_start  desc limit 0,1 ");
                OdbcDataReader orr = cmddayclose.ExecuteReader();
                if (orr.Read())
                {
                    dttt = DateTime.Parse(orr["closedate_start"].ToString());
                    string date12 = dttt.ToString("dd/MM/yyyy");
                    txtDaycloseDate.Text = date12.ToString();
                    datetodayh = objcls.yearmonthdate(date12);
                    Session["dayend"] = datetodayh.ToString();
                }
                else
                {
                    messagedisplay("Day close date is not set", "warnoo");
                    return;
                }
            }
            catch (Exception ex)
            {
            }
            # endregion
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            SeaonDepositLoad();
            CalulatingCounterLiability();
            # region CHECK FOR COMING FROM COMPLAINT REGISTER
            try
            {
                if (Convert.ToInt32(Session["fromcmpregister"].ToString()) == 1)
                {
                    compid = Convert.ToInt32(Session["compid"]);
                    CompSessions();
                    Session["fromcmpregister"] = 0;
                }
            }
            catch { }
            # endregion
            conn.Close();
            ForceVacRecieptno = 0;
            # region Check From  for come from Roommanagement
            try
            {
                ForceVacRecieptno = Convert.ToInt32(Session["receiptforforcevacating"]);
            }
            catch { }
            if (ForceVacRecieptno != 0)
            {
                cmbCheckOutMehtod.SelectedItem.Text = "Force Vacating";
                cmbCheckOutMehtod_SelectedIndexChanged(null, null);
                txtAdRecieptNo.Text = ForceVacRecieptno.ToString();
                AdvanceRecieptnoTexChange();
            }
            # endregion
            # region Check For Coming From Room Allocation
            try
            {
                int recallocno = 0;
                recallocno = Convert.ToInt32(Session["receipt"]);
                if (recallocno != 0)
                {
                    txtAdRecieptNo.Text = Session["receipt"].ToString();
                    cmbCheckOutMehtod.SelectedItem.Text = "Alternate Room";
                    cmbCheckOutMehtod_SelectedIndexChanged(null, null);
                    AdvanceRecieptnoTexChange();
                    Session["receipt"] = "";
                }
            }
            catch
            {
            }
            # endregion
            # region reciept check counter
            try
            {
                OdbcCommand cmdreciept = new OdbcCommand();
                cmdreciept.CommandType = CommandType.StoredProcedure;
                cmdreciept.Parameters.AddWithValue("tblname", "m_sub_item");
                cmdreciept.Parameters.AddWithValue("attribute", "item_id");
                cmdreciept.Parameters.AddWithValue("conditionv", "itemname='Balance Receipt' and rowstatus!='2'");
                DataTable dttreciept = new DataTable();
                dttreciept = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdreciept);
                int itemid = 0;
                if (dttreciept.Rows.Count > 0)
                {
                    itemid = Convert.ToInt32(dttreciept.Rows[0]["item_id"]);
                    Session["itemid"] = itemid;
                }
                OdbcCommand cmdquantity = new OdbcCommand();
                cmdquantity.CommandType = CommandType.StoredProcedure;
                cmdquantity.Parameters.AddWithValue("tblname", "t_pass_receipt");
                cmdquantity.Parameters.AddWithValue("attribute", "balance");
                cmdquantity.Parameters.AddWithValue("conditionv", "item_id=" + itemid + " and counter_id=" + counterno + " ");
                DataTable dttquantity = new DataTable();
                dttquantity = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdquantity);
                int quantity = 0;
                if (dttquantity.Rows.Count > 0)
                {
                    quantity = Convert.ToInt32(dttquantity.Rows[0]["balance"]);
                    txtRecieptBalance.Text = quantity.ToString();
                    if (quantity == 0)
                    {
                        messagedisplay("Receipt quantity is empty in inventory list", "warn1l");
                    }
                    else
                    {
                        OdbcCommand cmdrec1 = new OdbcCommand();
                        cmdrec1.CommandType = CommandType.StoredProcedure;
                        cmdrec1.Parameters.AddWithValue("tblname", "t_roomvacate");
                        cmdrec1.Parameters.AddWithValue("attribute", " max(bill_receiptno)as bill_receiptno");
                        cmdrec1.Parameters.AddWithValue("conditionv", "is_plainprint='0'");
                        DataTable dttrec1 = new DataTable();
                        dttrec1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdrec1);
                        if (dttrec1.Rows.Count > 0)
                        {
                            if (Convert.IsDBNull(dttrec1.Rows[0]["bill_receiptno"]) == false)
                            {
                                int rec = Convert.ToInt32(dttrec1.Rows[0]["bill_receiptno"]);
                                rec = rec + 1;
                                txtStartRecieptNo.Text = rec.ToString();
                            }
                            else
                            {
                                messagedisplay("Please edit the  start  receipt no", "warn1l");
                            }
                        }
                    }
                }
                else
                {
                    txtRecieptBalance.Text = "";
                    txtStartRecieptNo.Text = "";
                    messagedisplay("Bal Receipt not issued", "warn1");
                }
            }
            catch (Exception ex)
            {
            }
            this.ScriptManager1.SetFocus(txtClientid);
            # endregion
            check1();
            OdbcCommand cmdSxc = new OdbcCommand();
            cmdSxc.Parameters.AddWithValue("tblname", "t_security_deposit");
            cmdSxc.Parameters.AddWithValue("attribute", "balance");
            cmdSxc.Parameters.AddWithValue("conditionv", "deposit_id =(SELECT MAX(deposit_id) FROM t_security_deposit WHERE counter1 =  '" + Session["counterid"].ToString() + "')");
            DataTable dtSxc = new DataTable();
            dtSxc = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdSxc);
            if (dtSxc.Rows.Count > 0 && dtSxc.Rows[0][0].ToString() != "")
            {
                txtcounterdeposit.Text = dtSxc.Rows[0][0].ToString();
            }
            else
            {
                txtcounterdeposit.Text = "0";
            }


            string unclaimed = @"SELECT IFNULL(SUM(amount),0)  -IFNULL((SELECT  IFNULL(SUM(amount),0) AS 'Deposit'  FROM  t_unclaimedremittance,m_season  WHERE 
                               t_unclaimedremittance.DATE BETWEEN
                               m_season.startdate AND m_season.enddate AND m_season.season_id='" + Session["seasonid"] + "'  GROUP BY m_season.season_id),0) AS 'Unclaimed'  FROM  t_daily_transaction,m_season  WHERE t_daily_transaction.ledger_id = '2' AND t_daily_transaction.DATE BETWEEN m_season.startdate AND m_season.enddate AND m_season.season_id='" + Session["seasonid"] + "'  GROUP BY m_season.season_id";
            DataTable dt_unclaimed = objcls.DtTbl(unclaimed);
            if (dt_unclaimed.Rows.Count > 0)
            {
                txtunclaimed.Text = dt_unclaimed.Rows[0][0].ToString();
            }
            else
            {
                txtunclaimed.Text = "0";

            }
            AllocationRecieptLoad();
        }

    }
    # endregion

    #region extra inmates calculations
    public void viewinmates()
    {
        try
        {
            if (cmbaltroom.SelectedValue != "-1" && txtExtendDate.Text != "" && txtExtendTime.Text != "" && txtinmno.Text != "")
            {
                string odate = txtExtendDate.Text + " " + txtExtendTime.Text;
                string indate = txtAllocatedDate.Text + " " + txtAllocatedTime.Text;

                String SS = "SELECT TIMEDIFF(STR_TO_DATE('" + odate + "','%d-%m-%Y %l:%i %p'), STR_TO_DATE('" + indate + "','%d-%m-%Y %l:%i %p'))";
                DataTable DTSS = objcls.DtTbl(SS);
                TimeSpan actperiod = TimeSpan.Parse(DTSS.Rows[0][0].ToString());

                // TimeSpan actperiod = codate - cdate;
                int hrs_used = 0;
                hrs_used = Convert.ToInt32(actperiod.TotalHours);
                int x = actperiod.Minutes;
                if ((actperiod.Minutes > 0) && (actperiod.Minutes < 30))
                {
                    hrs_used++;
                }
                double lessQty = 0.0;
                int oldimrate = Convert.ToInt32(txtinmateadvance.Text);
                int inmdepoold = Convert.ToInt32(txtinmategross.Text);
                int oldimno = Convert.ToInt32(Session["inm"].ToString());
                int oldimtott = 0, inmatecountt = 0, xtrainmm = 0, oldinmdepotott = 0, inmdepnewtott = 0;
                string stmx = @"SELECT noofinmates,maxinmates,rate FROM m_inmate WHERE room_id = '" + cmbaltroom.SelectedValue + "' AND '" + hrs_used + "' > start_duration AND '" + hrs_used + "' <= end_duration  ";
                DataTable dt_stmx = objcls.DtTbl(stmx);
                if (dt_stmx.Rows.Count > 0)
                {
                    if (txtinmno.Text != "")
                    {

                        if (Convert.ToInt32(txtinmno.Text) > Convert.ToInt32(dt_stmx.Rows[0][0].ToString()))
                        {
                            if (Convert.ToInt32(txtinmno.Text) <= Convert.ToInt32(dt_stmx.Rows[0][1].ToString()))
                            {
                                int oldinmcnt = Convert.ToInt32(Session["inm"].ToString());
                                inmatecountt = Convert.ToInt32(txtinmno.Text);
                                //int oldextra = inmatecountt - oldinmcnt;
                                //oldimtott = oldextra * oldimrate;
                                //oldinmdepotott = oldextra * inmdepoold;

                                //xtrainmm = inmatecountt - Convert.ToInt32(dt_stmx.Rows[0][0].ToString());
                                //int oldinmates = Convert.ToInt32(Session["inm"].ToString()); ;
                                int oldinmates = Convert.ToInt32(dt_stmx.Rows[0][0].ToString());
                                //int newinmates = Convert.ToInt32(dt_stmx.Rows[0][0].ToString());
                                int incounts = inmatecountt - oldinmcnt;
                                int charg = Convert.ToInt32(dt_stmx.Rows[0][2].ToString());
                                int newinmacharge = incounts * charg;
                                ViewState["INMAT"] = txtinmcharge.Text;
                                if (inmatecountt <= oldinmcnt)
                                {
                                    newinmacharge = 0;
                                    ViewState["INMAT"] = txtinmcharge.Text;
                                    txtinmcharge.Text = Convert.ToString(newinmacharge);
                                }
                                else
                                {

                                    txtinmcharge.Text = Convert.ToString(newinmacharge);
                                }
                                //newimtott = oldimrate * xtrainmm;
                                //int value =Convert.ToInt32(newimtott);
                                //inmdepnewtott = inmdepoold * xtrainmm;
                                
                                //
                                
                                txtAdvAmount.Text = (Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtinmcharge.Text) + Convert.ToInt32(txtDepositAlloc.Text) + Convert.ToInt32(txtinmdeposit.Text)).ToString();
                                int xxx = 0;
                                xxx = Convert.ToInt32(ViewState["INMAT"].ToString());

                                lessQty = (Convert.ToDouble(txtAdvAmount.Text) - Convert.ToDouble(Session["deposit"].ToString()) + xxx);
                                Session["due"] = lessQty;
                                lblrent.Text = "Due from Swami Rs." + lessQty.ToString();
                                Session["due"] = lessQty.ToString();
                                Session["inmrate"] = oldimrate;
                                Session["count"] = inmatecountt;
                                Session["inmate"] = "ok";
                                ViewState["INMAT"] = "";
                            }
                            else
                            {
                                Session["inmate"] = "not";
                                txtinmcharge.Text = (0).ToString();
                                txtinmdeposit.Text = (0).ToString();

                                txtAdvAmount.Text = (Convert.ToInt32(txtinmcharge.Text) + Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtDepositAlloc.Text) + Convert.ToInt32(txtinmdeposit.Text)).ToString();

                                messagedisplay("Tsunami ARMS - Warning", "Exceeds maximum permissible no: of inmates");

                                return;
                            }

                        }
                        else
                        {
                            Session["inmate"] = "not";
                            txtinmcharge.Text = (0).ToString();
                            txtinmdeposit.Text = (0).ToString();

                            txtAdvAmount.Text = (Convert.ToInt32(txtinmcharge.Text) + Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtDepositAlloc.Text)).ToString();

                        }



                    }
                }
            }
            //double inmratee = 0;
            //inmratee = newimtott; //- oldimtott;
            //txtinmcharge.Text = Convert.ToString(inmratee);
            //double inmdepp = 0;
            //inmdepp = inmdepnewtott - oldinmdepotott;
            //txtinmdeposit.Text = Convert.ToString(inmdepp);

         //txtAdvAmount.Text = ((Convert.ToDouble(txtDepositAlloc.Text))+(Convert.ToDouble(txtinmcharge.Text)) + (Convert.ToDouble(txtRentAlloc.Text))).ToString();
        //    double lessQty = 0.0;
        //    if (cmbaltroom.SelectedValue != "-1" && txtExtendDate.Text != "" && txtExtendTime.Text != "" && txtinmno.Text != "")
        //    {
              

        //        string stmx = @"SELECT noofinmates,maxinmates,rate,deposit FROM m_inmate WHERE room_id = '" + cmbaltroom.SelectedValue + "' ";
        //        DataTable dt_stmx = objcls.DtTbl(stmx);
        //        if (dt_stmx.Rows.Count > 0)
        //        {


        //            if (Convert.ToInt32(txtinmno.Text) > Convert.ToInt32(dt_stmx.Rows[0][0].ToString()))
        //            {

        //                if (Convert.ToInt32(txtinmno.Text) <= Convert.ToInt32(dt_stmx.Rows[0][1].ToString()))
        //                {
        //                   int count = Convert.ToInt32(txtinmno.Text) - Convert.ToInt32(dt_stmx.Rows[0][0].ToString());

        //                    txtinmcharge.Text = (count * Convert.ToInt32(dt_stmx.Rows[0][2].ToString())).ToString();
        //                    txtinmdeposit.Text = (count * Convert.ToInt32(dt_stmx.Rows[0][3].ToString())).ToString();
        //                    int oldinmates = Convert.ToInt32(txtinmateadvance.Text);
        //                    int newinmates = Convert.ToInt32(txtinmcharge.Text);
        //                    int newinmacharge = newinmates - oldinmates;
        //                    if (newinmates < oldinmates)
        //                    {
        //                        newinmacharge = 0;
        //                    }
                            
        //                    txtAdvAmount.Text =  ( Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtDepositAlloc.Text) + Convert.ToInt32(txtinmdeposit.Text)).ToString();
        //                    string buildingid = cmbBuilding.SelectedValue;
        //                    //string str = @"SELECT DISTINCT deposit FROM m_room WHERE build_id='" + buildingid + "'";
        //                    //DataTable dty = objcls.DtTbl(str);

        //                    lessQty = (Convert.ToDouble(txtAdvAmount.Text) - Convert.ToDouble(Session["deposit"].ToString()));
        //                    lblrent.Text = "Due from Swami Rs." + lessQty.ToString();
        //                    Session["inmrate"] = dt_stmx.Rows[0][2].ToString();
        //                    Session["count"] = count;
        //                    Session["inmate"] = "ok";
        //                }
        //                else
        //                {
        //                    Session["inmate"] = "not";
        //                    txtinmcharge.Text = (0).ToString();
        //                    txtinmdeposit.Text = (0).ToString();

        //                    txtAdvAmount.Text = (Convert.ToInt32(txtinmcharge.Text)  + Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtDepositAlloc.Text) + Convert.ToInt32(txtinmdeposit.Text)).ToString();

        //                    messagedisplay("Tsunami ARMS - Warning", "Exceeds maximum permissible no: of inmates");
                           
        //                    return;
        //                }


        //            }
        //            else
        //            {
        //                Session["inmate"] = "not";
        //                txtinmcharge.Text = (0).ToString();
        //                txtinmdeposit.Text = (0).ToString();

        //                txtAdvAmount.Text = (Convert.ToInt32(txtinmcharge.Text) + Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtDepositAlloc.Text)).ToString();
        //            }



        //        }



        //    }
        }
        catch
        {
            messagedisplay("Tsunami ARMS - Warning", "chk");
            //  this.ScriptManager1.SetFocus(btnOk);
            return;
        }

    }
#endregion

   # region CHECK FUNCTION
    public void check1()
    {
        try
        {
            clsCommon obj = new clsCommon();
            int level = Convert.ToInt32(Session["level"]);
            if (obj.CheckUserRight("vacating and billing", level) == 0)
            {
                string prevPage = Request.UrlReferrer.ToString();
                ViewState["prevform"] = prevPage;
                ViewState["action"] = "check";
                lblOk.Text = " You are not authorized to access this page";
                lblHead.Text = "Tsunami ARMS - Warning";
                pnlOk.Visible = true;
                pnlYesNo.Visible = false;
                ModalPopupExtender1.Show();
            }
        }
        catch (Exception ex)
        {
            Server.Transfer("~/Login frame.aspx");
            //Response.Redirect("~/Login frame.aspx");
        }
        finally
        {
            conn.Close();
        }
    }    
    # endregion             
   
    # region Button Edit
    protected void btnEdit_Click(object sender, EventArgs e)
    {
        Panel6.Visible = true;
    }
    # endregion       
   
    # region ENCRYPTION& DECRYPTION OF CLIENT ID
    public string base64Encode(string sData)
    {
        try
        {
            byte[] encData_byte = new byte[sData.Length];
            encData_byte = System.Text.Encoding.UTF8.GetBytes(sData);
            string encodedData = Convert.ToBase64String(encData_byte);
            return encodedData;
        }
        catch (Exception ex)
        {
            throw new Exception("Error in base64Encode" + ex.Message);
        }
    }
    public string base64Decode(string sData)
    {
        System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
        System.Text.Decoder utf8Decode = encoder.GetDecoder();
        byte[] todecode_byte = Convert.FromBase64String(sData);
        int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
        char[] decoded_char = new char[charCount];
        utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
        string result = new String(decoded_char);
        return result;
    }
    # endregion
   
    # region advance amount text change
    protected void txtAdvanceAmount_TextChanged(object sender, EventArgs e)
    {
        BalanceAmountCalculations();
    }
    # endregion
   
    # region DEPOSIT UPDATION FUNCTION on season deposit
    public void updatedeposit()
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        malyear = Convert.ToInt32(Session["malyear"]);
        malyearid=Convert.ToInt32(Session["malyyearid"]);
        DateTime cur2 = DateTime.Now;
        int currentyear = cur2.Year;    
        string curseason2id = Convert.ToString(Session["seasonid"]);
        int depo = Convert.ToInt32(Session["deposit"]);
        OdbcCommand cmd391 = new OdbcCommand("CALL selectcond(?,?,?)", conn );
        cmd391.CommandType = CommandType.StoredProcedure;
        cmd391.Parameters.AddWithValue("tblname", "t_seasondeposit");
        cmd391.Parameters.AddWithValue("attribute", "totaldeposit,unclaimdeposit");
        cmd391.Parameters.AddWithValue("conditionv", "season_id =" +curseason2id + " and mal_year_id=" + malyearid  + "");
        cmd391.Transaction = odbTrans;
        DataTable dtt391 = new DataTable();
        OdbcDataAdapter dao=new OdbcDataAdapter(cmd391 );
        dao.Fill(dtt391);
        int seasondeposit = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
        seasondeposit = seasondeposit - depo;
        int unclaimdeposit = int.Parse(dtt391.Rows[0]["unclaimdeposit"].ToString());
        unclaimdeposit = unclaimdeposit + depo;
        OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
        cmd826.CommandType = CommandType.StoredProcedure;
        cmd826.Parameters.AddWithValue("tablename", "t_seasondeposit");
        cmd826.Parameters.AddWithValue("valu", "totaldeposit=" + seasondeposit + ",unclaimdeposit=" + unclaimdeposit + "");
        cmd826.Parameters.AddWithValue("convariable", "season_id=" + curseason2id + " and mal_year_id=" + malyearid + "");
        cmd826.Transaction = odbTrans;
        cmd826.ExecuteNonQuery();
     }
    # endregion       
   
    # region previous hour vacating list Grid view
    protected void rooms_Click(object sender, EventArgs e)
    {        
        check = 1;
        chkselectall.Checked = false;
      # region PREVIOUS HOUR VACATING LIST             
      if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        OdbcCommand cc = new OdbcCommand("DROP view if exists tempvacate1", conn);
        cc.ExecuteNonQuery();
        string sqlView1="create view  tempvacate1 as  (SELECT * from t_roomallocation ta   WHERE ta.roomstatus='2' and date(ta.exp_vecatedate)=curdate() "
        + " and ADDTIME(exp_vecatedate,MAKETIME((SELECT graceperiod from t_policy_allocation WHERE reqtype='Common' and rowstatus<>'2' and  "
        + " ((curdate()>=fromdate and    curdate()<=todate) or (curdate()>=fromdate and todate='0000-00-00')) and waitingcriteria='Hours'),0,0))<now())";
        OdbcCommand cmdview = new OdbcCommand(sqlView1, conn);
        cmdview.ExecuteNonQuery();
        try
        {
            dtgRoomVacateDetails.Caption = "Previous Hour Vacating  Room List";
            OdbcCommand cmdgridview1 = new OdbcCommand();
            cmdgridview1.CommandType = CommandType.StoredProcedure;
            cmdgridview1.Parameters.AddWithValue("tblname", " tempvacate1,m_room mr,m_sub_building msb");
            cmdgridview1.Parameters.AddWithValue("attribute", "adv_recieptno, buildingname ,roomno ,swaminame , DATE_FORMAT(exp_vecatedate, '%l:%i %p') as vacatedate");
            cmdgridview1.Parameters.AddWithValue("conditionv", " mr.room_id=tempvacate1.room_id and msb.build_id=mr.build_id");
            DataTable dttgridview1 = new DataTable();
            dttgridview1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdgridview1);
            dtgRoomVacateDetails.DataSource = dttgridview1;
            dtgRoomVacateDetails.DataBind();         
         }
        catch (Exception ex)
        { } conn.Close();
        # endregion
     }
    # endregion
   
    # region Succeeding Hour Vacating List grid view
     protected void LinkButton6_Click(object sender, EventArgs e)
    {   
# region SUCCEEDING HOUR VACATING ROOM LIST        
        chkselectall.Checked = false;
        check = 2;
       if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        OdbcCommand cc = new OdbcCommand("DROP view if exists tempvacate2", conn);
        cc.ExecuteNonQuery();
        string sqlView = "create view  tempvacate2 as  (SELECT * from t_roomallocation ta   WHERE ta.roomstatus='2' and date(ta.exp_vecatedate)=curdate()  "
         + " and ADDTIME(exp_vecatedate,MAKETIME((SELECT graceperiod from t_policy_allocation WHERE reqtype='Common' and rowstatus<>'2' and "
         + " ((curdate()>=fromdate and  curdate()<=todate) or (curdate()>=fromdate and todate='0000-00-00')) and waitingcriteria='Hours'),0,0))>now())";      
        OdbcCommand cmdview = new OdbcCommand(sqlView,conn);
        cmdview.ExecuteNonQuery();
        dtgRoomVacateDetails.Caption = "Succeeding Hour Vacating Room List";
        OdbcCommand cmdgridview1 = new OdbcCommand();
        cmdgridview1.CommandType = CommandType.StoredProcedure;
        cmdgridview1.Parameters.AddWithValue("tblname", " tempvacate2,m_room mr,m_sub_building msb");
        cmdgridview1.Parameters.AddWithValue("attribute", "adv_recieptno, buildingname ,roomno ,swaminame , DATE_FORMAT(exp_vecatedate, '%l:%i %p') as vacatedate");
        cmdgridview1.Parameters.AddWithValue("conditionv", " mr.room_id=tempvacate2.room_id and msb.build_id=mr.build_id");
        DataTable dttgridview1 = new DataTable();
        dttgridview1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdgridview1);
        dtgRoomVacateDetails.DataSource = dttgridview1;
        dtgRoomVacateDetails.DataBind();
        conn.Close();     
        # endregion
    }
     # endregion
   
    # region Vacating time Edit
    protected void txtVecatingTime_TextChanged(object sender, EventArgs e)
    {
    # region VACATING TIME EDIT
        try
        {
            string curdate = Session["dayend"].ToString();
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            string vecdate =objcls.yearmonthdate(txtVacatingDate.Text.ToString());
            DateTime tim2 = DateTime.Parse(txtVecatingTime.Text);
            string mm = tim2.ToString();
            DateTime date = DateTime.Now;
            string s = date.ToShortDateString();
            string f2 = date.ToString("dd/MM/yyyy");
            string kk2 =objcls.yearmonthdate(f2);
            string kk = date.ToShortTimeString();
            DateTime tim3 = DateTime.Parse(kk.ToString());
            DateTime tim4 = DateTime.Parse(mm.ToString());
            TimeSpan dif = tim4 - tim3;
            int diff = dif.Hours;
            if (diff < 0)
            {
                lblHead.Text = "Tsunami ARMS - Warning";
                pnlOk.Visible = true;
                pnlYesNo.Visible = false;
                lblOk.Text = "time is less than current time";
                ViewState["action"] = "warn15";
                ModalPopupExtender1.Show();
            }
            BalanceAmountCalculations();
        }
        catch (Exception ex)
        {
        } 
# endregion
    }
    # endregion
   
    # region CHECK FOR EMPTY FIELDS
    public string emptystring(string s)
    {
        if (s == "")
        {
            s = null;
        }
        return s;
    }
    public string emptyinteger(string s)
    {
        if (s == "")
        {
            s = "0";
        }
        return s;
    }
    # endregion
   
    # region All Occupied Rooms  Check Box change
    protected void CheckBox1_CheckedChanged(object sender, EventArgs e)
    {
        if (chkselectall.Checked == true)
        {
            try
            {
                if (conn.State == ConnectionState.Closed)
                {
                       conn.ConnectionString = strConnection;
                       conn.Open();
                }
                OdbcCommand cmdgridview1 = new OdbcCommand();
                cmdgridview1.CommandType = CommandType.StoredProcedure;
                cmdgridview1.Parameters.AddWithValue("tblname", " t_roomallocation  rt,m_sub_building msb,m_room mr");
                cmdgridview1.Parameters.AddWithValue("attribute", "adv_recieptno, buildingname ,roomno ,swaminame,DATE_FORMAT( exp_vecatedate,'%d-%m-%y %l:%i %p') as vacatedate   ");
                cmdgridview1.Parameters.AddWithValue("conditionv", " rt. roomstatus=" + 2 + "     and   rt.room_id=mr.room_id and mr.build_id=msb.build_id   order by exp_vecatedate asc ");
                DataTable dttgridview1 = new DataTable();
                dttgridview1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdgridview1);
                dtgRoomVacateDetails.Caption = "All Occupied Room  Details";
                dtgRoomVacateDetails.DataSource = dttgridview1;
                dtgRoomVacateDetails.DataBind();
            }
            catch (Exception ex)
            { }
        }
        else if (chkselectall.Checked == false)
        {
            gridview();
        }
    }
    # endregion
   
    # region AUTHORIZATION CHECK for Executive Override
    protected void btnlogin_Click(object sender, EventArgs e)
    {                
        int level = Convert.ToInt32(Session["level"]);
        Session["execute"] = 0;
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        int keys = 0;
        int seasonid2 =Convert.ToInt32(Session["season_subid"]);
        if ((user == txtUsername.Text) && (pass == txtPassword.Text))
        {
            int execute = Convert.ToInt32(Session["executeflag"]);
            if (execute == 1)
            {
                OdbcCommand cmdbankremit = new OdbcCommand("select max(bank_remit_id) as 'bank_remit_id'  from t_policy_bankremit_seasons  where season_sub_id=" + seasonid2 + "", conn);
                OdbcDataReader orbankremit = cmdbankremit.ExecuteReader();
                while (orbankremit.Read())
                {
                    int cshslno = Convert.ToInt32(orbankremit["bank_remit_id"]);
                    OdbcCommand cb2 = new OdbcCommand("select secretcode  from t_policy_bankremittance where   policyenddate>=curdate() and policystartdate<=curdate() and   bank_remit_id=" + cshslno + " and rowstatus!=" + 2 + " and ledger_id='2'", conn);
                    OdbcDataReader ob3 = cb2.ExecuteReader();
                    if (ob3.Read())
                    {
                        keys = Convert.ToInt32(ob3["secretcode"]);
                        break;
                    }
                }  
                   if (rbgrace.Checked == true)
                        {
                            int withoutid = 1;
                            Session["withoutiddep"] = withoutid;
                            Session["notreturn"] = 0;
                            Session["executeflag"] = 1;
                            Session["executeflag1"] = 1;
                            Session["changegross"] = 1;
                            BalanceAmountCalculations();
                            HiddenField1.Value = "0";
                            Session["changegross"] = 0;
                            Session["executeflag"] = 0;
                            Session["executeflag1"] = 0;
                            Session["executedeposit"] = 1;
                            pnlOk.Visible = true;
                            pnlYesNo.Visible = false;
                            lblOk.Text = "Security deposit is returned";
                            ModalPopupExtender1.Show();
                            ViewState["action"] = "logerror1";
                            this.ScriptManager1.SetFocus(btnOk);
                            Session["execute"] = 1;
                            Session["edit"] = 1;
                            rbgrace.Checked = false;      
                        }
                 else if (rostay.Checked == true)
                 {
                     int withoutid = 1;
                     Session["withoutiddep"] = withoutid;
                     Session["notreturn"] = 0;
                     Session["executeflag"] = 1;
                     Session["executeflag1"] = 1;
                     Session["changegross"] = 0;
                     Session["overstay"] = 1;
                     BalanceAmountCalculations();
                     HiddenField1.Value = "0";
                     Session["changegross"] = 0;
                     Session["executeflag"] = 0;
                     Session["executeflag1"] = 0;
                     Session["executedeposit"] = 1;
                     pnlOk.Visible = true;
                     pnlYesNo.Visible = false;
                     lblOk.Text = "Security deposit is returned";
                     ModalPopupExtender1.Show();
                     ViewState["action"] = "logerror1";
                     this.ScriptManager1.SetFocus(btnOk);
                     Session["execute"] = 1;
                     Session["edit"] = 1;
                     rbgrace.Checked = false;      

                 }

                 else
                 {
                     OdbcCommand cmduserprev = new OdbcCommand("select execoverride from m_userprevsetting where prev_level=" + level + "", conn);
                     OdbcDataReader oruserprev = cmduserprev.ExecuteReader();
                     if (oruserprev.Read())
                     {
                         int prev = 0;
                         prev = Convert.ToInt32(oruserprev["execoverride"]);
                         if (prev == 1)
                         {
                             int withoutid = 1;
                             Session["withoutiddep"] = withoutid;
                             Session["notreturn"] = 0;
                             Session["executeflag"] = 1;
                             Session["executeflag1"] = 1;
                             Session["changegross"] = 1;
                             if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay" || cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                             {
                                 extend();
                             }
                             BalanceAmountCalculations();
                             HiddenField1.Value = "0";
                             Session["executeflag"] = 0;
                             Session["executeflag1"] = 0;
                             Session["executedeposit"] = 1;
                             pnlOk.Visible = true;
                             pnlYesNo.Visible = false;
                             lblOk.Text = "Security deposit is returned";
                             ModalPopupExtender1.Show();
                             ViewState["action"] = "logerror1";
                             this.ScriptManager1.SetFocus(btnOk);
                             Session["execute"] = 1;
                             Session["edit"] = 1;
                         }
                         else
                         {
                             Session["executeflag"] = 0;
                             Session["executeflag1"] = 0;
                             pnlOk.Visible = true;
                             pnlYesNo.Visible = false;
                             lblOk.Text = "You dont have the previlages for giving deposit";
                             ModalPopupExtender1.Show();
                             ViewState["action"] = "logerror";
                             this.ScriptManager1.SetFocus(btnOk);
                         }



                     }
                     else
                     {
                         pnlOk.Visible = true;
                         pnlYesNo.Visible = false;
                         lblOk.Text = "You dont have the previlages for giving deposit";
                         ModalPopupExtender1.Show();
                         ViewState["action"] = "logerror";
                         this.ScriptManager1.SetFocus(btnOk);
                     }

                 }       
            }
            else if (execute == 3)
            {
                pnlLogin.Visible = false;
                txtVecatingTime.Enabled = true;
                txtVacatingDate.Enabled = true;
                btnSave.Enabled = true;
            }
            else if (execute == 4)
            {
                txtRecieptBalance.Enabled = true;
                txtStartRecieptNo.Enabled = true;
                txtAllocRecNo.Enabled = true;
            }
            else if (execute == 2)
            {
                OdbcCommand cmdbank = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdbank.CommandType = CommandType.StoredProcedure;
                cmdbank.Parameters.AddWithValue("tblname", "t_policy_bankremittance br ,t_policy_bankremit_seasons  brs");
                cmdbank.Parameters.AddWithValue("attribute", "season_sub_id,keyreturn");
                cmdbank.Parameters.AddWithValue("conditionv", " ledger_id='3' and br.bank_remit_id=brs.bank_remit_id and br.rowstatus!=" + 2 + "  and ((curdate()>= policystartdate and curdate()<=policyenddate) or (curdate()>=policystartdate and policyenddate='0000-00-00'))");
                OdbcDataAdapter dacntbank = new OdbcDataAdapter(cmdbank);
                DataTable dttbank = new DataTable();
                dacntbank.Fill(dttbank);
                if (dttbank.Rows.Count > 0)
                {
                    for (int i = 0; i < dttbank.Rows.Count; i++)
                    {
                        int seaid = Convert.ToInt32(dttbank.Rows[i]["season_sub_id"]);
                        if (seaid == seasonid2)
                        {
                            int keynotreturned = Convert.ToInt32(dttbank.Rows[0]["keyreturn"]);

                            if (keynotreturned == 1)
                            {
                                OdbcCommand cmduserprev = new OdbcCommand("select execoverride from m_userprevsetting where prev_level=" + level + "", conn);
                                OdbcDataReader oruserprev = cmduserprev.ExecuteReader();

                                if (oruserprev.Read())
                                {
                                    int prev = 0;

                                    prev = Convert.ToInt32(oruserprev["execoverride"]);
                                    if (prev == 1)
                                    {
                                        Session["executekey"] = 1;
                                        Session["executeflag1"] = 1;
                                        HiddenField1.Value = "0";
                                        BalanceAmountCalculations();
                                        Session["edit"] = 1;
                                        pnlOk.Visible = true;
                                        pnlYesNo.Visible = false;
                                        lblOk.Text = "deposit is returned";
                                        ModalPopupExtender1.Show();
                                        ViewState["action"] = "logerror1";
                                        this.ScriptManager1.SetFocus(btnOk);
                                        Session["execute"] = 1;
                                    }
                                    else
                                    {
                                        pnlOk.Visible = true;
                                        pnlYesNo.Visible = false;
                                        lblOk.Text = "You dont have  to give deposit";
                                        ModalPopupExtender1.Show();
                                        ViewState["action"] = "logerror";
                                        this.ScriptManager1.SetFocus(btnOk);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    messagedisplay("No policy set for key not returned in cashier bank policy","bbb");
                }
            }
        }
        else
        {
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Invalid username or password";
            ModalPopupExtender1.Show();
            ViewState["action"] = "logerror";
            this.ScriptManager1.SetFocus(btnOk);
        } 
            pnlLogin.Visible = false;
    }
    # endregion
      
   # region CALCULATIONS RENT
    public void BalanceAmountCalculations()
     {
         double inmrealloc = 0;
            int execute = 0;
            int data=0;
            string  allocdate=""; 
            int roomid=0;
            int rentextra = 0;
            int extrarent = 0, totalcharge, totalrent3;
            DateTime tim2 = DateTime.Parse(txtVecatingTime.Text);
            int reallocid=0;
            double inmrate = 0, inmdepo = 0,inmno=0;
            double noinmate = 0;
            string plainprint = "";
       
             if (conn.State == ConnectionState.Closed)
             {
                 conn.ConnectionString = strConnection;
                 conn.Open();

             }
            # region Values Load from t_roomallocation

             OdbcCommand cmdselect = new OdbcCommand("CALL selectcond(?,?,?)", conn);
             cmdselect.CommandType = CommandType.StoredProcedure;
             cmdselect.Parameters.AddWithValue("tblname", "t_roomallocation tr,m_sub_building msb ,m_room mr");
             cmdselect.Parameters.AddWithValue("attribute", "*");
             cmdselect.Parameters.AddWithValue("conditionv", "adv_recieptno=" + Convert.ToInt32(txtAdRecieptNo.Text) + " and tr.roomstatus='2' and  mr.room_id=tr.room_id and mr.build_id=msb.build_id  ");
             
        
             OdbcDataReader or = cmdselect.ExecuteReader();
// adding previous paid rent with the next allocation rent in alternate allocation vacating

             if (or.Read())
             {
                 roomrent = Convert.ToInt32(or["roomrent"]);

                 plainprint = Convert.ToString(or["is_plainprint"]);
                 try
                 {

                     donorpassno = Convert.ToInt32(or["pass_id"]);
                     Session["passid"] = donorpassno;


                 }
                 catch
                 {


                 } try
                 {

                     donorid = Convert.ToInt32(or["donor_id"]);
                     Session["donorid"] = donorid;

                 }
                 catch
                 {


                 }
                 slnoo = Convert.ToInt32(or["alloc_id"]);
                 Session["allocid"] = slnoo;
                 int allo_id = 0;

                 allo_id = Convert.ToInt32(Session["allocid"].ToString());
                 while (allo_id != 0)
                 {

                     OdbcCommand cmdselectx = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                     cmdselectx.CommandType = CommandType.StoredProcedure;
                     cmdselectx.Parameters.AddWithValue("tblname", "t_roomallocation tr");
                     cmdselectx.Parameters.AddWithValue("attribute", "*");
                     cmdselectx.Parameters.AddWithValue("conditionv", "alloc_id=" + allo_id + "   ");


                     OdbcDataReader orx = cmdselectx.ExecuteReader();
                     // adding previous paid rent with the next allocation rent in alternate allocation vacating

                     if (orx.Read())
                     {


                         if ((Convert.IsDBNull(orx["realloc_from"]) == false))
                         {

                             reallocid = Convert.ToInt32(orx["realloc_from"]);

                             OdbcCommand cmdrealloc = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                             cmdrealloc.CommandType = CommandType.StoredProcedure;
                             cmdrealloc.Parameters.AddWithValue("tblname", "t_roomallocation tr");
                             cmdrealloc.Parameters.AddWithValue("attribute", "roomrent");
                             cmdrealloc.Parameters.AddWithValue("conditionv", "alloc_id=" + reallocid + "");
                             OdbcDataReader orreead1 = cmdrealloc.ExecuteReader();
                             if (orreead1.Read())
                             {
                                 int rentrelloc = Convert.ToInt32(orreead1["roomrent"]);
                                 roomrent = roomrent + rentrelloc;

                             }


                             OdbcCommand cmdreallocxx = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                             cmdreallocxx.CommandType = CommandType.StoredProcedure;
                             cmdreallocxx.Parameters.AddWithValue("tblname", "t_inmateallocation tr");
                             cmdreallocxx.Parameters.AddWithValue("attribute", "inmatecharge");
                             cmdreallocxx.Parameters.AddWithValue("conditionv", "alloc_id=" + reallocid + "");
                             OdbcDataReader orreead1xx = cmdreallocxx.ExecuteReader();
                             if (orreead1xx.Read())
                             {
                                 inmrealloc = inmrealloc + Convert.ToDouble(orreead1xx["inmatecharge"]);


                             }
                             allo_id = reallocid;

                         }
                         else
                         {
                             allo_id = 0;
                         }
                     }
                     else
                     {
                         allo_id = 0;
                     }

                 }




                 Session["roomrent"] = roomrent;
                 allocdate = or["allocdate"].ToString();
                 datedt = DateTime.Parse(or["allocdate"].ToString());
                 customertype = or["alloc_type"].ToString();
                 Session["expdate"] = or["exp_vecatedate"].ToString();
                 Session["deposit"] = Convert.ToInt32(or["deposit"]);
                 roomid = Convert.ToInt32(or["room_id"]);
                 noinmate = Convert.ToDouble(or["noofinmates"]);
                 Session["inm"] = noinmate;
                 Session["roomid"] = roomid;
                 Session["customer"] = or["alloc_type"].ToString();
                 Session["seasonid"] = Convert.ToInt32(or["season_id"]);
                 int sdsd = Convert.ToInt32(or["season_id"]);
             }

             # endregion
            int flag0 = 0;

            # region Calculate Grace Period
         
                   seasonid = Convert.ToInt32(Session["season_subid"]);
                   OdbcCommand cmdselectpolicy = new OdbcCommand();
                   cmdselectpolicy.CommandType = CommandType.StoredProcedure;
                   cmdselectpolicy.Parameters.AddWithValue("tblname", "t_policy_allocation ta ,t_policy_allocation_seasons tps");
                   cmdselectpolicy.Parameters.AddWithValue("attribute", "season_sub_id,noofunits");
                   cmdselectpolicy.Parameters.AddWithValue("conditionv", " reqtype='Common'and ta.rowstatus<>'2' and ((curdate()>=fromdate and  curdate()<=todate) or (curdate()>=fromdate and todate='0000-00-00'))and waitingcriteria='Hours' and (ta.alloc_policy_id=tps.alloc_policy_id ) and tps.season_sub_id=" + seasonid + "");
                   DataTable dtt391 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdselectpolicy);
                  if(dtt391.Rows.Count >0)
                  {
                     for(int i=0;i<dtt391.Rows.Count;i++)
                      {
                      
                            data = 1;
                            int  seaid = Convert.ToInt32(dtt391.Rows[i]["season_sub_id"]);
                            if (seaid == seasonid)
                            {
                                graceperiod  = int.Parse(dtt391.Rows[i]["noofunits"].ToString());
                                flag0 = 1;
                                break;
                            }

                            if (flag0 == 1)
                               break;
                       
                      }

                  }
                  if (data == 0)
                  {
                     messagedisplay("No policy Set for Grace Period ", "warn22");
                     return;

                  }

                  if (flag0 == 0)
                  {
                      messagedisplay("No policy Set for Grace Period ", "warn22");
                                                            
                      return;
                  }
                              
            # endregion

            # region Loading Alternate Building if the room change from donor pass
            string cc = txtPropCheckOut.Text;
            string prpdate=cc.Replace('/','-');
            string[] propSplit = prpdate.Split(' ');


            DateTime tim1 = DateTime.Parse(propSplit[1].ToString() + " " + propSplit[2].ToString());
            DateTime tim22 = DateTime.Parse(txtAllocatedTime.Text);
            string f4 = tim1.ToString();
            string f5 = tim2.ToString();

            TimeSpan TimeDifference = tim1 - tim22;
            td = TimeDifference.Hours;

            string yindate = objcls.yearmonthdate(txtAllocatedDate.Text);
        
            string youtdate = objcls.yearmonthdate(propSplit[0].ToString());
  
            DateTime date1 = DateTime.Parse(yindate);
            DateTime date2 = DateTime.Parse(youtdate);

            TimeSpan datedifference = date2 - date1;
            dd = datedifference.Days;
            tc = dd;
            dd = 24 * dd;
            n = dd + td;

            if (customertype == "General Allocation")
            {

                if (n <= 12)
                {

                    OdbcCommand cm44 = new OdbcCommand("select rc.rent from m_room  mr,m_sub_room_category rc where  roomno=" + int.Parse(txtRoomNo.Text) + " and build_id=" + Convert.ToInt32(cmbBuilding.SelectedValue) + "  and rc.room_cat_id=mr.room_cat_id", conn);
                    ren = Convert.ToInt32(cm44.ExecuteScalar());
                }
                else
                {
                    OdbcCommand cm44 = new OdbcCommand("select rc.rent_1 from m_room  mr,m_sub_room_category rc where  roomno=" + int.Parse(txtRoomNo.Text) + " and build_id=" + Convert.ToInt32(cmbBuilding.SelectedValue) + "  and rc.room_cat_id=mr.room_cat_id", conn);
                    ren = Convert.ToInt32(cm44.ExecuteScalar());
                }

            }
           
            # endregion

            # region Season Check and Donor Pass check

                malyear =Convert.ToInt32(Session["malyear"]);
                malyearid = Convert.ToInt32(Session["malyyearid"]);
                int curseasonid = Convert.ToInt32(Session["currentseasonid"]);
               

                try
                {
                    if (customertype =="Donor Free Allocation" )
                    {

                     // comparing roomno with donor roomno if not equal then calculating the extra rent

                        OdbcCommand cmdpass = new OdbcCommand("CALL selectcond(?,?,?)",conn);
                        cmdpass.CommandType = CommandType.StoredProcedure;
                        cmdpass.Parameters.AddWithValue("tblname", "t_donorpass,m_room");
                        cmdpass.Parameters.AddWithValue("attribute", "  passtype,t_donorpass.room_id");
                        cmdpass.Parameters.AddWithValue("conditionv", " t_donorpass.donor_id=" + donorid + " and season_id=" + curseasonid + " and mal_year_id=" + malyearid + "  and m_room.room_id=t_donorpass.room_id and t_donorpass.pass_id=" + donorpassno + "");
                        OdbcDataReader om5 = cmdpass.ExecuteReader();
                        if (om5.Read())
                        {
                            if (Convert.ToInt32(om5["passtype"]) == 0)
                            {


                                if ((roomid  != Convert.ToInt32(om5["room_id"])))
                                {
                                    OdbcCommand cm444 = new OdbcCommand("select rc.rent from m_room mr,m_sub_room_category rc where room_id=" + Convert.ToInt32(om5["room_id"]) + "  and rc.room_cat_id=mr.room_cat_id", conn);

                                    int rentadd = Convert.ToInt32(cm444.ExecuteScalar());

                                    if (ren > rentadd)
                                    {

                                        rentextra = ren - rentadd;
                                       
                                    }
                                    else
                                        rentextra = 0;

                                }


                                if (totalday >= 1)
                                {
                                    totalday = totalday - 1;
                                }
                            }

                        }

                    }

                        // check for number of free pass

                    else if (customertype == "Donor multiple pass")
                    {
                        int count1 = 0;
                     
                        OdbcCommand cmdpasscount = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                        cmdpasscount.CommandType = CommandType.StoredProcedure;
                        cmdpasscount.Parameters.AddWithValue("tblname", "t_donorpass td,t_roomalloc_multiplepass ta");
                        cmdpasscount.Parameters.AddWithValue("attribute", " count(*) as count");
                        cmdpasscount.Parameters.AddWithValue("conditionv", " ta.alloc_id=" + slnoo + " and ta.pass_id=td.pass_id and td.passtype='0'");
                        OdbcDataReader oz = cmdpasscount.ExecuteReader();
                        if (oz.Read())
                        {
                            count1 = Convert.ToInt32(oz["count"]);
                            if (totalday >= 1)
                            {
                                totalday = totalday - count1;
                            }
                            if (totalday < 0)
                            {
                                totalday = 0;

                            }

                        }

                        OdbcCommand cmdpasstyp1 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                        cmdpasstyp1.CommandType = CommandType.StoredProcedure;
                        cmdpasstyp1.Parameters.AddWithValue("tblname", "t_donorpass,m_room");
                        cmdpasstyp1.Parameters.AddWithValue("attribute", " passtype,t_donorpass.room_id ");
                        cmdpasstyp1.Parameters.AddWithValue("conditionv", " t_donorpass.donor_id=" + donorid + " and season_id=" + curseasonid + " and mal_year_id=" + malyearid + "  and m_room.room_id=t_donorpass.room_id ");
                        OdbcDataReader om5 = cmdpasstyp1.ExecuteReader();
                        if (om5.Read())
                        {
                            if (roomid  != Convert.ToInt32(om5["room_id"]))
                            {
                                OdbcCommand cm444 = new OdbcCommand("select rc.rent from m_room mr,m_sub_room_category rc where room_id=" + Convert.ToInt32(om5["room_id"]) + "  and rc.room_cat_id=mr.room_cat_id", conn);

                                int rentadd = Convert.ToInt32(cm444.ExecuteScalar());

                                if (ren > rentadd)
                                {

                                    rentextra = ren - rentadd;
                                }
                                else
                                    rentextra = 0;

                            }

                        }
                      rentextra = rentextra * count1;


                    }
                }
                catch { };
            # endregion
                      
            # region Total calculation
        ////////////////////////////////////////////////////////////////********************************************///////////////////////////////////////////
                if (rbgrace.Checked == true)
                {
                    if (totalday > 1)
                    {
                        int totday = totalday - 1;
                        extrarent = totday * ren;
                    }

                }
       ////////////////////////////////////////////////////////////////********************************************///////////////////////////////////////////
      
                else
                {
                    extrarent = totalday * ren;
                }



                 DateTime aldate = Convert.ToDateTime(Convert.ToString(ViewState["alloctime"].ToString()));
                DateTime propdate = propdat;
               string aa = txtVacatingDate.Text + " " + txtVecatingTime.Text;
               string vacat = aa.Replace('/', '-');
               
                string bb = txtAllocatedDate.Text + " " + txtAllocatedTime.Text;
                string aldate1 = bb.Replace('/', '-');
                
                String SS = "SELECT TIMEDIFF(STR_TO_DATE('" + vacat + "','%d-%m-%Y %l:%i %p'), STR_TO_DATE('" + aldate1 + "','%d-%m-%Y %l:%i %p'))";
                DataTable DTSS = objcls.DtTbl(SS);
                TimeSpan actperiod = TimeSpan.Parse(DTSS.Rows[0][0].ToString());
                int hrs_used = 0;
                hrs_used = Convert.ToInt32(actperiod.TotalHours);
                if ((actperiod.Minutes > 0) && (actperiod.Minutes < 30))
                {
                    hrs_used++;
                }
                lblhrs.Text = "" + hrs_used + " hrs";
                txtDaysStayed.Text = hrs_used.ToString();

                hrs_used = hrs_used - graceperiod;


                if (hrs_used <= 0)
                {
                    hrs_used = 1;
                }


                String SS1 = "SELECT TIMEDIFF(STR_TO_DATE('" + aldate1 + "','%d-%m-%Y %l:%i %p'),STR_TO_DATE('" + prpdate + "','%d-%m-%Y %l:%i %p'))";
                DataTable DTSS1 = objcls.DtTbl(SS1);
                TimeSpan chkhours = TimeSpan.Parse(DTSS1.Rows[0][0].ToString());
                int acthrs = 0;
                acthrs = Convert.ToInt32(chkhours.TotalHours);
                if ((chkhours.Minutes > 0) && (chkhours.Minutes < 30))
                {
                    acthrs++;
                }
                if (customertype == "Donor Free Allocation")
                {


                    String SSdf = "SELECT TIMEDIFF(STR_TO_DATE('" + vacat + "','%d-%m-%Y %l:%i %p'), STR_TO_DATE('" + prpdate + "','%d-%m-%Y %l:%i %p'))";
                    DataTable DTSSdf = objcls.DtTbl(SSdf);
                    TimeSpan actperioddf = TimeSpan.Parse(DTSSdf.Rows[0][0].ToString());
                    int hrs_useddf = 0;
                    hrs_useddf = Convert.ToInt32(actperioddf.TotalHours);
                    if ((actperioddf.Minutes > 0) && (actperioddf.Minutes < 30))
                    {
                        hrs_useddf++;
                    }
                    hrs_useddf = hrs_useddf - graceperiod;

                    if (hrs_useddf <= 0)
                    {
                        hrs_useddf = 1;
                    }


                    OdbcCommand cmdRR = new OdbcCommand();
                    cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room");
                    cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit");
                    cmdRR.Parameters.AddWithValue("conditionv", " ('" + hrs_useddf + "' > m_rent.start_duration)  AND ('" + hrs_useddf + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category ");

                    DataTable dtRR = new DataTable();
                    dtRR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRR);
                    if (dtRR.Rows.Count > 0)
                    {
                        rentchk = Convert.ToDouble(dtRR.Rows[0]["rent"].ToString());
                    }
                    else
                    {
                        this.ScriptManager1.SetFocus(txtClientid);
                        messagedisplay("Policy not set for period", "warn6");
                        this.ScriptManager1.SetFocus(btnOk);
                    }


                    extrarent = Convert.ToInt32(rentchk);


                }

                else if (customertype == "Donor multiple pass")
                {
                   
                }
                else    //customertype == "General Allocation" || customertype == "TDB Allocation"
                {


                    
                    OdbcCommand cmdRR = new OdbcCommand();
                    cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                    cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,noofinmates,rate,m_inmate.deposit");
                    cmdRR.Parameters.AddWithValue("conditionv", " ('" + hrs_used + "' > m_rent.start_duration)  AND ('" + hrs_used + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category AND m_room.room_id = m_inmate.room_id AND '" + hrs_used + "'  > m_inmate.start_duration AND '" + hrs_used + "' <= m_inmate.end_duration ");

                    DataTable dtRR = new DataTable();
                    dtRR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRR);
                    if (dtRR.Rows.Count > 0)
                    {
                        rentchk = Convert.ToDouble(dtRR.Rows[0]["rent"].ToString());
                        inmrate = Convert.ToDouble(dtRR.Rows[0]["rate"].ToString());
                        inmdepo = Convert.ToDouble(dtRR.Rows[0]["deposit"].ToString());
                        inmno = Convert.ToDouble(dtRR.Rows[0]["noofinmates"].ToString());

                    }
                    else
                    {
                        this.ScriptManager1.SetFocus(txtClientid);
                        messagedisplay("Policy not set for period", "warn6");
                        this.ScriptManager1.SetFocus(btnOk);
                    }


                    extrarent = Convert.ToInt32(rentchk);
                }

             
          double  inmtotcharge = 0;
                double oldimtot = 0,oldinmno=0,oldinmdepo=0,oldinmrate=0;
                string stdv = @"SELECT extra_inmates,rate,inmatecharge,inmatedeposit,totalcharge FROM t_inmateallocation WHERE alloc_id='" + Session["allocid"].ToString() + "'";
                DataTable DTSS_stdv = objcls.DtTbl(stdv);

                if (DTSS_stdv.Rows.Count > 0)
                {
                    oldinmno = Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                    oldinmrate = Convert.ToDouble(DTSS_stdv.Rows[0]["rate"].ToString());
                    oldimtot = Convert.ToDouble(DTSS_stdv.Rows[0]["inmatecharge"].ToString());
                    oldinmdepo = Convert.ToDouble(DTSS_stdv.Rows[0]["inmatedeposit"].ToString());
                    inmtotcharge =  Convert.ToDouble(DTSS_stdv.Rows[0]["totalcharge"].ToString());

                }

                double xtrainm = noinmate - inmno;
                double newinmtot = xtrainm * inmrate;
                double newinmdepo = xtrainm * inmdepo;
                double newinmtotcharge = newinmtot + newinmdepo;
                oldimtot = oldimtot + inmrealloc;
                inmtotcharge = inmrealloc + inmtotcharge;
                Session["inmatedeposit"] = oldinmdepo;
                txtinmateadvance.Text = inmtotcharge.ToString();

            Session["extraamount"] = extrarent;

            totalcharge = 0;


            if (customertype == "General Allocation" || customertype == "TDB Allocation")
            {


                OdbcCommand cmdselect1 = new OdbcCommand("Call selectcond(?,?,?)", conn);
                cmdselect1.CommandType = CommandType.StoredProcedure;
                cmdselect1.Parameters.AddWithValue("tblname", "t_roomallocation tr");
                cmdselect1.Parameters.AddWithValue("attribute", "totalcharge,deposit,advance,alloc_type");
                cmdselect1.Parameters.AddWithValue("conditionv", "adv_recieptno=" + Convert.ToInt32(txtAdRecieptNo.Text) + " and tr.roomstatus='2' ");
                OdbcDataReader or2 = cmdselect1.ExecuteReader();
                if (or2.Read())
                {

                    totalcharge = Convert.ToInt32(or2["totalcharge"]);
                    deposit = Convert.ToInt32(or2["deposit"]);
                    Session["deposit"] = deposit;
                    advance = Convert.ToInt32(or2["advance"]);
                    Session["advance"] = advance;
                    advance = totalcharge;
                    advance1 = advance;
                    advance = advance - deposit;

                }
            }
            else
            {
                OdbcCommand cmdselect1 = new OdbcCommand("Call selectcond(?,?,?)", conn);
                cmdselect1.CommandType = CommandType.StoredProcedure;
                cmdselect1.Parameters.AddWithValue("tblname", "t_roomallocation tr");
                cmdselect1.Parameters.AddWithValue("attribute", "totalcharge,deposit,advance,alloc_type");
                cmdselect1.Parameters.AddWithValue("conditionv", "adv_recieptno=" + Convert.ToInt32(txtAdRecieptNo.Text) + " and tr.roomstatus='2' ");
                OdbcDataReader or2 = cmdselect1.ExecuteReader();
                if (or2.Read())
                {
                    OdbcCommand cm44 = new OdbcCommand("select rc.security from m_room  mr,m_sub_room_category rc where  roomno=" + int.Parse(txtRoomNo.Text) + " and build_id=" + Convert.ToInt32(cmbBuilding.SelectedValue) + "  and rc.room_cat_id=mr.room_cat_id", conn);
                    deposit = Convert.ToInt32(cm44.ExecuteScalar());
                    Session["deposit"] = deposit;


                    totalcharge = Convert.ToInt32(or2["totalcharge"]);
                    deposit = Convert.ToInt32(or2["deposit"]);
                    Session["deposit"] = deposit;
                    advance = Convert.ToInt32(or2["advance"]);
                    Session["advance"] = advance;
                    advance = totalcharge;
                    advance1 = advance;
                    advance = advance - deposit;

                }


                
            }
        
            int deposit4 = deposit;
            int overstay = 0;
             if (hrs_used > acthrs)
            {
                if (extrarent > roomrent)
                {
                    overstay = 1;
                    int z = extrarent - roomrent;
                    Session["overcharge"] = z;
                    totalcharge = totalcharge + z;
                   
                }
    ////////////////////inmate/////////////////////////////////
                if (newinmtot > oldimtot)
                {
                    double y  = newinmtot - oldimtot;
                    inmtotcharge = inmtotcharge + y;
                }
            }
            else
                Session["overcharge"] = 0;
            int keyexecutiveflag = 0;

            try
            {
                keyexecutiveflag = Convert.ToInt32(Session["executekey"]);

            }
            catch { }

            int otherch=0;
            if (txtKeynotReturnCharge.Text != "")
            {
                otherch = otherch + int.Parse(txtKeynotReturnCharge.Text);

            }
            if (txtRoomNotGoodCondition .Text!= "")
            {
                otherch = otherch + int.Parse(txtRoomNotGoodCondition.Text);

            }
        
           if ((txtRoomNotGoodCondition.Text  == "" )&& (txtKeynotReturnCharge.Text==""))
            {
                otherch = 0;
            }
            Session["othercharge"] = otherch;
            Session["servicecharge"] = totalcharge;
            int grossamount = totalcharge + otherch; 
            totalcharge = totalcharge - deposit;
            rent = otherch + totalcharge;
                        
            double inmgross = inmtotcharge - oldinmdepo;

            int chk = Convert.ToInt32(Session["changegross"]);

            if (txtClientid.Text != "")
            {
                txtGrossAmount.Text = rent.ToString();
                txtinmategross.Text = inmgross.ToString();
            }
            else
            {

                if (chk == 1)
                {
                    txtGrossAmount.Text = rent.ToString();
                    txtinmategross.Text = inmgross.ToString();
                }
                else
                {
                    txtGrossAmount.Text = grossamount.ToString();
                    txtinmategross.Text = inmtotcharge.ToString();
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                    {
                        Session["unclaimed"] = "ok";

                    }
                }
            }

            int osaty = Convert.ToInt32(Session["overstay"]);
            if (osaty == 1)
            {
                rent = (roomrent + otherch);
                txtGrossAmount.Text = (roomrent + otherch).ToString();
                txtinmategross.Text = (oldimtot).ToString();
            }
          
            int cv = (otherch + extrarent);
                  
            execute = Convert.ToInt32(Session["executeflag1"]);

            if (chk == 1)
            {
                execute = 1;
            }
            # endregion

            # region Check for client Id given
            try
            {
               
                   depo = 0;
                   Session["notreturn"] = 0;
                   if (execute != 1)
                    {

                     data = 0;

                     if ((txtClientid.Text == ""))
                      {

                       deposit = 0;
                       oldinmdepo = 0;
                       depo = 1;
                       deposite2 = deposit;
                       deposit = 0;
                       flag0 = 1;
                       Session["notreturn"] = 1;
                       HiddenField1.Value = "1";
                                                                
                      }
                 
                    }
                         
            }
            catch { }

         # endregion

        // if old print then give deposit without reading barcode

            //if((plainprint=="yes") &&  ((cmbCheckOutMehtod.SelectedItem.ToString() == "Normal") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")))
            //{
            //    deposit = deposit4;
            //    HiddenField1.Value = "0";
            //    Session["notreturn"] = 0;
            //    depo = 0; 
            //}


       // if Extended Stay then deposit is not return
            //if ((overstay == 1) && (execute != 1))
            //{
               
            //}
            double inmbal = 0;
            inmbal = Convert.ToDouble(txtinmateadvance.Text) - Convert.ToDouble(txtinmategross.Text);

            if ((cmbCheckOutMehtod.SelectedItem.ToString() == "Force Vacating") && (rdoKeyReturn.Text == "No"))
            {
                int xx =Convert.ToInt32(txtKeynotReturnCharge.Text);
                if (xx > 0)
                {

                    string actualdate = txtVacatingDate.Text.ToString();
                    actualdate = objcls.yearmonthdate(actualdate);
                    actualdate = actualdate + " " + txtVecatingTime.Text;
                    DateTime expdate = DateTime.Parse(Session["expdate"].ToString());
                    DateTime actualdate1 = DateTime.Parse(actualdate);
                    DateTime actualdate11 = DateTime.Parse(actualdate);

                    if (expdate > actualdate11)
                    {
                        deposit = deposit4;
                        HiddenField1.Value = "0";
                        Session["notreturn"] = 0;
                        depo = 0;
                    }
                }

            }

            Session["balchk"] = 0;

            # region Calulating gross amount
            int td_deposit;

            if (advance == rent && (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room"))
            {
                DateTime checkout = DateTime.Parse(objcls.yearmonthdate(txtVacatingDate.Text) + " " + txtVecatingTime.Text); //checkout time

                string[] checkSplity = txtPropCheckOut.Text.Split(' ');

                DateTime actcheckin = DateTime.Parse(objcls.yearmonthdate(checkSplity[0].ToString()) + " " + checkSplity[1].ToString() + " " + checkSplity[2].ToString());
              
                TimeSpan TimeDifference_deposit = checkout - actcheckin;
                td_deposit = TimeDifference_deposit.Minutes;
                int td_hour = TimeDifference_deposit.Hours;

                int totmin = td_hour * 60 + td_deposit;
                string grace = "";
                if (Session["customer"].ToString() == "Clubbing")
                {

                    string club = @"SELECT alloc_type FROM t_clubdetails WHERE alloc_id =(SELECT alloc_id FROM t_roomallocation WHERE adv_recieptno = '"+ txtAdRecieptNo.Text +"')  ORDER BY club_id DESC LIMIT 1";
                    DataTable dt_club = objcls.DtTbl(club);
                    
                    grace = @"SELECT gracetime,graceperiod FROM t_policy_allocation WHERE (CURDATE()
                             BETWEEN fromdate AND todate ) AND reqtype = 'General Allocation'";
                }
                else
                {
                     grace = @"SELECT gracetime,graceperiod FROM t_policy_allocation WHERE (CURDATE()
                             BETWEEN fromdate AND todate ) AND reqtype = '" + Session["customer"].ToString() + "'";
                }
                DataTable dt_grace = objcls.DtTbl(grace);

                int val = 60 * Convert.ToInt32(dt_grace.Rows[0][1].ToString());

                if(rbgrace.Checked == true)
                {
              
                    val =  val + Convert.ToInt32(dt_grace.Rows[0][0].ToString());
                
                }
                if ((totmin <= val) || (osaty == 1))
                {

                    totalrent1 = deposit;
                    inmbal = oldinmdepo;
                    btnBalanceIndicator.Text = "Due To Swami";
                    btnBalanceIndicator.BackColor = System.Drawing.Color.Green;
                                      
                }
                else
                {
                    txtBalanceAmount.Text = "0";
                    txtinmatebal.Text = "0";

                }

                //if (osaty == 1)
                //{

                //    totalrent1 = deposit;
                //    inmbal = oldinmdepo;
                //    btnBalanceIndicator.Text = "Due To Swami";
                //    btnBalanceIndicator.BackColor = System.Drawing.Color.Green;
                //}
                //else
                //{
                //    txtBalanceAmount.Text = "0";
                //    txtinmatebal.Text = "0";
                //}
               

            }
            else if (advance < rent)
            {

                totalrent3 = rent - advance;
                if (totalrent3 < deposit)
                {
                    totalrent1 = deposit - totalrent3;
                    con3 = 0;
                  

                    if (Convert.ToDouble(totalrent1) > 0)
                    {
                        if ((inmbal + Convert.ToDouble(totalrent1)) > 0)
                        {
                            btnBalanceIndicator.Text = "Due To Swami";
                            btnBalanceIndicator.BackColor = System.Drawing.Color.Green;
                        }
                        else
                        {
                            btnBalanceIndicator.Text = "Due From Swami";
                            btnBalanceIndicator.BackColor = System.Drawing.Color.Red;
                
                        }
                       
                    }
                    else
                    {
                        if ((inmbal + Convert.ToDouble(totalrent1)) > 0)
                        {
                            btnBalanceIndicator.Text = "Due To Swami";
                            btnBalanceIndicator.BackColor = System.Drawing.Color.Green;
                           
                        }
                        else
                        {
                            btnBalanceIndicator.Text = "Due From Swami";
                            btnBalanceIndicator.BackColor = System.Drawing.Color.Red;

                           
                        }
                        Session["balchk"] = 1;
                    }
                    balancee = advance1 - totalrent1;


                }
                else if (totalrent3 > deposit)
                {

                    totalrent1 = totalrent3 - deposit;
                    if (Convert.ToDouble(totalrent1) > 0)
                    {
                      
                            btnBalanceIndicator.Text = "Due From Swami";
                            con3 = 1;
                            btnBalanceIndicator.BackColor = System.Drawing.Color.Red;
                  
                        Session["balchk"] = 1;
                    }
                    else
                    {
                       
                            if ((inmbal + Convert.ToDouble(totalrent1)) <= 0)
                            {
                                btnBalanceIndicator.Text = "Due From Swami";
                                con3 = 1;
                                btnBalanceIndicator.BackColor = System.Drawing.Color.Red;
                            }
                            else
                            {
                                btnBalanceIndicator.Text = "Due To Swami";
                                btnBalanceIndicator.BackColor = System.Drawing.Color.Green;
                            }
                       }

                    balancee = advance1 + totalrent1;
                }
            }
            else if (advance > rent)
            {

                totalrent3 = advance - rent;
                totalrent1 = totalrent3 + deposit;
                con3 = 0;

                if ( Convert.ToDouble(totalrent1) > 0)
                {
              
                    if ((inmbal + Convert.ToDouble(totalrent1)) > 0)
                    {
                        btnBalanceIndicator.Text = "Due To Swami";
                        btnBalanceIndicator.BackColor = System.Drawing.Color.Green;
                    }
                    else
                    {
                        btnBalanceIndicator.Text = "Due From Swami";
                        btnBalanceIndicator.BackColor = System.Drawing.Color.Red;
                    }
                    
                }
                else
                {
                    if ((inmbal + Convert.ToDouble(totalrent1)) > 0)
                    {
                        btnBalanceIndicator.Text = "Due To Swami";
                        btnBalanceIndicator.BackColor = System.Drawing.Color.Green;
                    }
                    else
                    {
                        btnBalanceIndicator.Text = "Due From Swami";
                        btnBalanceIndicator.BackColor = System.Drawing.Color.Red;
                       
                    }
                    Session["balchk"] = 1;
                }

                balancee = advance1 - totalrent1;
            }

            txtBalanceAmount.Text = totalrent1.ToString();

            txtinmatebal.Text = inmbal.ToString();


            if (txtBalanceAmount.Text == "0")
            {
                if (txtinmatebal.Text == "0")
                {
                    btnBalanceIndicator.BackColor = System.Drawing.Color.Wheat;
                    btnBalanceIndicator.Text = "";

                }
              
            }
            double bal = 0;
            if (Session["balchk"].ToString() == "1")
            {
                bal = -Convert.ToDouble(txtBalanceAmount.Text) + Convert.ToDouble(txtinmatebal.Text);
            }
            else
            {
                 bal = Convert.ToDouble(txtBalanceAmount.Text) + Convert.ToDouble(txtinmatebal.Text);
            }
            if (bal < 0)
            {
                bal = -bal;
            }

            txttotalbal.Text = bal.ToString();
          
            conn.Close();
            Session["balchk"] = 0;
                
            # endregion
     }

    # endregion

   # region Grid Load
    public void gridview()
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        
        OdbcCommand cmdgridview = new OdbcCommand();
        cmdgridview.CommandType = CommandType.StoredProcedure;
        cmdgridview.Parameters.AddWithValue("tblname", "t_roomallocation  rt,m_sub_building msb,m_room mr");
        cmdgridview.Parameters.AddWithValue("attribute", "adv_recieptno,  buildingname ,roomno ,swaminame,DATE_FORMAT( exp_vecatedate,'%d-%m-%y %l:%i %p') as vacatedate ");
        cmdgridview.Parameters.AddWithValue("conditionv", " rt. roomstatus=" + 2 + "   and  date(exp_vecatedate)=curdate()  and   rt.room_id=mr.room_id and mr.build_id=msb.build_id   order by exp_vecatedate");
        DataTable dttgridview = new DataTable();
        dttgridview = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdgridview);
        dtgRoomVacateDetails.DataSource = dttgridview;
        dtgRoomVacateDetails.DataBind();
        if (dtgRoomVacateDetails.Rows.Count> 0)
        {
            chkselectall.Visible = true;
            lnkRoomsPreviousHours.Visible = true;
            lnkRoomsSucceedingHour.Visible = true;


        }
        
        
    }
    # endregion

   # region MOUSE OVER GRID
    protected void dtgRoomVacateDetails_RowCreated(object sender, GridViewRowEventArgs e)
    { 
       

    }
    # endregion

   # region CLEAR

    public void clear()
    {
        lblrent.Visible = false;
        lblrent.Text = "";
        odbtrans1 = null;
        odbTrans = null;
        rdoKey.Visible = false;
        rdodeposit.Visible = false;
        rdodeposit.Checked = false;
        rdoKey.Checked = false;
        chkselectall.Checked = false;
        txtAllocNo.Text = "";
        txtPropCheckOut.Text = "";
        txtRentAlloc.Text = "";
        cmbaltbulilding.SelectedIndex = -1;
        cmbaltroom.SelectedIndex = -1;
        txtDepositAlloc.Text = "";
        txtAdvAmount.Text = "";
        txtExtendDate.Text = "";
        txtAllocNumber.Text = "";
        txtAllocRecNo.Text = "";
        btnCheckout.Text = "CheckOut";
        cmbCheckOutMehtod.SelectedIndex = -1;
        cmbCheckOutMehtod.SelectedItem.Text = "Normal";
        Session["executeflag1"] = 0;
        btnExecutive.Visible = true;
        btnExecutive.Visible = false;
        HiddenField1.Value = "0";
        depo = 0;
        txtKeynotReturnCharge.Text = "";
        txtRoomNotGoodCondition.Text = "";
        pnlalternate.Visible = false;
        pnlExtend.Visible = false;
        con1 = 1;
        con3 = 0;
        keyreturn = 1;
        lblPealityDamage.Visible = false;
        lblPenalityKey.Visible = false;
        pnlLogin.Visible = false;
        btnSave.Enabled = false;
        txtFromDate.Text= "";
        txtToDate.Text = "";
        Session["executedeposit"] = 0;
        Session["executekey"] = 0;
        txtKeynotReturnCharge.Visible = false;
        txtRoomNotGoodCondition.Visible = false;
        Panel5.Visible = true;
        Panel7.Visible = false;
        btnPrinterOnOff.Enabled = false;
     
        gridview();
        pnlReports.Visible = false;
        btnBalanceIndicator.Text = "";
        btnBalanceIndicator.BackColor = System.Drawing.Color.Wheat;
       
     
        txtAllocatedTime.Text = "";
        txtAllocatedDate.Text = "";
        txtinmno.Enabled = false;
        Session["inm"] = "0";
       

        OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
        DateTime date = Convert.ToDateTime(cmd.ExecuteScalar());
        string s = date.ToShortDateString();
        string f2 = date.ToString("dd/MM/yyyy");
        ViewState["date"] = date;

        txtVacatingDate.Text = f2.ToString();
        txtVecatingTime.Text = date.ToShortTimeString();
        txtAdRecieptNo.Text = "";
        txtRoomNo.Text = "";
        txtClientid.Text = "";
        txtBalanceAmount.Text = "";
        txtCustomerPlace.Text = "";
        txtDistrict.Text = "";
        txtGrossAmount.Text = "";
        cmbBuilding.SelectedIndex = -1;
        txtCustomerName.Text = "";
        txtAdvanceAmount.Text = "";
        txtDaysStayed.Text = "";
        rdoKeyReturn.Text = "Yes";
        rdoComplaints.Text = "No";
        rdoRoomCondition.Text = "Yes";
        btnExecutive.Visible = true;
        flag = 0;
        txtNoofDays.Text = "";
        txtExtendDate.Text = "";
       txtDepositAlloc.Text = "";
        txtRentAlloc.Text = "";
        txtAdvAmount.Text = "";
        cmbaltbulilding.SelectedIndex = -1;
        cmbaltroom.SelectedIndex = -1;
        this.ScriptManager1.SetFocus(txtClientid);
        ViewState["alloctime"] = "";
        ViewState["allocmin"] = "";
        ViewState["propdat"] = "";
        ViewState["date"] = "";
        ViewState["paytype"] = "0";
        Session["flag"] = "false";
        Session["normflag"] = "false";
        Session["unclaimed"] = "not";

        txtinmatebal.Text = "";
        txtinmategross.Text = "";
        txtinmateadvance.Text = "";
        txtinmcharge.Text = "0";
        txtinmdeposit.Text = "0";
        txttotalbal.Text = "";
    }
    # endregion
     
   # region ADVANCE AMOUNT REPORT
    protected void LinkButton4_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        counterno = Convert.ToInt32( Session["counterid"]);
        counter = Session["counter"].ToString();
        DataTable dt;
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        f2 = dts.ToString("dd-MMM");
        string kk = dts.ToString("yyyy-MM-dd");


        DateTime gh = DateTime.Now;
        string transtim = gh.ToString("dd-MM-yyyy HH-mm");
        string ch = "advanceaountpaid" + transtim.ToString() + ".pdf";
        string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

        Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
        Font font8 = FontFactory.GetFont("ARIAL", 9);
        Font font9 = FontFactory.GetFont("ARIAL",11);
        pdfPage page = new pdfPage();
        PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
        wr.PageEvent = page;
        doc.Open();
        PdfPTable table = new PdfPTable(3);
        int total = 0;
        if ((txtToDate.Text == "") || (txtFromDate.Text== ""))
        {
            OdbcCommand cmd31 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_roomvacate");
            cmd31.Parameters.AddWithValue("attribute", "sum(retdepamount) as amount1 ,dayend ");
            cmd31.Parameters.AddWithValue("conditionv", "dayend ='" + kk + "'group by dayend");
            OdbcDataAdapter da = new OdbcDataAdapter(cmd31);
            dt = new DataTable();
            da.Fill(dt);
            PdfPCell cell = new PdfPCell(new Phrase("Claimed Deposit details  on " + f2  , font8));
            cell.Colspan = 3;
            cell.HorizontalAlignment = 1;
            cell.Border = 1;
            table.AddCell(cell);
          
            doc.Add(table);
            string x = "";
         if(dt.Rows.Count>0)
            {
             x=  dt.Rows[0]["amount1"].ToString();
             total = Convert.ToInt32(dt.Rows[0]["amount1"]);
            }
        }

        else
        {

            string aa =objcls.yearmonthdate(txtFromDate.Text );
            string bb =objcls.yearmonthdate(txtToDate.Text );

            OdbcCommand cmda311 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmda311.CommandType = CommandType.StoredProcedure;
            cmda311.Parameters.AddWithValue("tblname", "t_roomvacate");
            cmda311.Parameters.AddWithValue("attribute", "sum(retdepamount) as amount1");
            cmda311.Parameters.AddWithValue("conditionv", " dayend>='" + aa + "' and dayend<='" + bb + "'");
            OdbcDataAdapter daf1 = new OdbcDataAdapter(cmda311);
            DataTable dt1 = new DataTable();
            daf1.Fill(dt1);

            if (dt1.Rows.Count  > 0)
            {
                if (Convert.IsDBNull(dt1.Rows[0]["amount1"]) == false)
                {

                    total = Convert.ToInt32(dt1.Rows[0]["amount1"]);

                }


            }
                        
            OdbcCommand cmda31 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmda31.CommandType = CommandType.StoredProcedure;
            cmda31.Parameters.AddWithValue("tblname", "t_roomvacate");
            cmda31.Parameters.AddWithValue("attribute", "sum(retdepamount) as amount1,dayend");
            cmda31.Parameters.AddWithValue("conditionv", " dayend>='" + aa + "' and dayend<='" + bb + "' group by dayend ");
            OdbcDataAdapter daf = new OdbcDataAdapter(cmda31);
            dt = new DataTable();
            daf.Fill(dt);
            PdfPCell cell = new PdfPCell(new Phrase(" Claimed advance amount details  From " + txtFromDate.Text.ToString() + "  TO " + txtToDate.Text.ToString() , font8));
            cell.Colspan = 3;
            cell.Border = 1;
            cell.HorizontalAlignment = 1;
            table.AddCell(cell);
            doc.Add(table);
        }

        PdfPTable table1 = new PdfPTable(3);
        PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Slno", font9)));
        table1.AddCell(cell1);
        PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk("Date", font9)));
        table1.AddCell(cell12);
        PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Claimed Deposit", font9)));
        table1.AddCell(cell2);
     
        doc.Add(table1);
        int slno = 0;

        int i = 0;
        foreach (DataRow dr in dt.Rows)
        {
            slno = slno + 1;
            if (i > 3)
            {
                i = 0;
                doc.NewPage();
                PdfPTable table2 = new PdfPTable(3);

                PdfPCell cell1d = new PdfPCell(new Phrase(new Chunk("Slno", font9)));
                table2.AddCell(cell1d);
                PdfPCell cell12d = new PdfPCell(new Phrase(new Chunk("Date", font9)));
                table2.AddCell(cell12d);
                PdfPCell cell2d = new PdfPCell(new Phrase(new Chunk("Claimed Deposit", font9)));
                table2.AddCell(cell2d);

            }

            PdfPTable table3 = new PdfPTable(3);


            PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font8)));
            table3.AddCell(cell4);


            DateTime dt5 = DateTime.Parse(dr["dayend"].ToString());
            string date1 = dt5.ToString("dd-MM-yyyy");
            PdfPCell cell7 = new PdfPCell(new Phrase(new Chunk(date1.ToString(), font8)));
            table3.AddCell(cell7);

     
            PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(dr["amount1"].ToString(), font8)));
            table3.AddCell(cell5);

            i++;
            doc.Add(table3);

        }
        if (dt.Rows.Count > 0)
        {
            PdfPTable tablef = new PdfPTable(3);

            PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk("Total", font8)));
            cell6.Colspan = 2;
            cell6.HorizontalAlignment = 2;
            tablef.AddCell(cell6);

            PdfPCell cell6s = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
            tablef.AddCell(cell6s);


            doc.Add(tablef);

        }

        PdfPTable table4 = new PdfPTable(3);
        PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
        cellf.HorizontalAlignment = Element.ALIGN_LEFT;
        cellf.PaddingLeft = 20;
        cellf.MinimumHeight = 30;
        cellf.Colspan = 3;
        cellf.Border = 0;
        table4.AddCell(cellf);

        PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
        cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
        cellf1.PaddingLeft = 20;
        cellf1.Border = 0;
        cellf1.Colspan = 3;
        table4.AddCell(cellf1);

        PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom", font8)));
        cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
        cellh2.PaddingLeft = 20;
        cellh2.Border = 0;
        cellh2.Colspan = 3;
        table4.AddCell(cellh2);


        doc.Add(table4);

        doc.Close();
        Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=Advance amount report";
             string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script); 


    }

    # endregion

   # region initial last function
    public void initiallast()
    {

        char[] b = new char[30];
      
        string a = txtCustomerName.Text;
        int f = a.Length;
        int i;
        for (i = 0; i < a.Length; i++)
        {
            b[i] = a[i];

        }
        b[i] = '\0';
        if (a[1] == '.' || a[1] == ' ')
        {

            if ((b[1] == '.') || (b[1] == ' '))
            {



                if ((b[1] == '.') || (b[1] == ' '))
                {
                    b[f++] = '.';
                    b[f++] = b[0];
                    b[0] = ' ';
                    if ((b[3] != '.') || (b[3] != ' '))
                    {
                        b[1] = ' ';
                    }

                }
                for (int j = 2; j <= a.Length - 2; j++)
                {
                    if ((b[j] == '.') || (b[j] == ' '))
                    {
                        if ((b[j - 2] == '.') || (b[j - 2] == ' '))
                        {
                            b[f++] = '.';
                            b[f++] = b[j - 1];
                            b[j - 1] = ' ';
                            b[j - 2] = ' ';
                        }
                        if (b[j + 2] != '.')
                        {
                            b[j] = ' ';
                        }
                    }
                }
                txtCustomerName.Text = "";
                for (int k = 0; k < b.Length; k++)
                {
                    if (b[k] != ' ' && b[k] != '\0')
                    {
                        txtCustomerName.Text  += b[k].ToString();
                    }
                }
            }
        }
        else
        {
           txtCustomerName.Text  = a.ToString();

        }

    }
    # endregion

   # region Todate < From date
    protected void txttodate_TextChanged(object sender, EventArgs e)
    {


       string str1 =objcls.yearmonthdate(txtFromDate.Text );
       DateTime dt1 = DateTime.Parse(str1);
       string str2 =objcls.yearmonthdate(txtToDate.Text);
       DateTime dt2 = DateTime.Parse(str2);
        if (dt1 > dt2)
        {

            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "From date is greater than To date";
            ViewState["action"] = "warn28";
            ModalPopupExtender1.Show();
           
        }


    }
    # endregion

   # region from date text change
    protected void txtfromdate_TextChanged(object sender, EventArgs e)
    {
        this.ScriptManager1.SetFocus(txtToDate);
    }
    # endregion
           
   # region Button Yes Click
        protected void btnYes_Click(object sender, EventArgs e)
        {

            if (ViewState["action"].ToString() == "depositreturn")
            {
                # region deposit return

                if (conn.State == ConnectionState.Closed)
                {
                    conn.ConnectionString = strConnection;
                    conn.Open();
                }

                string clientid = base64Encode(txtClientid.Text);

                ViewState["action"] = "Nil";

                OdbcCommand cmd1 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd1.CommandType = CommandType.StoredProcedure;
                cmd1.Parameters.AddWithValue("tblname", "t_roomallocation tr, t_roomvacate tv");
                cmd1.Parameters.AddWithValue("attribute", "vacate_id,tv.counter_id,season_id,tv.dayend");
                cmd1.Parameters.AddWithValue("conditionv", "barcode='" + clientid + "' and tv.alloc_id=tr.alloc_id");
                OdbcDataReader or = cmd1.ExecuteReader();
                if (or.Read())
                {
                    int vacateid = Convert.ToInt32(or["vacate_id"]);
                    int counter_id = Convert.ToInt32(or["counter_id"]);
                    int season_id = Convert.ToInt32(or["season_id"]);
                    DateTime dayend = DateTime.Parse(or["dayend"].ToString());
                    string dayend1 = dayend.ToString("yyyy-MM-dd");

                    OdbcCommand cmdc = new OdbcCommand("update t_roomvacate   set retdepamount='100' , return_deposit='1' ,remark='" + " " + "' where vacate_id=" + vacateid + " ", conn);
                    cmdc.ExecuteNonQuery();

                    OdbcCommand cmd2 = new OdbcCommand("select amount from t_daily_transaction  where date='" + dayend1 + "'and counter_id=" + counter_id + " and ledger_id='2' and liability_type='0'", conn);
                    OdbcDataReader ore = cmd2.ExecuteReader();
                    if (ore.Read())
                    {

                        int amount = Convert.ToInt32(ore["amount"]);
                        amount = amount - 100;
                        OdbcCommand cmdv = new OdbcCommand("update t_daily_transaction  set amount=" + amount + " where date='" + dayend1 + "' and counter_id=" + counter_id + " and ledger_id='2' and liability_type='0' ", conn);
                        cmdv.ExecuteNonQuery();
                    }

                    OdbcCommand cmd2v = new OdbcCommand("select total from t_liabilityregister  where dayend='" + dayend1 + "' and ledger_id='2'", conn);
                    OdbcDataReader orev = cmd2v.ExecuteReader();
                    if (orev.Read())
                    {

                        int total = Convert.ToInt32(orev["total"]);
                        total = total - 100;
                        OdbcCommand cmdx = new OdbcCommand("update t_liabilityregister  set total=" + total + " ,chelan_balance=" + total + " where dayend='" + dayend1 + "' and ledger_id='2'", conn);
                        cmdx.ExecuteNonQuery();

                    }

                    OdbcCommand cmd2d = new OdbcCommand("select unclaimdeposit from t_seasondeposit  where  season_id=" + season_id + "   ", conn);
                    OdbcDataReader ored = cmd2d.ExecuteReader();

                    if (ored.Read())
                    {
                        int total = Convert.ToInt32(ored["unclaimdeposit"]);
                        total = total - 100;
                        OdbcCommand cmdb = new OdbcCommand("update t_seasondeposit  set unclaimdeposit=" + total + " where season_id=" + season_id + " ", conn);
                        cmdb.ExecuteNonQuery();
                    }

                    CalulatingCounterLiability();
                    lblOk.Text = "Deposit is given";
                    lblHead.Text = "Tsunami ARMS -Confirmation";
                    ViewState["action"] = "warnn";
                    pnlOk.Visible = true;
                    pnlYesNo.Visible = false;
                    clear();
                    ModalPopupExtender1.Show();
                    this.ScriptManager1.SetFocus(btnOk);

                # endregion
                }
            }

           if (ViewState["action"].ToString() == "realloc")
           {

               # region realloc
               if (conn.State == ConnectionState.Closed)
               {
                   conn.ConnectionString = strConnection;
                   conn.Open();


               }

               string plain = "";
               //if (chkOldReceipt.Checked == true)
               //{
               //    plain = "yes";
               //}
               //else
               //{
                   plain = "no";

               //}

               OdbcCommand cmd712 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
               cmd712.CommandType = CommandType.StoredProcedure;
               cmd712.Parameters.AddWithValue("tblname", "t_roomallocation");
               cmd712.Parameters.AddWithValue("attribute", "adv_recieptno");
               cmd712.Parameters.AddWithValue("conditionv", "adv_recieptno=" + int.Parse(txtAllocRecNo.Text) + " and is_plainprint='"+plain+"'");
               OdbcDataAdapter dacnt712 = new OdbcDataAdapter(cmd712);
               DataTable dtt712 = new DataTable();
               dacnt712.Fill(dtt712);
               if (dtt712.Rows.Count > 0)
               {
                   messagedisplay("Reciept already exists", "v1");
                   this.ScriptManager1.SetFocus(txtAllocRecNo);
                   return;


               }
               conn.Close();
               AllocationSave();
              
               # endregion

           }
           else if (ViewState["action"].ToString() == "donoryes")
           {
               # region Adding Liability to Donor

               try
               {
         
                   int allocno = Convert.ToInt32(Session["allocid"]);
                   int ledgerroomcondition = 0, ledgerkeynot = 0;
                   int donorid = Convert.ToInt32(Session["donorid"]);
                   ledgerkeynot = Convert.ToInt32(Session["keynot"]);
                   ledgerroomcondition = Convert.ToInt32(Session["roomdamage"]);
                   if (txtKeynotReturnCharge.Text != "")
                   {
                       int value = int.Parse(txtKeynotReturnCharge.Text);
                       SavingDataToLedgerWithoutTrans(ledgerkeynot, value, donorid, 2);

                   }
                   if (txtRoomNotGoodCondition.Text != "")
                   {
                       int value = int.Parse(txtRoomNotGoodCondition.Text);
                       SavingDataToLedgerWithoutTrans(ledgerroomcondition, value, donorid, 2);

                   }
                   OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                   cmd3.CommandType = CommandType.StoredProcedure;
                   cmd3.Parameters.AddWithValue("tablename", "t_roomvacate");
                   cmd3.Parameters.AddWithValue("valu", "liability_by='2'");
                   cmd3.Parameters.AddWithValue("convariable", "alloc_id=" + allocno + " ");
                   cmd3.ExecuteNonQuery();
                   ViewState["action"] = "NIL";
                   btnYes.Text = "Yes";
                   btnNo.Text = "No";

               
                   CalulatingCounterLiability();
                   Session["executedeposit"] = 0;


                   lblHead.Text = "Tsunami ARMS - Confirmation";
                   pnlOk.Visible = true;
                   pnlYesNo.Visible = false;
                   lblOk.Text = "Successfully Checked Out";
                   ViewState["action"] = "warnn";
                   ModalPopupExtender1.Show();
                   this.ScriptManager1.SetFocus(btnOk);
               # endregion
               }
               catch
               {
                  messagedisplay("problem found in check out", "warnnnn");

               }

           }

        if (ViewState["action"].ToString() == "printbill")

        {

            // plain paper printing balance receipt
          # region Vacating Receipt Print

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }


            lblhrs.Text = "";
        pnlYesNo.Visible = false;
        int counter = Convert.ToInt32(Session["counterid"]);
        int depret = Convert.ToInt32(Session["deporet"]);
        int deposit1 = 0;
     
        ViewState["action"] = "NILL";
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        years = dts.Year;
        string f2 = dts.ToString("dd/MM/yyyy");
        string f3 = objcls.yearmonthdate(f2);
        deposit1 = Convert.ToInt32(Session["deposit"]);
     
        int extarent = Convert.ToInt32(Session["overcharge"]);
        int totalservicecharge =extarent;
        
        if (txtRoomNotGoodCondition.Text != "") 
        {
            totalservicecharge = totalservicecharge + Convert.ToInt32(txtRoomNotGoodCondition.Text);

        }

        int keyexecutiveflag = 0;
        try
        {
            keyexecutiveflag = Convert.ToInt32(Session["executekey"]);

        }
        catch { }

        if (txtKeynotReturnCharge.Text != "")
        {
            totalservicecharge = totalservicecharge + Convert.ToInt32(txtKeynotReturnCharge.Text);

        }
        if (chkplain.Checked == true)
        {

            #region plain paper print

            lblHead.Text = "Tsunami ARMS - Confirmation";
            lblMsg.Text = "Are  you sure to print the biil in plain paper?";
            ViewState["action"] = "plainpaper";
            pnlOk.Visible = false;
            pnlYesNo.Visible = true;
            ModalPopupExtender1.Show();
            this.ScriptManager1.SetFocus(btnYes);

            return;
            # endregion
        }

        else
        {
            if (txtStartRecieptNo.Text != "")
            {

                Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 50, 50);
                try
                {
                    int s = Convert.ToInt32(txtStartRecieptNo.Text);

                }
                catch { }

                string recc = "Balancereceipt" + txtStartRecieptNo.Text + ".pdf";
                pdfFilePath = Server.MapPath(".") + "/pdf/" + recc;
                Font font8 = FontFactory.GetFont("ARIAL", 10);
                PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                doc.Open();
                PdfPTable table = new PdfPTable(5);

                float[] colWidths23 = { 45, 0, 50, 50, 30 };
                table.SetWidths(colWidths23);
                table.TotalWidth = 500f;

                # region format

                int depovalue = 0;
                string prin = "", prin4 = "", prin3 = "";
                if (depret == 0)
                {

                    depovalue = deposit1;
                }

                for (int ii = 0; ii < 29; ii++)
                {
                    PdfPCell cell = new PdfPCell(new Phrase(""));
                    cell.Border = 0;
                    cell.Colspan = 5;
                    cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    table.AddCell(cell);
                }

                for (int jj = -1; jj <= 10; jj++)
                {
                    if (jj == -1)
                    {

                        prin = "";
                        prin4 = f2.ToString();
                        prin3 = "";
                    }
                    if (jj == 0)
                    {
                        prin = "   " + txtCustomerName.Text.ToString();
                        prin3 = "";
                        prin4 = "";
                    }
                    else if (jj == 1)
                    {

                        prin = "    " + txtCustomerPlace.Text.ToString() + " " + txtDistrict.Text.ToString();
                        prin4 = "";
                        prin3 = "";
                    }
                    else if (jj == 2)
                    {
                        string bg = cmbBuilding.SelectedItem.ToString();
                        string rm = txtRoomNo.Text.ToString();
                        prin = "    " + bg + " , " + rm;
                        prin4 = "";
                        prin3 = "";
                    }
                    else if (jj == 3)
                    {

                        string str11 = txtAllocatedDate.Text.ToString();
                        prin = "    " + txtAllocatedDate.Text.ToString() + " " + txtVecatingTime.Text.ToString();
                        prin4 = "";
                        prin3 = "";
                    }
                    else if (jj == 4)
                    {

                        prin = "    " + txtVacatingDate.Text.ToString() + " " + txtVecatingTime.Text.ToString();
                        prin4 = "";
                        prin3 = "";
                    }
                    else if (jj == 5)
                    {


                        prin = "(Overstay Rent,key notreturn,roomdamage)";
                        if (txtKeynotReturnCharge.Text != "")
                        {

                            try
                            {
                                keyexecutiveflag = Convert.ToInt32(Session["executekey"]);

                            }
                            catch { }



                            prin3 = extarent.ToString() + "+" + txtKeynotReturnCharge.Text.ToString();



                        }
                        else if (txtKeynotReturnCharge.Text == "")
                        {
                            prin3 = extarent.ToString();

                        }


                        if (txtRoomNotGoodCondition.Text != "")
                        {
                            prin3 = prin3 + "+" + txtRoomNotGoodCondition.Text;

                        }
                        else if (txtRoomNotGoodCondition.Text == "")
                        {
                            prin3 = prin3;

                        }
                        prin4 = "      " + totalservicecharge.ToString();

                    }
                    else if (jj == 6)
                    {
                        prin3 = "";
                        prin = "";
                        prin4 = "      " + Session["deposit"].ToString();
                    }
                    else if (jj == 7)
                    {
                        prin = "";
                        prin3 = "";
                        prin4 = "      " + txtBalanceAmount.Text.ToString();
                    }

                    else if (jj == 8)
                    {
                        prin = "";
                        prin3 = "";
                        prin4 = "";

                    }
                    else if (jj == 9)
                    {
                        prin = "";
                        prin3 = "";
                        prin4 = "";

                    }
                    else if (jj == 10)
                    {
                        prin = "          " + depovalue.ToString();
                        prin3 = "";
                        prin4 = "";

                    }

                    PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell10.Border = 0;
                    table.AddCell(cell10);

                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell11.Border = 0;
                    table.AddCell(cell11);
                    if (jj == 5)
                    {

                        PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(prin + " " + prin3, font8)));
                        cell12.Border = 0;
                        cell12.Colspan = 2;
                        table.AddCell(cell12);
                    }
                    else
                    {
                        PdfPCell cell121 = new PdfPCell(new Phrase(new Chunk(prin, font8)));
                        cell121.Border = 0;
                        table.AddCell(cell121);


                        PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk(prin3, font8)));
                        cell13.Border = 0;
                        table.AddCell(cell13);
                    }
                    PdfPCell cell14 = new PdfPCell(new Phrase(new Chunk(prin4, font8)));
                    cell14.Border = 0;
                    table.AddCell(cell14);
                }


                doc.Add(table);


                userid = Convert.ToInt32(Session["userid"]);
                string dayendd = Session["dayend"].ToString();

                # endregion

                doc.Close();

                int re = 0;

                System.Diagnostics.Process.Start(pdfFilePath);
                if (chkplain.Checked == true)
                {
                    re = reno;
                }
                else
                {
                    try
                    {

                        re = Convert.ToInt32(txtStartRecieptNo.Text);
                    }
                    catch { }
                    plainstatus = "no";
                }


                int allocid = Convert.ToInt32(Session["allocid"]);

                datetoday = Convert.ToString(Session["datenow"]);

                userid = Convert.ToInt32(Session["userid"]);
                cashierid = Convert.ToInt32(Session["cashierid"]);
                CalulatingCounterLiability();


                # region UPDATING ROOMTRANSACTIONVEC AND SERVICELIABILITY WITH BILL NO

                int liability = Convert.ToInt32(Session["liablerent"]);

                string cc = cmbCheckOutMehtod.SelectedItem.ToString();

                if (conn.State == ConnectionState.Closed)
                {
                    conn.Open();

                }

                if ((liability > 0) && (cc == "Normal") || (cc == "Overstay") || (cc == "Alternate Room"))
                {

                    int ledgerrent = 0;
                    int transid = 0;
                    OdbcCommand cmdledger = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Rent Remmittance'", conn);
                    OdbcDataReader orledger = cmdledger.ExecuteReader();
                    if (orledger.Read())
                    {
                        ledgerrent = Convert.ToInt32(orledger["ledger_id"]);

                    }
                    if (con3 == 1)
                    {

                        {
                            OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counter + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerrent + " and liability_type='0'", conn);
                            OdbcDataReader orn = cmn.ExecuteReader();
                            if (orn.Read())
                            {

                                int amount = Convert.ToInt32(orn["amount"]);
                                amount = amount + liability;
                                OdbcCommand cmd3 = new OdbcCommand();
                                cmd3.CommandType = CommandType.StoredProcedure;
                                cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                                cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                                cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counter + " and ledger_id=" + ledgerrent + " and liability_type='0'");
                                int v1 = objcls.Procedures("CALL updatedata(?,?,?)", cmd3);

                            }
                            else
                            {

                                OdbcCommand cmd48 = new OdbcCommand();
                                cmd48.CommandType = CommandType.StoredProcedure;
                                cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
                                cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                                DataTable dtt48 = objcls.SpDtTbl("CALL selectdata(?,?)", cmd48);

                                if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
                                {

                                    transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                                    transid = transid + 1;

                                }
                                else
                                {
                                    transid = 1;

                                }
                                OdbcCommand cmdliability = new OdbcCommand();
                                cmdliability.CommandType = CommandType.StoredProcedure;
                                cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
                                cmdliability.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counter + ",'1'," + ledgerrent + "," + liability + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                                int val = objcls.Procedures("CALL savedata(?,?)", cmdliability);
                            }


                        }


                    }


                }

                CalulatingCounterLiability();

                if (conn.State == ConnectionState.Closed)
                {
                    conn.ConnectionString = strConnection;
                    conn.Open();

                }

                OdbcCommand cmd31 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tablename", "t_roomvacate");
                cmd31.Parameters.AddWithValue("valu", "is_printed=" + 1 + ",is_plainprint=" + 0 + " ,bill_receiptno=" + re + " ,roomrent=" + liability + "");
                cmd31.Parameters.AddWithValue("convariable", "alloc_id=" + allocid + "");
                cmd31.ExecuteNonQuery();

                # endregion

                if (chkplain.Checked == false)
                {

                    int r = int.Parse(txtRecieptBalance.Text);
                    r = r - 1;
                    txtRecieptBalance.Text = r.ToString();
                    int startno = int.Parse(txtStartRecieptNo.Text);
                    startno++;
                    txtStartRecieptNo.Text = startno.ToString();


                    if (r == 0)
                    {
                        lblHead.Text = "Tsunami ARMS - Warning";
                        pnlOk.Visible = true;
                        pnlYesNo.Visible = false;
                        lblOk.Text = "receipt is empty please edit the receipt details";
                        ViewState["action"] = "warn25";
                        ModalPopupExtender1.Show();

                        txtRecieptBalance.Text = "";
                        txtStartRecieptNo.Text = "";
                    }

                    else
                    {

                        if (r < 10)
                        {
                            lblHead.Text = "Tsunami ARMS - Warning";
                            pnlOk.Visible = true;
                            pnlYesNo.Visible = false;
                            lblOk.Text = "less than 10 receipt is remaining";
                            ViewState["action"] = "warn26";
                            ModalPopupExtender1.Show();
                            txtRecieptBalance.Text = r.ToString();
                            int startno1 = int.Parse(txtStartRecieptNo.Text);
                            startno1++;
                            txtStartRecieptNo.Text = startno1.ToString();


                        }
                    }
                    int itemid = Convert.ToInt32(Session["itemid"]);
                    OdbcCommand cmdinventory = new OdbcCommand();
                    cmdinventory.CommandType = CommandType.StoredProcedure;
                    cmdinventory.Parameters.AddWithValue("tablename", "t_pass_receipt");
                    cmdinventory.Parameters.AddWithValue("valu", " balance=" + int.Parse(txtRecieptBalance.Text) + " , updateddate='" + datetoday + "'");
                    cmdinventory.Parameters.AddWithValue("convariable", "balance!=" + 0 + " and counter_id=" + counter + " and item_id=" + itemid + "");
                    objcls.Procedures("CALL updatedata(?,?,?)", cmdinventory);
                    conn.Close();
                }

                clear();
                conn.Close();

            }
            else
            {
                messagedisplay("Receipt is empty", "warn90");

            }

        }

        }


        if (ViewState["action"].ToString() == "selectcashier")
        {
            btnYes.Text = "Yes";
            btnNo.Text = "No";
            ViewState["action"] = "NILL";
            flag = 1;
            CheckOut();
          # endregion
        }


        if (ViewState["action"].ToString() == "warn9")
        { 
          

        }
        else if (ViewState["action"].ToString() == "checkout")
        {
            # region CheckOut methods

            if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
            {
                # region Normal

                ViewState["action"] = "NILL";
                int userid = Convert.ToInt32(Session["userid"]);
                conn.ConnectionString = strConnection;
                int counter = Convert.ToInt32(Session["counterid"]);

                if (conn.State == ConnectionState.Closed)
                {
                    conn.ConnectionString = strConnection;
                    conn.Open();

                }
          
                int allocid = Convert.ToInt32(Session["allocid"]);
                OdbcCommand cx = new OdbcCommand("select * from t_roomvacate  where   alloc_id=" + allocid + "   ", conn);
                OdbcDataReader ox = cx.ExecuteReader();
                if (!ox.Read())
                {

                    conn.Close();
                    CheckOut();

                }
                else
                {
                    lblHead.Text = "Tsunami ARMS - Warning";
                    pnlOk.Visible = true;
                    pnlYesNo.Visible = false;
                    lblOk.Text = "You have already checked out";
                    ViewState["action"] = "warn10";
                    ModalPopupExtender1.Show();


                }
                # endregion
            }
            else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Force Vacating")
            {
                # region Force Vacating


                string customer1 = Session["customer"].ToString();

                if (conn.State == ConnectionState.Closed)
                {
                    conn.ConnectionString = strConnection;
                    conn.Open();


                }
             
                ViewState["action"] = "NILL";
                userid = Convert.ToInt32(Session["userid"]);
                int counter = Convert.ToInt32(Session["counterid"]);
                int notreturn = Convert.ToInt32(Session["notreturn"]);
                OdbcCommand cmdvacate1 = new OdbcCommand("select rv.alloc_id from t_roomvacate rv,t_roomallocation ra  where adv_recieptno=" + txtAdRecieptNo.Text + " and roomstatus=" + 1 + "  and  rv.alloc_id=ra.alloc_id", conn);
                OdbcDataReader orvacate1 = cmdvacate1.ExecuteReader();
                if (!orvacate1.Read())
                {

                    if (conn.State == ConnectionState.Closed)
                    {
                        conn.ConnectionString = strConnection;
                        conn.Open();
                    }

                    DateTime datenow = DateTime.Now;
                    string f22 = datenow.ToString("dd/MM/yyyy");
                    string datetoday =objcls.yearmonthdate(f22);
                    datetoday = datetoday + " " + DateTime.Now.ToString("HH:mm:ss");
                    string dayendd = Session["dayend"].ToString();

                    userid = Convert.ToInt32(Session["userid"]);
                    cashierid = Convert.ToInt32(Session["cashierid"]);

                    int sum = Convert.ToInt32(txtBalanceAmount.Text);
                    if (sum <= 0)
                    {

                        AbscondingCheckoutCaretakerLiability();
        
                    }

                    else
                    {

                        if ((customer1 != "Donor Free Allocation") && (customer1 != "Donor Paid Allocation") && (customer1 != "Donor multiple pass"))
                        {

                            lblHead.Text = "Tsunami ARMS - Confirmation";
                            lblMsg.Text = "Where to add Liability ?";
                            ViewState["action"] = "selectcashier";
                            pnlOk.Visible = false;
                            pnlYesNo.Visible = true;
                            btnYes.Text = "Cashier";
                            btnNo.Text = "Caretaker";
                            ModalPopupExtender1.Show();
                            this.ScriptManager1.SetFocus(btnNo);

                        }
                        else
                        {
                            pnlOk.Visible = false;
                            pnlYesNo.Visible = false;
                            pnlYesNo2.Visible = true;
                            lblHead.Text = "Tsunami ARMS - Confirmation";
                            ModalPopupExtender1.Show();
                            this.ScriptManager1.SetFocus(btnYes);

                        }

                    }

                }
                else
                {
                    lblHead.Text = "Tsunami ARMS - Warning";
                    pnlOk.Visible = true;
                    pnlYesNo.Visible = false;
                    lblOk.Text = "Alreay Checked Out";
                    ViewState["action"] = "warn23";
                    ModalPopupExtender1.Show();

                }


                # endregion

            }
            else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
            {
                # region Alternate Room
                AllocationSave();
            
                CheckOut();
                # endregion

            }
            else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
            {
                # region Overstay
                AllocationSave();
                CheckOut();
                # endregion
            }
            # endregion

        }

        else if (ViewState["action"].ToString() == "plainpaper")
        {

            # region Plain Paper Print
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();


            }
            int counter = Convert.ToInt32(Session["counterid"]);
            int depret = Convert.ToInt32(Session["deporet"]);
            int deposit1 = 0;
            pnlYesNo.Visible = false;

            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            years = dts.Year;
            string f2 = dts.ToString("dd/MM/yyyy");
            string f3 =objcls.yearmonthdate(f2);
            int extarent = Convert.ToInt32(Session["overcharge"]);
            int totalservicecharge = extarent;
          
            int keyexecutiveflag = 0;

            try
            {
                keyexecutiveflag = Convert.ToInt32(Session["executekey"]);

            }
            catch { }
            if (txtRoomNotGoodCondition.Text != "")
            {
                totalservicecharge = totalservicecharge + Convert.ToInt32(txtRoomNotGoodCondition.Text);

            }
            if (txtKeynotReturnCharge.Text != "") 
            {
                totalservicecharge = totalservicecharge + Convert.ToInt32(txtKeynotReturnCharge.Text);

            }

            deposit1 = Convert.ToInt32(Session["deposit"]);
            ViewState["action"] = "NILL";
            OdbcCommand cmdreciept = new OdbcCommand("select max(bill_receiptno) as bill_receiptno from t_roomvacate  where   is_plainprint='1'   order by bill_receiptno desc", conn);
            OdbcDataReader orreciept = cmdreciept.ExecuteReader();
            if (orreciept.Read())
            {
                if (Convert.IsDBNull(orreciept["bill_receiptno"]) == false)
                {

                    reno = Convert.ToInt32(orreciept["bill_receiptno"]);
                    reno = reno + 1;
                }
                else
                    reno = 100;
            }

            string reccplain = "Balancereceiptplainprint" + reno + ".pdf";
            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 50, 50);
            pdfFilePath = Server.MapPath(".") + "/pdf/" + reccplain;
            FontFactory.Register("C:\\WINDOWS\\Fonts\\Arial.ttf");
          
            Font font8 = FontFactory.GetFont("Arial", 10);
            Font barcode = FontFactory.GetFont("Code128bwin", 20, 0);
            Font font9 = FontFactory.GetFont("Arial", 12, 1);
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));

            doc.Open();
            PdfPTable table = new PdfPTable(6);
            table.TotalWidth = 500f;
            table.LockedWidth = true;
            PdfPCell cellimag = new PdfPCell(iTextSharp.text.Image.GetInstance("F:\\TRMS newww1\\pdf\\dev copy.jpeg"), true);
            cellimag.Border = 1;
            cellimag.Colspan = 6;
            cellimag.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellimag);


            for (int ii = 0; ii < 3; ii++)
            {
                PdfPCell cells = new PdfPCell(new Phrase("", font8));
                cells.Border = 0;
                cells.Colspan = 6;
                cells.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                table.AddCell(cells);
            }

            PdfPCell cellxs = new PdfPCell(new Phrase("Balance Reciept Bill", font9));
            cellxs.Border = 0;
            cellxs.Colspan = 6;
            cellxs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellxs);


            PdfPCell cells0 = new PdfPCell(new Phrase("Sl no:"));
            cells0.Border = 0;

            cells0.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells0);

            PdfPCell cells01 = new PdfPCell(new Phrase(reno.ToString()));
            cells01.Border = 0;

            cells01.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells01);


            PdfPCell cells02 = new PdfPCell(new Phrase("", font8));
            cells02.Border = 0;

            cells02.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells02);
            PdfPCell cells2a = new PdfPCell(new Phrase("", font8));
            cells2a.Border = 0;

            cells2a.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells2a);


            PdfPCell cells2ad = new PdfPCell(new Phrase("Date :", font8));
            cells2ad.Border = 0;

            cells2ad.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells2ad);

            PdfPCell cells2d = new PdfPCell(new Phrase(f2.ToString(), font8));
            cells2d.Border = 0;
            //cells2.Colspan = 5;
            cells2d.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells2d);
            for (int iii = 0; iii <= 2; iii++)
            {
                PdfPCell cellsi = new PdfPCell(new Phrase("", font8));
                cellsi.Border = 0;
                cellsi.Colspan = 6;
                cellsi.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                table.AddCell(cellsi);
            }

            //# region format1

            PdfPCell cells2d1 = new PdfPCell(new Phrase("Customer Name :", font8));
            cells2d1.Border = 0;
            //cells2.Colspan = 6;
            cells2d1.Colspan = 2;
            cells2d1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells2d1);

            PdfPCell cells2d11 = new PdfPCell(new Phrase(txtCustomerName.Text.ToString(), font8));
            cells2d11.Border = 0;
            cells2d11.Colspan = 4;
            cells2d11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells2d11);

            PdfPCell cells2d112 = new PdfPCell(new Phrase("Place: ", font8));
            cells2d112.Border = 0;
            cells2d112.Colspan = 2;
            cells2d112.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells2d112);

            PdfPCell cells2d111 = new PdfPCell(new Phrase(txtCustomerPlace.Text.ToString(), font8));
            cells2d111.Border = 0;
            cells2d111.Colspan = 4;
            //cells2d111.MinimumHeight = 20;
            cells2d111.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cells2d111);
            PdfPCell cellsfu = new PdfPCell(new Phrase("Building  and Room no :", font8));
            cellsfu.Border = 0;
            cellsfu.Colspan = 2;
            //cellsfu.MinimumHeight = 20;
            cellsfu.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsfu);

            PdfPCell cellsfg = new PdfPCell(new Phrase(cmbBuilding.SelectedItem.ToString() + "  " + txtRoomNo.Text.ToString(), font8));
            cellsfg.Border = 0;
            cellsfg.Colspan = 4;
            //cellsf.MinimumHeight = 20;
            cellsfg.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsfg);


            PdfPCell cellsa = new PdfPCell(new Phrase("Check in date & time:", font8));
            cellsa.Border = 0;
            //cells2d111.Colspan = 3;
            cellsa.Colspan = 2;
            cellsa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsa);

            PdfPCell cellsb = new PdfPCell(new Phrase(txtAllocatedDate.Text.ToString() + txtAllocatedTime.Text.ToString(), font8));
            cellsb.Border = 0;
            cellsb.Colspan = 4;
            cellsb.HorizontalAlignment = 0; 
            table.AddCell(cellsb);


            PdfPCell cellsc = new PdfPCell(new Phrase("Check out date & time:", font8));
            cellsc.Border = 0;
            cellsc.Colspan = 2;
            //cellsc.Colspan = 5;
            cellsc.HorizontalAlignment = 0; 
            table.AddCell(cellsc);

            PdfPCell cellsd = new PdfPCell(new Phrase(txtVacatingDate.Text.ToString() + " " + txtVecatingTime.Text.ToString(), font8));
            cellsd.Border = 0;
            cellsd.Colspan = 4;
            cellsd.HorizontalAlignment = 0; 
            table.AddCell(cellsd);

            for (int i = 1; i <= 1; i++)
            {
                PdfPCell cellsii = new PdfPCell(new Phrase("", font8));
                cellsii.Border = 0;
                cellsii.Colspan = 6;
                cellsii.HorizontalAlignment = 0;
                table.AddCell(cellsii);

            }
            int deposit = 0;
            for (int i = 1; i <= 3; i++)
            {
                string heading = "";
                int value = 0;
                if (i == 1)
                {
                    heading = "Service charge" + "(" + "overstaty Rent" + ",Keynot return charge" + ",RoomDamage)";
                    if ((txtKeynotReturnCharge.Text != "") )
                    {

                        heading = heading + extarent.ToString() + "+" + txtKeynotReturnCharge.Text.ToString();

                    }
                    else if (txtKeynotReturnCharge.Text == "")
                    {
                        heading = heading + extarent.ToString() + "+" + "0";

                    }

                    if (txtRoomNotGoodCondition.Text != "")
                    {
                        heading = heading + "+" + txtRoomNotGoodCondition.Text;

                    }
                    else if (txtRoomNotGoodCondition.Text == "")
                    {
                        heading = heading + "+" + "0";

                    }

                    value = totalservicecharge;
              
                }
                if (i == 2)
                {
                    heading = "Security deposit";

                    value = Convert.ToInt32(Session["deposit"]);

                }
                if (i == 3)
                {
                    heading = "Refund";
                    if (depret == 1)
                    {
                        value = 0;

                    }
                    else
                    {

                        value = Convert.ToInt32(Session["deposit"]);
                    }
                    deposit = value;
                    value = int.Parse(txtBalanceAmount.Text);

                }

                PdfPCell cellsiim = new PdfPCell(new Phrase(heading.ToString(), font8));
                //cellsiim.Border = 0;
                cellsiim.Border = 1;
                cellsiim.Colspan = 5;
               
                cellsiim.HorizontalAlignment = 0; 
                table.AddCell(cellsiim);

                PdfPCell cellsiim1 = new PdfPCell(new Phrase(value.ToString(), font8));
                cellsiim1.Border = 1;

                cellsiim1.Colspan = 1;
                cellsiim1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                table.AddCell(cellsiim1);


            }

            PdfPCell cellsa7 = new PdfPCell(new Phrase("Recieved the security amount", font8));
            cellsa7.Border = 1;
            cellsa7.Colspan = 3;
            cellsa7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsa7);
            PdfPCell cellsa7j = new PdfPCell(new Phrase(deposit.ToString(), font8));
            cellsa7j.Border = 1;
            cellsa7j.Colspan = 3;
            cellsa7j.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsa7j);
            PdfPCell cellsa7n = new PdfPCell(new Phrase("Signature of the client", font8));
            cellsa7n.Border = 0;
            cellsa7n.Colspan = 2;
            cellsa7n.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsa7n);
            PdfPCell cellsa8 = new PdfPCell(new Phrase(" ", font8));
            cellsa8.Border = 0;
            //cellsa8.Colspan = 2;
            cellsa8.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsa8);
            PdfPCell cellsa8g = new PdfPCell(new Phrase("Executive Officer/ Accommodation Officer ", font8));
            cellsa8g.Border = 0;
            cellsa8g.Colspan = 2;
            cellsa8g.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsa8g);
            PdfPCell cellsa81g = new PdfPCell(new Phrase("", font8));
            cellsa81g.Border = 0;
            cellsa81g.Colspan = 3;
            cellsa81g.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsa81g);
            PdfPCell cellsa81g6 = new PdfPCell(new Phrase("", font8));
            cellsa81g6.Border = 1;
            cellsa81g6.Colspan = 6;
            cellsa81g6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
            table.AddCell(cellsa81g6);
            doc.Add(table);
            PdfAction jAction = PdfAction.JavaScript("this.print(true);\r", wr);
            wr.AddJavaScript(jAction);
            doc.Close();
            frame1.Attributes["src"] = "pdf/" + reccplain;

            if (chkplain.Checked == true)
            {


            }
         

            int allocid = Convert.ToInt32(Session["allocid"]);

            datetoday = Convert.ToString(Session["datenow"]);

            userid = Convert.ToInt32(Session["userid"]);
            cashierid = Convert.ToInt32(Session["cashierid"]);
            CalulatingCounterLiability();

            # region UPDATING ROOMTRANSACTIONVEC AND SERVICELIABILITY WITH BILL NO

            int liability = Convert.ToInt32(Session["liablerent"]);

            string cc = cmbCheckOutMehtod.SelectedItem.ToString();

            if (conn.State == ConnectionState.Closed)
            {
                conn.Open();

            }

            if ((liability > 0) && (cc == "Normal") || (cc == "Overstay") || (cc == "Alternate Room"))
            {



                int ledgerrent = 0;
                int transid = 0;
                OdbcCommand cmdledger = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Rent Remmittance'", conn);
                OdbcDataReader orledger = cmdledger.ExecuteReader();
                if (orledger.Read())
                {
                    ledgerrent = Convert.ToInt32(orledger["ledger_id"]);

                }
                if (con3 == 1)
                {

                    if (liability > 0)
                    {

                        OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" +dat + "' and counter_id=" + counter + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerrent + " and liability_type='0'", conn);
                        OdbcDataReader orn = cmn.ExecuteReader();
                        if (orn.Read())
                        {

                            int amount = Convert.ToInt32(orn["amount"]);
                            amount = amount + liability;
                            OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                            cmd3.CommandType = CommandType.StoredProcedure;
                            cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                            cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                            cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dat + "' and  counter_id=" + counter + " and ledger_id=" + ledgerrent + " and liability_type='0'");
                            cmd3.ExecuteNonQuery();

                        }

                        else
                        {

                            OdbcCommand cmd48 = new OdbcCommand("CALL selectdata(?,?)", conn);
                            cmd48.CommandType = CommandType.StoredProcedure;
                            cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
                            cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                            OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmd48);
                            DataTable dtt48 = new DataTable();
                            dacnt48.Fill(dtt48);
                            if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
                            {

                                transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                                transid = transid + 1;

                            }
                            else
                            {
                                transid = 1;

                            }
                            OdbcCommand cmdliability = new OdbcCommand("CALL savedata(?,?)", conn);
                            cmdliability.CommandType = CommandType.StoredProcedure;
                            cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
                            cmdliability.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counter + ",'1'," + ledgerrent + "," + liability + ",'" + dat + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                            cmdliability.ExecuteNonQuery();
                        }


                    }


                }

            }

            CalulatingCounterLiability();

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();


            }

            OdbcCommand cmd31 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tablename", "t_roomvacate");
            cmd31.Parameters.AddWithValue("valu", "is_printed=" + 1 + ",is_plainprint=" + 0 + " ,bill_receiptno=" + reno + " ,roomrent=" + liability + "");
            cmd31.Parameters.AddWithValue("convariable", "alloc_id=" + allocid + "");
            cmd31.ExecuteNonQuery();

            # endregion


            # region Updating Transaction Tables
      
            DateTime datenow = DateTime.Now;

            OdbcCommand cmd31o = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd31o.CommandType = CommandType.StoredProcedure;
            cmd31o.Parameters.AddWithValue("tablename", "t_roomvacate");
            cmd31o.Parameters.AddWithValue("valu", "is_printed=" + 1 + ",is_plainprint=" + 1 + " ,bill_receiptno=" + reno + "");

            cmd31o.Parameters.AddWithValue("convariable", "alloc_id=" + allocid + "");
            cmd31o.ExecuteNonQuery();

            System.Diagnostics.Process.Start(pdfFilePath);

            # endregion

         
            # endregion

        }
        else if (ViewState["action"].ToString() == "missing")
        {

            # region Missing Balance Receipt

            int docid1 = 0;
            int g, s, diff;
            string dayend = Session["dayend"].ToString();
            string datenow = Session["datenow"].ToString();
            int tuo;
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }
            int counter = Convert.ToInt32(Session["counterid"]);
            OdbcCommand cm2 = new OdbcCommand("select bill_receiptno from t_roomvacate where bill_receiptno>" + 0 + " and counter_id='" + counter + "' order by bill_receiptno desc limit 0,1", conn);
            OdbcDataReader oo = cm2.ExecuteReader();
            if (oo.Read())
            {
                g = Convert.ToInt32(oo["bill_receiptno"]);
                s = int.Parse(txtStartRecieptNo.Text);
                int itemid = Convert.ToInt32(Session["itemid"]);
                diff = s - g;
                int noofdamage = diff - 1;
                int docid = 0;
                OdbcCommand cmd2 = new OdbcCommand("select max(mis_id) as mis_id from t_misdamage_count", conn);
                OdbcDataReader ort = cmd2.ExecuteReader();
                if (ort.Read())
                {
                    if (Convert.IsDBNull(ort["mis_id"]) == false)
                    {

                        docid = Convert.ToInt32(ort["mis_id"]);
                        docid = docid + 1;

                    }
                    else
                    {
                        docid = 1;

                    }

                }

                OdbcCommand cmd21 = new OdbcCommand("select max(mis_docid) as doc_id from t_misdamage_doc", conn);
                OdbcDataReader ort1 = cmd21.ExecuteReader();
                if (ort1.Read())
                {
                    if (Convert.IsDBNull(ort1["doc_id"]) == false)
                    {

                        docid1 = Convert.ToInt32(ort1["doc_id"]);
                        docid1 = docid1 + 1;

                    }
                    else
                    {
                        docid1 = 1;

                    }

                }

                int reciept = Convert.ToInt32(txtStartRecieptNo.Text);

                for (int i = 1; i <= noofdamage; i++)
                {
                    g = g + 1;

                    OdbcCommand cb1 = new OdbcCommand("insert into t_misdamage_doc values(" + docid1 + ",'" + dayend + "', " + itemid + ",'0'," + g + ", " + userid + ",'" + datenow + "')", conn);
                    cb1.ExecuteNonQuery();
                    docid1++;
                }

              OdbcCommand cb = new OdbcCommand("insert into t_misdamage_count values(" + docid + "," + itemid + ", " + noofdamage + ", '0'," + userid + ",'" + datenow + "')", conn);

                cb.ExecuteNonQuery();
                tuo = int.Parse(txtRecieptBalance.Text);
                tuo = tuo - noofdamage;
                txtRecieptBalance.Text = tuo.ToString();

                OdbcCommand cccmddd = new OdbcCommand("update t_pass_receipt set balance=" + int.Parse(txtRecieptBalance.Text) + " where quantity!=" + 0 + " and counter_id=" + counter + " and item_id=" + itemid + "", conn);
                cccmddd.ExecuteNonQuery();
            }

            #endregion
        }


        else if (ViewState["action"].ToString() == "missingallocrec")
        {

            # region Allocation Reciept Missing

            int itemid = 0;
            //if (chkOldReceipt.Checked == true)
            //{
            //    itemid = 2;

            //}
            //else
            //{
                itemid = 1;

            //}
              
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();


            }
            int counter = Convert.ToInt32(Session["counterid"]);
            int docid1 = 0;
            string dayend = Session["dayend"].ToString();
            string datenow = Session["datenow"].ToString();
            int diff = Convert.ToInt32(Session["diffe"]);
            int noofdamage = diff - 1;
            int docid = 0;
            OdbcCommand cmd2 = new OdbcCommand("select max(mis_id) as mis_id from t_misdamage_count", conn);
            OdbcDataReader ort = cmd2.ExecuteReader();
            if (ort.Read())
            {
                if (Convert.IsDBNull(ort["mis_id"]) == false)
                {
                    docid = Convert.ToInt32(ort["mis_id"]);
                    docid = docid + 1;

                }
                else
                {
                    docid = 1;

                }

            }

            OdbcCommand cmd21 = new OdbcCommand("select max(mis_docid) as doc_id from t_misdamage_doc", conn);
            OdbcDataReader ort1 = cmd21.ExecuteReader();
            if (ort1.Read())
            {
                if (Convert.IsDBNull(ort1["doc_id"]) == false)
                {
                    docid1 = Convert.ToInt32(ort1["doc_id"]);
                    docid1 = docid1 + 1;

                }
                else
                {
                    docid1 = 1;

                }

            }
            int g = Convert.ToInt32(Session["startno"]);
            int reciept = Convert.ToInt32(txtAllocRecNo.Text);

            for (int i = 1; i <= noofdamage; i++)
            {
                g = g + 1;
                OdbcCommand cb1 = new OdbcCommand();
                cb1.CommandType = CommandType.StoredProcedure;
                cb1.Parameters.AddWithValue("tblname", "t_misdamage_doc");
                cb1.Parameters.AddWithValue("val", "" + docid1 + ",'" + dayend + "', " + itemid + ",'0'," + g + ", " + userid + ",'" + datenow + "'");
                objcls.Procedures("CALL savedata(?,?)", cb1);
                docid1++;
            }


            OdbcCommand cb= new OdbcCommand();
            cb.CommandType = CommandType.StoredProcedure;
            cb.Parameters.AddWithValue("tblname", "t_misdamage_count");
            cb.Parameters.AddWithValue("val", "" + docid + "," + itemid + ", " + noofdamage + ", '0'," + userid + ",'" + datenow + "'");
            objcls.Procedures("CALL savedata(?,?)", cb);
          
            OdbcCommand cmdquantity = new OdbcCommand();
            cmdquantity.CommandType = CommandType.StoredProcedure;
            cmdquantity.Parameters.AddWithValue("tblname", "t_pass_receipt");
            cmdquantity.Parameters.AddWithValue("attribute", "balance");
            cmdquantity.Parameters.AddWithValue("conditionv", "item_id="+itemid+" and counter_id=" + counter + " ");
            DataTable dttquantity = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdquantity);
           
            int quantity = 0;
            if (dttquantity.Rows.Count > 0)
            {
                quantity = Convert.ToInt32(dttquantity.Rows[0]["balance"]);

                quantity = quantity - noofdamage;

                OdbcCommand cccmddd = new OdbcCommand("update t_pass_receipt set balance=" + quantity + " where quantity!=" + 0 + " and counter_id=" + counter + " and item_id=" + itemid  + "", conn);
                cccmddd.ExecuteNonQuery();
            }

            # endregion


        }
        else if (ViewState["action"].ToString() == "checkoutxtramaount")
        {
            int renthour;
            Int32 extrarent;
            DateTime actualcheckin = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text) + " " + txtAllocatedTime.Text);
            string[] proposedcheckoutSplit = txtPropCheckOut.Text.Split(' ');
            DateTime proposedcheckout = DateTime.Parse(objcls.yearmonthdate(proposedcheckoutSplit[0].ToString()) + " " + proposedcheckoutSplit[1].ToString() + " " + proposedcheckoutSplit[2].ToString());
            DateTime actualcheckout = DateTime.Parse(objcls.yearmonthdate(txtVacatingDate.Text) + " " + txtVecatingTime.Text);

            TimeSpan renthourdiff = proposedcheckout - actualcheckin;
            renthour = renthourdiff.Hours;

            if (renthour <= 12)
            {
                OdbcCommand cmdR = new OdbcCommand();
                cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                DataTable dtR = new DataTable();
                dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);
                if (dtR.Rows.Count > 0)
                {

                    extrarent = Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]);

                    ViewState["action"] = "NILL";
                    int userid = Convert.ToInt32(Session["userid"]);
                    conn.ConnectionString = strConnection;
                    int counter = Convert.ToInt32(Session["counterid"]);

                    if (conn.State == ConnectionState.Closed)
                    {
                        conn.ConnectionString = strConnection;
                        conn.Open();

                    }

                    string plain = "";
                    //if (chkOldReceipt.Checked == true)
                    //{
                    //    plain = "yes";
                    //}
                    //else
                    //{
                        plain = "no";

                    //}

                    OdbcCommand cmd712 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmd712.CommandType = CommandType.StoredProcedure;
                    cmd712.Parameters.AddWithValue("tblname", "t_roomallocation");
                    cmd712.Parameters.AddWithValue("attribute", "adv_recieptno");
                    cmd712.Parameters.AddWithValue("conditionv", "adv_recieptno=" + int.Parse(txtAllocRecNo.Text) + " and is_plainprint='" + plain + "'");
                    OdbcDataAdapter dacnt712 = new OdbcDataAdapter(cmd712);
                    DataTable dtt712 = new DataTable();
                    dacnt712.Fill(dtt712);
                    if (dtt712.Rows.Count > 0)
                    {
                        messagedisplay("Reciept already exists", "v1");
                        this.ScriptManager1.SetFocus(txtAllocRecNo);
                        return;
                    }
                    conn.Close();

                    if (conn.State == ConnectionState.Closed)
                    {
                        conn.ConnectionString = strConnection;
                        conn.Open();
                    }

                    int allocid = Convert.ToInt32(Session["allocid"]);
                    OdbcCommand cx = new OdbcCommand("select * from t_roomvacate  where   alloc_id=" + allocid + "   ", conn);
                    OdbcDataReader ox = cx.ExecuteReader();
                    if (!ox.Read())
                    {
                        conn.Close();

                        if (conn.State == ConnectionState.Closed)
                        {
                            conn.ConnectionString = strConnection;
                            conn.Open();
                        }

                        odbTrans = conn.BeginTransaction();

                        userid = Convert.ToInt32(Session["userid"]);
                        cashierid = Convert.ToInt32(Session["cashierid"]);
                        counterno = Convert.ToInt32(Session["counterid"]);
                        ViewState["action"] = "NILL";
                         counter = Convert.ToInt32(Session["counterid"]);

                        DateTime datenow = DateTime.Now;
                        string f22 = datenow.ToString("dd/MM/yyyy");
                        string datetoday = objcls.yearmonthdate(f22);
                        datetoday = datetoday + " " + DateTime.Now.ToString("HH:mm:ss");
                        Session["datetoday"] = datetoday;

                        string dayendd = Session["dayend"].ToString();


                        int vacateid = 0;
                        OdbcCommand cmdvacate = new OdbcCommand("CALL selectdata(?,?)", conn);
                        cmdvacate.CommandType = CommandType.StoredProcedure;
                        cmdvacate.Parameters.AddWithValue("tblname", "t_roomvacate");
                        cmdvacate.Parameters.AddWithValue("attribute", "max(vacate_id)as vacate_id ");
                        cmdvacate.Transaction = odbTrans;
                        OdbcDataAdapter dacntvacate = new OdbcDataAdapter(cmdvacate);
                        DataTable dttvacate = new DataTable();
                        dacntvacate.Fill(dttvacate);
                        if (Convert.IsDBNull(dttvacate.Rows[0]["vacate_id"]) == false)
                        {

                            vacateid = Convert.ToInt32(dttvacate.Rows[0]["vacate_id"]);
                            vacateid = vacateid + 1;

                        }
                        else
                        {
                            vacateid = 1;

                        }

                        int keyret = 1, rommcond = 1, roomcomplaint = 0;
                        if (rdoKeyReturn.Text == "No")
                        {
                            keyret = 0;

                        }
                        if (rdoComplaints.Text == "Yes")
                        {
                            roomcomplaint = 1;

                        }
                        if (rdoRoomCondition.Text == "No")
                        {
                            rommcond = 0;
                        }

                        int overridedeposit = 0;

                        string vacateno = CalculateVacateid();

                        int overrentcharge = Convert.ToInt32(Session["overcharge"]);

                        string actualdate = txtVacatingDate.Text.ToString();
                        string remark = "";
                        actualdate = objcls.yearmonthdate(actualdate);
                        actualdate = actualdate + " " + txtVecatingTime.Text;
                        DateTime expdate = DateTime.Parse(Session["expdate"].ToString());
                        DateTime actualdate1 = DateTime.Parse(actualdate);
                        DateTime actualdate11 = actualdate1;
                        string actualdate21 = actualdate1.ToString("yyyy-MM-dd HH:mm:ss");


                        # region saving data to room vacate table
                        string actualdate2 = actualdate1.ToString("yyyy-MM-dd HH:mm:ss");

                        int othercharge1 = Convert.ToInt32(Session["othercharge"].ToString());
                        int mn = Convert.ToInt32(Session["overcharge"]);
                        OdbcCommand cm3 = new OdbcCommand("CALL savedata(?,?)", conn);
                        cm3.CommandType = CommandType.StoredProcedure;
                        cm3.Parameters.AddWithValue("tblname", "t_roomvacate");
                        if ((cmbCheckOutMehtod.SelectedItem.ToString() == "Normal") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room"))
                        {
                            overrentcharge = 0;

                        }
                        int key1 = 0, damage1 = 0;
                        if (txtKeynotReturnCharge.Text != "")
                        {
                            key1 = Convert.ToInt32(txtKeynotReturnCharge.Text);

                        }
                        if (txtRoomNotGoodCondition.Text != "")
                        {
                            damage1 = Convert.ToInt32(txtRoomNotGoodCondition.Text);

                        }

                        int absconding = 0; int depp = 0;
                        int overridedkey = 0;
                        int editreciept = 0;

                        string sqlquery = "" + vacateid + ",'" + dayendd + "'," + allocid + ",null,null," + overrentcharge + ",'" + "" + "'," + othercharge1 + ", "
                           + " '" + actualdate2 + "'," + 0 + "," + 0 + "," + keyret + ", " + key1 + ",   " + con1 + ", " + damage1 + "," + rommcond + "," + roomcomplaint + ", "
                           + " " + absconding + ",'0',  " + depp + "," + Convert.ToInt32(txtBalanceAmount.Text) + "," + Convert.ToInt32(txtGrossAmount.Text) + "," + counterno + ", "
                           + " " + userid + ",'" + datetoday + "' ,'" + remark + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";

                        cm3.Parameters.AddWithValue("val", sqlquery);

                        cm3.Transaction = odbTrans;
                        cm3.ExecuteNonQuery();
                        Session["edit"] = 0;
                        # endregion

                        # region updating room allocation table status as vacant

                        OdbcCommand cmd3110 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                        cmd3110.CommandType = CommandType.StoredProcedure;
                        cmd3110.Parameters.AddWithValue("tablename", "t_roomallocation");
                        cmd3110.Parameters.AddWithValue("valu", "roomstatus=" + 1 + "");
                        cmd3110.Parameters.AddWithValue("convariable", "adv_recieptno=" + int.Parse(txtAdRecieptNo.Text) + " and roomstatus='2'");
                        cmd3110.Transaction = odbTrans;
                        cmd3110.ExecuteNonQuery();

                        # endregion

                    }
                    else
                    {
                        lblHead.Text = "Tsunami ARMS - Warning";
                        pnlOk.Visible = true;
                        pnlYesNo.Visible = false;
                        lblOk.Text = "You have already checked out";
                        ViewState["action"] = "warn10";
                        ModalPopupExtender1.Show();


                    }

                   
                }
            }
            else
            {
 
            }
            

        }

        }

# endregion

    public void CheckOutXtraamonut()
    {

        try
        {
            Int32 CompId = objcls.PK_exeSaclarInt("cmp_key_id", "t_key_lost");
            if (CompId == 0)
            {
                CompId = 1;
            }
            else
            {
                CompId = CompId + 1;
            }
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }

            odbTrans = conn.BeginTransaction();
            # region Declarations and assignments

            Session["receiptforforcevacating"] = 0;
            int depp = Convert.ToInt32(Session["depositreturn"]);
            pnlYesNo2.Visible = false;
            userid = Convert.ToInt32(Session["userid"]);
            cashierid = Convert.ToInt32(Session["cashierid"]);
            counterno = Convert.ToInt32(Session["counterid"]);
            ViewState["action"] = "NILL";
            int counter = Convert.ToInt32(Session["counterid"]);
            int deposit5 = Convert.ToInt32(Session["deposit"]);
            int absconding = 0;
            if (flag == 1)
            {
                absconding = 1;

            }

            int allocid = Convert.ToInt32(Session["allocid"]);
            int servicecharge = Convert.ToInt32(Session["servicecharge"]);
            int rentt;
            rentt = Convert.ToInt32(Session["extraamount"]);
            int overcharge = Convert.ToInt32(Session["overcharge"]);

            DateTime datenow = DateTime.Now;
            string f22 = datenow.ToString("dd/MM/yyyy");
            string datetoday = objcls.yearmonthdate(f22);
            datetoday = datetoday + " " + DateTime.Now.ToString("HH:mm:ss");
            Session["datetoday"] = datetoday;

            string dayendd = Session["dayend"].ToString();
            string actualdate = txtVacatingDate.Text.ToString();
            string remark = "";
            actualdate = objcls.yearmonthdate(actualdate);
            actualdate = actualdate + " " + txtVecatingTime.Text;
            DateTime expdate = DateTime.Parse(Session["expdate"].ToString());
            DateTime actualdate1 = DateTime.Parse(actualdate);
            DateTime actualdate11 = actualdate1;
            string actualdate21 = actualdate1.ToString("yyyy-MM-dd HH:mm:ss");

            # endregion


            # region Update Key Inventory

            if (rdoKeyReturn.Text == "No")
            {

                string username = Session["username"].ToString();
                int keyid = 0;

                #region KEY LOST
                DateTime date5 = DateTime.Now;
                String Date1 = date5.ToString("yyyy-MM-dd HH:mm");
                OdbcCommand Complaint = new OdbcCommand("CALL savedata(?,?)", conn);
                Complaint.CommandType = CommandType.StoredProcedure;
                Complaint.Parameters.AddWithValue("tblname", "t_key_lost");
                Complaint.Parameters.AddWithValue("val", "" + CompId + "," + cmbBuilding.SelectedValue.ToString() + "," + int.Parse(txtRoomNo.Text) + ","
                     + "'" + Date1.ToString() + "'," + userid + "");
                Complaint.Transaction = odbTrans;
                Complaint.ExecuteNonQuery();
                #endregion

                #region Request
                userid = Convert.ToInt32(Session["userid"]);
                DateTime yee = DateTime.Now;
                string year = yee.ToString("yyyy");
                string strReqNo = "";
                OdbcCommand cd1 = new OdbcCommand("select Max(reqno)from  t_inventoryrequest", conn);
                cd1.Transaction = odbTrans;
                if (Convert.IsDBNull(cd1.ExecuteScalar()) == true)
                {
                    strReqNo = "SrNo/" + year + "/" + "0001";

                }
                else
                {

                    string o1 = cd1.ExecuteScalar().ToString();
                    string ab1 = o1.Substring(10, 4);
                    int a4 = Convert.ToInt32(ab1);
                    a4 = a4 + 1;
                    if (a4 >= 1000)
                    {
                        strReqNo = "SrNo/" + year + "/" + a4;


                    }
                    else if (a4 >= 100)
                    {
                        strReqNo = "SrNo/" + year + "/0" + a4;

                    }
                    else if (a4 >= 10)
                    {

                        strReqNo = "SrNo/" + year + "/00" + a4;

                    }
                    else if (a4 < 10)
                    {
                        strReqNo = "SrNo/" + year + "/000" + a4;

                    }
                }


                #endregion

                OdbcCommand cm44 = new OdbcCommand("CALL savedata(?,?)", conn);
                cm44.CommandType = CommandType.StoredProcedure;
                cm44.Parameters.AddWithValue("tblname", "t_inventoryrequest");
                cm44.Parameters.AddWithValue("val", "'" + strReqNo + "','" + username + "',null,'1'," + counter + "," + 2 + ",'" + datetoday + "','" + "0" + "'," + userid + ",'" + datetoday.ToString() + "'," + userid + ",'" + datetoday.ToString() + "'");
                cm44.Transaction = odbTrans;
                cm44.ExecuteNonQuery();
                int id1;
                OdbcCommand cmd4 = new OdbcCommand("select max(req_itemid) from t_inventoryrequest_items", conn);
                cmd4.Transaction = odbTrans;


                if (Convert.IsDBNull(cmd4.ExecuteScalar()) == true)
                {
                    id1 = 1;
                }
                else
                {
                    id1 = Convert.ToInt32(cmd4.ExecuteScalar());
                    id1 = id1 + 1;
                }
                OdbcCommand cm41 = new OdbcCommand("CALL savedata(?,?)", conn);
                cm41.CommandType = CommandType.StoredProcedure;
                cm41.Parameters.AddWithValue("tblname", "t_inventoryrequest_items");
                cm41.Parameters.AddWithValue("val", "" + id1 + ",'" + strReqNo + "'," + keyid + "," + 1 + " ," + 0 + "," + 0 + "," + 0 + ",'" + "0" + "'," + userid + ",'" + datetoday.ToString() + "'," + userid + ",'" + datetoday.ToString() + "'");
                cm41.Transaction = odbTrans;
                cm41.ExecuteNonQuery();
                # region Decrementing Key Quantity

                OdbcCommand cmd2051 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd2051.CommandType = CommandType.StoredProcedure;
                cmd2051.Parameters.AddWithValue("tblname", "m_sub_item");
                cmd2051.Parameters.AddWithValue("attribute", "item_id");
                cmd2051.Parameters.AddWithValue("conditionv", "  itemname='Key' ");
                cmd2051.Transaction = odbTrans;
                OdbcDataAdapter dacnt2051 = new OdbcDataAdapter(cmd2051);
                DataTable dtt2051 = new DataTable();
                dacnt2051.Fill(dtt2051);
                if (dtt2051.Rows.Count > 0)
                {
                    keyid = Convert.ToInt32(dtt2051.Rows[0]["item_id"]);

                }

                int roomid = Convert.ToInt32(Session["roomid"]);
                OdbcCommand cmd20511 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd20511.CommandType = CommandType.StoredProcedure;
                cmd20511.Parameters.AddWithValue("tblname", "t_roomresource tr,t_roomresource_items tri");
                cmd20511.Parameters.AddWithValue("attribute", "quantity,tri.resource_id");
                cmd20511.Parameters.AddWithValue("conditionv", " room_id=" + roomid + " and   item_id=" + keyid + " and  tri.resource_id=tr.resource_id");
                cmd20511.Transaction = odbTrans;
                OdbcDataAdapter dacnt20511 = new OdbcDataAdapter(cmd20511);
                DataTable dtt20511 = new DataTable();
                dacnt20511.Fill(dtt20511);
                if (dtt20511.Rows.Count > 0)
                {

                    int quantity = Convert.ToInt32(dtt20511.Rows[0]["quantity"]);
                    quantity--;
                    int resourceid = Convert.ToInt32(dtt20511.Rows[0]["resource_id"]);
                    OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
                    cmd826.CommandType = CommandType.StoredProcedure;
                    cmd826.Parameters.AddWithValue("tablename", "t_roomresource_items ");
                    cmd826.Parameters.AddWithValue("valu", "quantity=" + quantity + "");
                    cmd826.Parameters.AddWithValue("convariable", "item_id=" + keyid + " and  resource_id =" + resourceid + "");
                    cmd826.Transaction = odbTrans;
                    cmd826.ExecuteNonQuery();

                }

                # endregion


            }
            # endregion

           # region Calculating Ledger Ids
            int ledgerrent = 0, ledgerunclaimdeposit = 0, ledgerkeynot = 0, ledgerroomcondition = 0;
            OdbcCommand cmdledger = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Rent Remmittance'", conn);
            cmdledger.Transaction = odbTrans;
            OdbcDataReader orledger = cmdledger.ExecuteReader();
            if (orledger.Read())
            {
                ledgerrent = Convert.ToInt32(orledger["ledger_id"]);

            }
            if (flag == 1)
            {
                OdbcCommand cmdledgerv = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Overstay Rent'", conn);
                cmdledgerv.Transaction = odbTrans;
                OdbcDataReader orledgerv = cmdledgerv.ExecuteReader();
                if (orledgerv.Read())
                {
                    ledgerrent = Convert.ToInt32(orledgerv["ledger_id"]);

                }


            }
            OdbcCommand cmdledger1 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Unclaimed Security Deposit'", conn);
            cmdledger1.Transaction = odbTrans;
            OdbcDataReader orledger1 = cmdledger1.ExecuteReader();
            if (orledger1.Read())
            {
                ledgerunclaimdeposit = Convert.ToInt32(orledger1["ledger_id"]);

            }
            OdbcCommand cmdledger2 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Penality for Key Not Returned'", conn);
            cmdledger2.Transaction = odbTrans;
            OdbcDataReader orledger2 = cmdledger2.ExecuteReader();
            if (orledger2.Read())
            {
                ledgerkeynot = Convert.ToInt32(orledger2["ledger_id"]);
                Session["keynot"] = ledgerkeynot;
            }

            OdbcCommand cmdledger3 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Penality for Room Damages'", conn);
            cmdledger3.Transaction = odbTrans;
            OdbcDataReader orledger3 = cmdledger3.ExecuteReader();
            if (orledger3.Read())
            {
                ledgerroomcondition = Convert.ToInt32(orledger3["ledger_id"]);
                Session["roomdamage"] = ledgerroomcondition;
            }

            # endregion

            int liability1 = 0;


            liability1 = Convert.ToInt32(txtBalanceAmount.Text);
            if (HiddenField1.Value == "0")
            {
                liability1 = liability1 + deposit5;
            }

            int othercharge = Convert.ToInt32(Session["othercharge"]);
            if (othercharge != 0)
            {

                liability1 = liability1 - othercharge;
            }

            # region Check for proposed time less then actual check out
            int value3 = 0;


            if (flag == 1)
            {
                if (rdoKeyReturn.Text == "No")
                {
                    int xx = Convert.ToInt32(txtKeynotReturnCharge.Text);
                    if (xx > 0)
                    {

                        if (expdate > actualdate11)
                        {
                            int deposit6 = Convert.ToInt32(Session["deposit"]);

                            int x = Convert.ToInt32(txtKeynotReturnCharge.Text);
                            value3 = x;
                            int y = x - deposit6;
                            SavingDataToLedger(ledgerkeynot, deposit6, cashierid, 0);
                            if (y > 0)
                            {
                                txtKeynotReturnCharge.Text = y.ToString();

                            }
                            else
                            {
                                txtKeynotReturnCharge.Text = "0";


                            }
                            remark = "Key penality";
                        }
                    }
                }


            }

            # endregion

            Session["liablerent"] = liability1;

            string cust = Session["customer"].ToString();

            // adding key penality other than donor allocation
            # region Penality ledger adding values

            if ((Session["customer"].ToString() != "Donor Free Allocation") && (flag == 0) && (Session["customer"].ToString() != "Donor multiple pass") && (Session["customer"].ToString() != "Donor Paid Allocation"))
            {
                int keyexecutiveflag = 0;
                try
                {
                    keyexecutiveflag = Convert.ToInt32(Session["executekey"]);

                }
                catch { }

                if (txtKeynotReturnCharge.Text != "")
                {
                    int value = int.Parse(txtKeynotReturnCharge.Text);
                    SavingDataToLedger(ledgerkeynot, value, cashierid, 0);

                }
                if (txtRoomNotGoodCondition.Text != "")
                {
                    int value = int.Parse(txtRoomNotGoodCondition.Text);
                    SavingDataToLedger(ledgerroomcondition, value, cashierid, 0);

                }
            }
            # endregion

            int transid = 0;

            # region Adding Extra rent to ledger
            if (con3 == 1)
            {

                if ((liability1 > 0) && (flag == 1))
                {

                    OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counterno + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerrent + " and liability_type='0'", conn);
                    cmn.Transaction = odbTrans;
                    OdbcDataReader orn = cmn.ExecuteReader();
                    if (orn.Read())
                    {
                        int amount = Convert.ToInt32(orn["amount"]);
                        amount = amount + liability1;
                        OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                        cmd3.CommandType = CommandType.StoredProcedure;
                        cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                        cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                        cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counterno + " and ledger_id=" + ledgerrent + " and liability_type='0'");
                        cmd3.Transaction = odbTrans;
                        cmd3.ExecuteNonQuery();

                    }
                    else
                    {

                        OdbcCommand cmd48 = new OdbcCommand("CALL selectdata(?,?)", conn);
                        cmd48.CommandType = CommandType.StoredProcedure;
                        cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                        cmd48.Transaction = odbTrans;
                        OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmd48);
                        DataTable dtt48 = new DataTable();
                        dacnt48.Fill(dtt48);
                        if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
                        {
                            transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                            transid = transid + 1;

                        }
                        else
                        {
                            transid = 1;

                        }
                        OdbcCommand cmdliability = new OdbcCommand("CALL savedata(?,?)", conn);
                        cmdliability.CommandType = CommandType.StoredProcedure;
                        cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmdliability.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counterno + ",'0'," + ledgerrent + "," + liability1 + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                        cmdliability.Transaction = odbTrans;
                        cmdliability.ExecuteNonQuery();

                    }

                }

            }
            if ((flag == 1) && (con3 == 0) && (liability1 > 0))
            {


                OdbcCommand cmn1 = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counterno + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerunclaimdeposit + "", conn);
                cmn1.Transaction = odbTrans;
                OdbcDataReader orn1 = cmn1.ExecuteReader();
                if (orn1.Read())
                {
                    int amount = Convert.ToInt32(orn1["amount"]);
                    amount = amount + liability1;
                    OdbcCommand cmd311 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd311.CommandType = CommandType.StoredProcedure;
                    cmd311.Parameters.AddWithValue("tablename", "t_daily_transaction");
                    cmd311.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                    cmd311.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counterno + " and ledger_id=" + ledgerunclaimdeposit + "");
                    cmd311.Transaction = odbTrans;
                    cmd311.ExecuteNonQuery();
                }
                else
                {
                    OdbcCommand cmd4811 = new OdbcCommand("CALL selectdata(?,?)", conn);
                    cmd4811.CommandType = CommandType.StoredProcedure;
                    cmd4811.Parameters.AddWithValue("tblname", "t_daily_transaction");
                    cmd4811.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                    cmd4811.Transaction = odbTrans;
                    OdbcDataAdapter dacnt4811 = new OdbcDataAdapter(cmd4811);
                    DataTable dtt4811 = new DataTable();
                    dacnt4811.Fill(dtt4811);
                    if (Convert.IsDBNull(dtt4811.Rows[0]["trans_id"]) == false)
                    {
                        transid = Convert.ToInt32(dtt4811.Rows[0]["trans_id"]);
                        transid = transid + 1;

                    }
                    else
                    {
                        transid = 1;

                    }
                    OdbcCommand cmddeposit = new OdbcCommand("CALL savedata(?,?)", conn);
                    cmddeposit.CommandType = CommandType.StoredProcedure;
                    cmddeposit.Parameters.AddWithValue("tblname", "t_daily_transaction");
                    cmddeposit.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counterno + ",'0'," + ledgerunclaimdeposit + "," + liability1 + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                    cmddeposit.Transaction = odbTrans;
                    cmddeposit.Transaction = odbTrans;
                    cmddeposit.ExecuteNonQuery();

                }

            }
            # endregion

            //# region Unclaimed deposit ledger  saving and season deposit updation
            # region Deposit updation in season deposit and in unclaimed deposit

            if (HiddenField1.Value == "1")
            {
                // deposit is not returned
                Session["deporet"] = depo;

                con1 = 0;
                remark = "Unclaimed";

                try
                {
                    int depositreturn = 0;
                    Session["depositreturn"] = depositreturn;
                    int dep = Convert.ToInt32(Session["deposit"]);

                    OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counterno + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerunclaimdeposit + " and liability_type='0'   ", conn);
                    cmn.Transaction = odbTrans;
                    OdbcDataReader orn = cmn.ExecuteReader();
                    if (orn.Read())
                    {
                        int amount = Convert.ToInt32(orn["amount"]);
                        amount = amount + dep;
                        OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                        cmd3.CommandType = CommandType.StoredProcedure;
                        cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                        cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                        cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counterno + " and ledger_id=" + ledgerunclaimdeposit + " and liability_type='0'   ");
                        cmd3.Transaction = odbTrans;
                        cmd3.ExecuteNonQuery();
                    }
                    else
                    {
                        OdbcCommand cmd481 = new OdbcCommand("CALL selectdata(?,?)", conn);
                        cmd481.CommandType = CommandType.StoredProcedure;
                        cmd481.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmd481.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                        cmd481.Transaction = odbTrans;
                        OdbcDataAdapter dacnt481 = new OdbcDataAdapter(cmd481);
                        DataTable dtt481 = new DataTable();
                        dacnt481.Fill(dtt481);
                        if (Convert.IsDBNull(dtt481.Rows[0]["trans_id"]) == false)
                        {
                            transid = Convert.ToInt32(dtt481.Rows[0]["trans_id"]);
                            transid = transid + 1;

                        }
                        else
                        {
                            transid = 1;

                        }
                        OdbcCommand cmddeposit = new OdbcCommand("CALL savedata(?,?)", conn);
                        cmddeposit.CommandType = CommandType.StoredProcedure;
                        cmddeposit.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmddeposit.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counterno + ",'0'," + ledgerunclaimdeposit + "," + dep + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                        cmddeposit.Transaction = odbTrans;
                        cmddeposit.ExecuteNonQuery();

                    }

                    updatedeposit();

                }

                catch (Exception ex)
                {
                }

                depo = 0;
            }

            else if (HiddenField1.Value == "0")
            {
                // deposit returned

                Session["deporet"] = depo;

                con1 = 1;
                try
                {
                    int without = Convert.ToInt32(Session["withoutiddep"]);

                    dep = Convert.ToInt32(Session["deposit"]);
                    int depositreturn = dep;
                    Session["depositreturn"] = depositreturn;
                    malyear = Convert.ToInt32(Session["malyear"]);
                    malyearid = Convert.ToInt32(Session["malyyearid"]);


                    DateTime cur2 = DateTime.Now;
                    int currentyear = cur2.Year;

                    int curseasonid = Convert.ToInt32(Session["seasonid"]);


                    OdbcCommand cmd391 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmd391.CommandType = CommandType.StoredProcedure;
                    cmd391.Parameters.AddWithValue("tblname", "t_seasondeposit");
                    cmd391.Parameters.AddWithValue("attribute", "totaldeposit");
                    cmd391.Parameters.AddWithValue("conditionv", "season_id =" + curseasonid + " and mal_year_id=" + malyearid + " and cashier_id=" + cashierid + "");
                    cmd391.Transaction = odbTrans;
                    OdbcDataAdapter dacnt391 = new OdbcDataAdapter(cmd391);
                    DataTable dtt391 = new DataTable();
                    dacnt391.Fill(dtt391);
                    int se = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
                    se = se - dep;


                    OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
                    cmd826.CommandType = CommandType.StoredProcedure;
                    cmd826.Parameters.AddWithValue("tablename", "t_seasondeposit");
                    cmd826.Parameters.AddWithValue("valu", "totaldeposit=" + se + " ");
                    cmd826.Parameters.AddWithValue("convariable", "season_id=" + curseasonid + " and mal_year_id=" + malyearid + " and cashier_id=" + cashierid + " ");
                    cmd826.Transaction = odbTrans;
                    cmd826.ExecuteNonQuery();
                }
                catch (Exception ex)
                { }
            }

            # endregion

            depp = Convert.ToInt32(Session["depositreturn"]);
            int overrentcharge = Convert.ToInt32(Session["overcharge"]);
            if (overrentcharge > 0)
            {
                remark = "";

            }
            int vacateid = 0;
            OdbcCommand cmdvacate = new OdbcCommand("CALL selectdata(?,?)", conn);
            cmdvacate.CommandType = CommandType.StoredProcedure;
            cmdvacate.Parameters.AddWithValue("tblname", "t_roomvacate");
            cmdvacate.Parameters.AddWithValue("attribute", "max(vacate_id)as vacate_id ");
            cmdvacate.Transaction = odbTrans;
            OdbcDataAdapter dacntvacate = new OdbcDataAdapter(cmdvacate);
            DataTable dttvacate = new DataTable();
            dacntvacate.Fill(dttvacate);
            if (Convert.IsDBNull(dttvacate.Rows[0]["vacate_id"]) == false)
            {

                vacateid = Convert.ToInt32(dttvacate.Rows[0]["vacate_id"]);
                vacateid = vacateid + 1;

            }
            else
            {
                vacateid = 1;

            }

            int keyret = 1, rommcond = 1, roomcomplaint = 0;
            if (rdoKeyReturn.Text == "No")
            {
                keyret = 0;

            }
            if (rdoComplaints.Text == "Yes")
            {
                roomcomplaint = 1;

            }
            if (rdoRoomCondition.Text == "No")
            {
                rommcond = 0;
            }

            int overridedeposit = 0;
            try
            {
                if (Convert.ToInt32(Session["executedeposit"]) == 1)
                {

                    overridedeposit = 1;

                }
            }
            catch { }

            int overridedkey = 0;
            try
            {
                if (Convert.ToInt32(Session["executekey"]) == 1)
                {

                    overridedkey = 1;

                }
            }
            catch { }


            int editreciept = 0;
            try
            {
                if (Convert.ToInt32(Session["editreciept"]) == 1)
                {

                    editreciept = 1;

                }
            }
            catch { }
            int edit = 0;
            if (Convert.ToInt32(Session["edit"]) == 1)
            {

                edit = 1;
            }


            string vacateno = CalculateVacateid();

            if ((HiddenField1.Value == "1") && (txtClientid.Text.ToString() == ""))
            {
                remark = "Receipt not returned";
            }

            // save to room vacate
            # region saving data to room vacate table
            string actualdate2 = actualdate1.ToString("yyyy-MM-dd HH:mm:ss");

            int othercharge1 = Convert.ToInt32(Session["othercharge"].ToString());
            int mn = Convert.ToInt32(Session["overcharge"]);
            OdbcCommand cm3 = new OdbcCommand("CALL savedata(?,?)", conn);
            cm3.CommandType = CommandType.StoredProcedure;
            cm3.Parameters.AddWithValue("tblname", "t_roomvacate");
            if ((cmbCheckOutMehtod.SelectedItem.ToString() == "Normal") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room"))
            {
                overrentcharge = 0;

            }
            int key1 = 0, damage1 = 0;
            if (txtKeynotReturnCharge.Text != "")
            {
                key1 = Convert.ToInt32(txtKeynotReturnCharge.Text);

            }
            if (txtRoomNotGoodCondition.Text != "")
            {
                damage1 = Convert.ToInt32(txtRoomNotGoodCondition.Text);

            }
            if (edit == 0)
            {
                string sqlquery = "" + vacateid + ",'" + dayendd + "'," + allocid + ",null,null," + overrentcharge + ",'" + "" + "'," + othercharge1 + ", "
                + " '" + actualdate2 + "'," + 0 + "," + 0 + "," + keyret + ", " + key1 + ",   " + con1 + ", " + damage1 + "," + rommcond + "," + roomcomplaint + ", "
                + " " + absconding + ",'0',  " + depp + "," + Convert.ToInt32(txtBalanceAmount.Text) + "," + Convert.ToInt32(txtGrossAmount.Text) + "," + counterno + ", "
                + " " + userid + ",'" + datetoday + "' ,'" + remark + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";

                cm3.Parameters.AddWithValue("val", sqlquery);

            }
            else
            {
                string sqlquery = "" + vacateid + ",'" + dayendd + "'," + allocid + "," + userid + ",null," + overrentcharge + ",'" + "" + "'," + othercharge1 + ", "
                + " '" + actualdate2 + "'," + 0 + "," + 0 + "," + keyret + ", " + key1 + ",   " + con1 + ", " + damage1 + "," + rommcond + "," + roomcomplaint + ","
                + " " + absconding + "  , '0', " + depp + "," + Convert.ToInt32(txtBalanceAmount.Text) + "," + Convert.ToInt32(txtGrossAmount.Text) + "," + counterno + ", "
                + " " + userid + ",'" + datetoday + "' ,'" + remark + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";
                cm3.Parameters.AddWithValue("val", sqlquery);


            }
            cm3.Transaction = odbTrans;
            cm3.ExecuteNonQuery();
            Session["edit"] = 0;
            # endregion

            # region updating room allocation table status as vacant

            OdbcCommand cmd3110 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd3110.CommandType = CommandType.StoredProcedure;
            cmd3110.Parameters.AddWithValue("tablename", "t_roomallocation");
            cmd3110.Parameters.AddWithValue("valu", "roomstatus=" + 1 + "");
            cmd3110.Parameters.AddWithValue("convariable", "adv_recieptno=" + int.Parse(txtAdRecieptNo.Text) + " and roomstatus='2'");
            cmd3110.Transaction = odbTrans;
            cmd3110.ExecuteNonQuery();

            # endregion

            DateTime date = DateTime.Now;

            if (cmbCheckOutMehtod.SelectedItem.ToString() != "Overstay")
            {
                // set room master room  as vacant 
                OdbcCommand cmd30 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                cmd30.CommandType = CommandType.StoredProcedure;
                cmd30.Parameters.AddWithValue("tablename", "m_room");
                cmd30.Parameters.AddWithValue("valu", "roomstatus=" + 1 + ",housekeepstatus=" + 0 + ",updateddate='" + datetoday + "'");
                cmd30.Parameters.AddWithValue("convariable", "build_id=" + cmbBuilding.SelectedValue + " and roomno=" + int.Parse(txtRoomNo.Text) + "");
                cmd30.Transaction = odbTrans;
                cmd30.ExecuteNonQuery();

                // house keeping insertion
                //   HouseKeepingInsertion();

            }

            odbTrans.Commit();

            SeaonDepositLoad();

            // check if there any penality for donor allocation amount will add to cashier/Donor account

            if ((flag == 0) && ((Session["customer"].ToString() == "Donor Free Allocation") || (Session["customer"].ToString() == "Donor multiple pass") || (Session["customer"].ToString() == "Donor Paid Allocation")))
            {

                if ((txtKeynotReturnCharge.Text != "") || (txtRoomNotGoodCondition.Text != ""))
                {
                    lblHead.Text = "Tsunami ARMS - Confirmation";
                    lblMsg.Text = "Where to add damage/Key not reurned Charge?";
                    ViewState["action"] = "donoryes";
                    pnlOk.Visible = false;
                    btnYes.Text = "Donor";
                    btnNo.Text = "Cashier";
                    pnlYesNo.Visible = true;
                    ModalPopupExtender1.Show();
                    this.ScriptManager1.SetFocus(btnYes);
                    return;

                }

            }

            CalulatingCounterLiability();
            Session["executedeposit"] = 0;
            lblHead.Text = "Tsunami ARMS - Confirmation";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Successfully Checked Out";
            ViewState["action"] = "warnn";
            ModalPopupExtender1.Show();
            this.ScriptManager1.SetFocus(btnOk);
            Session["executedeposit"] = 0;
            Session["executekey"] = 0;
            conn.Close();
        }
        catch
        {
            odbTrans.Rollback();
            messagedisplay("problem found during check out", "warnnnn");

        }
    }

   # region Button No click
        protected void btnNo_Click(object sender, EventArgs e)
        {
            if (ViewState["action"].ToString() == "depositreturn")
            {
                clear();
                ViewState["action"] = "Nil";
                this.ScriptManager1.SetFocus(txtClientid);

            }

            if (ViewState["action"].ToString() == "printbill")
            {
                ViewState["action"] = "Nill";

                clear();

            }

            else  if (ViewState["action"].ToString() == "donoryes")
            {

                try
                {

                    cashierid = Convert.ToInt32(Session["cashierid"]);
                    int ledgerroomcondition = 0, ledgerkeynot = 0;

                    ledgerkeynot = Convert.ToInt32(Session["keynot"]);
                    ledgerroomcondition = Convert.ToInt32(Session["roomdamage"]);

                    if (txtKeynotReturnCharge.Text != "")
                    {
                        int value = int.Parse(txtKeynotReturnCharge.Text);

                        SavingDataToLedgerWithoutTrans(ledgerkeynot, value, cashierid, 0);

                    }
                    if (txtRoomNotGoodCondition.Text != "")
                    {
                        int value = int.Parse(txtRoomNotGoodCondition.Text);
                        SavingDataToLedgerWithoutTrans(ledgerroomcondition, value, cashierid, 0);

                    }

                    ViewState["action"] = "NIL";
                
                    CalulatingCounterLiability();
                    btnYes.Text = "Yes";
                    btnNo.Text = "No";
                    Session["executedeposit"] = 0;
                    lblHead.Text = "Tsunami ARMS - Confirmation";
                    pnlOk.Visible = true;
                    pnlYesNo.Visible = false;
                    lblOk.Text = "Successfully Checked Out";
                    ViewState["action"] = "warnn";
                    ModalPopupExtender1.Show();
                    this.ScriptManager1.SetFocus(btnOk);
                }
                catch
                {
                   
                    messagedisplay("problem in check out","warnnn");
                }

        }

        if (ViewState["action"].ToString() == "printbill")
        {
            clear();

        }

          if(ViewState["action"].ToString()=="selectcashier")
        {
         
        ViewState["action"] = "NILL";
        btnYes.Text = "Yes";
        btnNo.Text = "No";
        AbscondingCheckoutCaretakerLiability();

        }
          
   }
        # endregion

   # region Button Ok click
   protected void btnOk_Click(object sender, EventArgs e)
   {
       string xl = ViewState["action"].ToString();
       if (Convert.ToString(ViewState["action"]) == "xx") 
       {
           Session["action"] ="Nil";
           this.ScriptManager1.SetFocus(txtExtendTime);
       }
       else if (Convert.ToString(ViewState["action"].ToString()) == "warn00")
       {
           Session["action"] = "Nil";
           this.ScriptManager1.SetFocus(txtAdRecieptNo);
       }

    else   if (ViewState["action"].ToString() == "realloc")
       {
           AllocationPrint();
           CheckOut();

       }
       else if (ViewState["action"].ToString() == "reallocxtend")
       {
           if (Session["normflag"].ToString() != "true")
           {
               AllocationPrint();
           }
           messagedisplay("Checked out Successfully", "mm");
           ViewState["action"] = "load";
           
        }
       else if (Convert.ToString(ViewState["action"]) == "check")
       {
           string vv = Convert.ToString(ViewState["prevform"]);
           Server.Transfer(Convert.ToString(ViewState["prevform"]), false);
           //Response.Redirect(Convert.ToString(ViewState["prevform"]), false);
           ViewState["option"] = "NIL";
           ViewState["action"] = "NIL";

       }
           
       else if (ViewState["action"].ToString() == "warnn")
       {
          
           ViewState["action"] = "NIL";
            string xy ="";
            xy = Session["normflag"].ToString();
            if (Session["normflag"].ToString() == "true")
           {
               AllocationSave();
               AllocationPrint();
           }

           if (btnBalanceIndicator.BackColor == System.Drawing.Color.Red)
           {

               int x = Convert.ToInt32(txtBalanceAmount.Text);
               if (x > 0)
               {

                   lblHead.Text = "Tsunami ARMS - Confirmation";
                   lblMsg.Text = "Do you want to Print the Bill?";
                   ViewState["action"] = "printbill";
                   pnlOk.Visible = false;
                   pnlYesNo.Visible = true;

                   ModalPopupExtender1.Show();
                   this.ScriptManager1.SetFocus(btnNo);

               }
           }
           else
           {

               clear();

           }

       }
       else if (ViewState["action"].ToString() == "warn3")
       {
           this.ScriptManager1.SetFocus(txtClientid);
           ViewState["action"] = "NIL";
       }
       else if (ViewState["action"].ToString() == "warn1")
       {
           this.ScriptManager1.SetFocus(txtClientid);

           ViewState["action"] = "NIL";
        
       }
       else if (ViewState["action"].ToString() == "warn9")
       {
           ViewState["action"] = "NILL";
           CheckOut();
           deposite2 = deposit;
           deposit = 0;
           depo = 1;

       }
       else if (ViewState["action"].ToString() == "warn22")
       {
           ViewState["action"] = "NILL";

           this.ScriptManager1.SetFocus(txtClientid);

       }
       else if (ViewState["action"].ToString() == "v1")
       {
           this.ScriptManager1.SetFocus(txtAllocRecNo);
           ViewState["action"] = "Nil";
       }
       else if (ViewState["action"].ToString() == "load")
       {
           Server.Transfer("~/vacating and billing.aspx");
           //Response.Redirect("~/vacating and billing.aspx");
       }
  
   }
   # endregion
    
   # region Check Out Function
    public void CheckOut()    
    {
        try
        {
            Int32 CompId = objcls.PK_exeSaclarInt("cmp_key_id", "t_key_lost");
            if (CompId == 0)
            {
                CompId = 1;
            }
            else
            {
                CompId = CompId + 1;
            }
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }

            odbTrans = conn.BeginTransaction();
            # region Declarations and assignments
            Session["receiptforforcevacating"] = 0;
            int depp = Convert.ToInt32(Session["depositreturn"]);
            pnlYesNo2.Visible = false;
            userid = Convert.ToInt32(Session["userid"]);
            cashierid = Convert.ToInt32(Session["cashierid"]);
            counterno = Convert.ToInt32(Session["counterid"]);
            ViewState["action"] = "NILL";
            int counter = Convert.ToInt32(Session["counterid"]);
            int deposit5 = Convert.ToInt32(Session["deposit"]);
            int inmatedepo = Convert.ToInt32(Session["inmatedeposit"]);
            int absconding = 0;
            if (flag == 1)
            {
                absconding = 1;
            }
            if (Session["unclaimed"].ToString() == "ok")
            {
                absconding = 1;
            }

            int allocid = Convert.ToInt32(Session["allocid"]);
            int servicecharge = Convert.ToInt32(Session["servicecharge"]);
            int rentt;
            rentt = Convert.ToInt32(Session["extraamount"]);
            int overcharge = Convert.ToInt32(Session["overcharge"]);
            int key = 0;
            DateTime datenow = DateTime.Now;
            string f22 = datenow.ToString("dd/MM/yyyy");
            string datetoday = objcls.yearmonthdate(f22);
            datetoday = datetoday + " " + DateTime.Now.ToString("HH:mm:ss");
            Session["datetoday"] = datetoday;
            string dayendd = Session["dayend"].ToString();
            string actualdate = txtVacatingDate.Text.ToString();
            string remark = "";
            actualdate = objcls.yearmonthdate(actualdate);
            actualdate = actualdate + " " + txtVecatingTime.Text;
            DateTime expdate = DateTime.Parse(Session["expdate"].ToString());
            DateTime actualdate1 = DateTime.Parse(actualdate);
            DateTime actualdate11 = actualdate1;
            string actualdate21 = actualdate1.ToString("yyyy-MM-dd HH:mm:ss");
            # endregion
         
            # region Update Key Inventory

            if (rdoKeyReturn.Text == "No")
            {
             
                string username = Session["username"].ToString();
                int keyid = 0;

                #region KEY LOST
                DateTime date5 = DateTime.Now;
                String Date1 = date5.ToString("yyyy-MM-dd HH:mm");
                OdbcCommand Complaint = new OdbcCommand("CALL savedata(?,?)", conn);
                Complaint.CommandType = CommandType.StoredProcedure;
                Complaint.Parameters.AddWithValue("tblname", "t_key_lost");
                Complaint.Parameters.AddWithValue("val", "" + CompId + "," + cmbBuilding.SelectedValue.ToString() + "," + int.Parse(txtRoomNo.Text) + ","
                     + "'" + Date1.ToString() + "'," + userid + "");
                Complaint.Transaction = odbTrans;
                Complaint.ExecuteNonQuery();
                #endregion

                #region Request
                userid = Convert.ToInt32(Session["userid"]);
                DateTime yee = DateTime.Now;
                string year = yee.ToString("yyyy");
                string strReqNo = "";
                OdbcCommand cd1 = new OdbcCommand("select Max(reqno)from  t_inventoryrequest", conn);
                cd1.Transaction = odbTrans;
                if (Convert.IsDBNull(cd1.ExecuteScalar()) == true)
                {
                    strReqNo = "SrNo/" + year + "/" + "0001";

                }
                else
                {

                    string o1 = cd1.ExecuteScalar().ToString();
                    string ab1 = o1.Substring(10, 4);
                    int a4 = Convert.ToInt32(ab1);
                    a4 = a4 + 1;
                    if (a4 >= 1000)
                    {
                        strReqNo = "SrNo/" + year + "/" + a4;

                    }
                    else if (a4 >= 100)
                    {
                        strReqNo = "SrNo/" + year + "/0" + a4;

                    }
                    else if (a4 >= 10)
                    {

                        strReqNo = "SrNo/" + year + "/00" + a4;

                    }
                    else if (a4 < 10)
                    {
                        strReqNo = "SrNo/" + year + "/000" + a4;

                    }
                }

                #endregion

                OdbcCommand cm44 = new OdbcCommand("CALL savedata(?,?)", conn);
                cm44.CommandType = CommandType.StoredProcedure;
                cm44.Parameters.AddWithValue("tblname", "t_inventoryrequest");
                cm44.Parameters.AddWithValue("val", "'" + strReqNo + "','" + username + "',null,'1'," + counter + "," + 2 + ",'" + datetoday + "','" + "0" + "'," + userid + ",'" + datetoday.ToString() + "'," + userid + ",'" + datetoday.ToString() + "'");
                cm44.Transaction = odbTrans;
                cm44.ExecuteNonQuery();
                int id1;
                OdbcCommand cmd4 = new OdbcCommand("select max(req_itemid) from t_inventoryrequest_items", conn);
                cmd4.Transaction = odbTrans;

                if (Convert.IsDBNull(cmd4.ExecuteScalar()) == true)
                {
                    id1 = 1;
                }
                else
                {
                    id1 = Convert.ToInt32(cmd4.ExecuteScalar());
                    id1 = id1 + 1;
                }
                OdbcCommand cm41 = new OdbcCommand("CALL savedata(?,?)", conn);
                cm41.CommandType = CommandType.StoredProcedure;
                cm41.Parameters.AddWithValue("tblname", "t_inventoryrequest_items");
                cm41.Parameters.AddWithValue("val", "" + id1 + ",'" + strReqNo + "'," + keyid + "," + 1 + " ," + 0 + "," + 0 + "," + 0 + ",'" + "0" + "'," + userid + ",'" + datetoday.ToString() + "'," + userid + ",'" + datetoday.ToString() + "'");
                cm41.Transaction = odbTrans;
                cm41.ExecuteNonQuery();
                # region Decrementing Key Quantity

                OdbcCommand cmd2051 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd2051.CommandType = CommandType.StoredProcedure;
                cmd2051.Parameters.AddWithValue("tblname", "m_sub_item");
                cmd2051.Parameters.AddWithValue("attribute", "item_id");
                cmd2051.Parameters.AddWithValue("conditionv", "  itemname='Key' ");
                cmd2051.Transaction = odbTrans;
                OdbcDataAdapter dacnt2051 = new OdbcDataAdapter(cmd2051);
                DataTable dtt2051 = new DataTable();
                dacnt2051.Fill(dtt2051);
                if (dtt2051.Rows.Count > 0)
                {
                    keyid = Convert.ToInt32(dtt2051.Rows[0]["item_id"]);

                }

                int roomid = Convert.ToInt32(Session["roomid"]);
                OdbcCommand cmd20511 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd20511.CommandType = CommandType.StoredProcedure;
                cmd20511.Parameters.AddWithValue("tblname", "t_roomresource tr,t_roomresource_items tri");
                cmd20511.Parameters.AddWithValue("attribute", "quantity,tri.resource_id");
                cmd20511.Parameters.AddWithValue("conditionv", " room_id=" + roomid + " and   item_id=" + keyid + " and  tri.resource_id=tr.resource_id");
                cmd20511.Transaction = odbTrans;
                OdbcDataAdapter dacnt20511 = new OdbcDataAdapter(cmd20511);
                DataTable dtt20511 = new DataTable();
                dacnt20511.Fill(dtt20511);
                if (dtt20511.Rows.Count > 0)
                {

                    int quantity = Convert.ToInt32(dtt20511.Rows[0]["quantity"]);
                    quantity--;
                    int resourceid = Convert.ToInt32(dtt20511.Rows[0]["resource_id"]);
                    OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
                    cmd826.CommandType = CommandType.StoredProcedure;
                    cmd826.Parameters.AddWithValue("tablename", "t_roomresource_items ");
                    cmd826.Parameters.AddWithValue("valu", "quantity=" + quantity + "");
                    cmd826.Parameters.AddWithValue("convariable", "item_id=" + keyid + " and  resource_id =" + resourceid + "");
                    cmd826.Transaction = odbTrans;
                    cmd826.ExecuteNonQuery();

                }

                # endregion

                
                //UpdateKeyInventory();
            }
            # endregion

            // calculating ledger id
            # region Calculating Ledger Ids
            int ledgerrent = 0, ledgerunclaimdeposit = 0, ledgerkeynot = 0, ledgerroomcondition = 0;
            OdbcCommand cmdledger = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Rent Remmittance'", conn);
            cmdledger.Transaction = odbTrans;
            OdbcDataReader orledger = cmdledger.ExecuteReader();
            if (orledger.Read())
            {
                ledgerrent = Convert.ToInt32(orledger["ledger_id"]);

            }
            if (flag == 1)
            {
                OdbcCommand cmdledgerv = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Overstay Rent'", conn);
                cmdledgerv.Transaction = odbTrans;
                OdbcDataReader orledgerv = cmdledgerv.ExecuteReader();
                if (orledgerv.Read())
                {
                    ledgerrent = Convert.ToInt32(orledgerv["ledger_id"]);

                }

            }
            OdbcCommand cmdledger1 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Unclaimed Security Deposit'", conn);
            cmdledger1.Transaction = odbTrans;
            OdbcDataReader orledger1 = cmdledger1.ExecuteReader();
            if (orledger1.Read())
            {
                ledgerunclaimdeposit = Convert.ToInt32(orledger1["ledger_id"]);

            }
            OdbcCommand cmdledger2 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Penality for Key Not Returned'", conn);
            cmdledger2.Transaction = odbTrans;
            OdbcDataReader orledger2 = cmdledger2.ExecuteReader();
            if (orledger2.Read())
            {
                ledgerkeynot = Convert.ToInt32(orledger2["ledger_id"]);
                Session["keynot"] = ledgerkeynot;
            }

            OdbcCommand cmdledger3 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Penality for Room Damages'", conn);
            cmdledger3.Transaction = odbTrans;
            OdbcDataReader orledger3 = cmdledger3.ExecuteReader();
            if (orledger3.Read())
            {
                ledgerroomcondition = Convert.ToInt32(orledger3["ledger_id"]);
                Session["roomdamage"] = ledgerroomcondition;
            }

            # endregion

            int liability1 = 0;
            liability1 = Convert.ToInt32(txtBalanceAmount.Text) + Convert.ToInt32(txtinmatebal.Text);
            if (HiddenField1.Value == "0")
            {
                liability1 = liability1 + deposit5 + inmatedepo;
            }
            int othercharge = Convert.ToInt32(Session["othercharge"]);
            if (othercharge != 0)
            {
                liability1 = liability1 - othercharge;
            }

            # region Check for proposed time less then actual check out
            int value3 = 0;

        
            if (flag == 1)
            {
                if (rdoKeyReturn.Text == "No")
                {
                    int xx = Convert.ToInt32(txtKeynotReturnCharge.Text);
                    if (xx > 0)
                    {

                        if (expdate > actualdate11)
                        {

                            int deposit6 = Convert.ToInt32(Session["deposit"]);

                            int x = Convert.ToInt32(txtKeynotReturnCharge.Text);
                            value3 = x;
                            int y = x - deposit6;
                            SavingDataToLedger(ledgerkeynot, deposit6, cashierid, 0);
                            if (y > 0)
                            {
                                txtKeynotReturnCharge.Text = y.ToString();

                            }
                            else
                            {
                                txtKeynotReturnCharge.Text = "0";


                            }
                            remark = "Key penality";
                        }
                    }
                }


            }

            # endregion

            Session["liablerent"] = liability1;
            string cust = Session["customer"].ToString();
            // adding key penality other than donor allocation
            # region Penality ledger adding values

            if ((Session["customer"].ToString() != "Donor Free Allocation") && (flag == 0) && (Session["customer"].ToString() != "Donor multiple pass") && (Session["customer"].ToString() != "Donor Paid Allocation"))
            {
                int keyexecutiveflag = 0;
                try
                {
                    keyexecutiveflag = Convert.ToInt32(Session["executekey"]);

                }
                catch { }

                if (txtKeynotReturnCharge.Text != "") 
                {
                    int value = int.Parse(txtKeynotReturnCharge.Text);
                    SavingDataToLedger(ledgerkeynot, value, cashierid, 0);

                }
                if (txtRoomNotGoodCondition.Text != "")
                {
                    int value = int.Parse(txtRoomNotGoodCondition.Text);
                    SavingDataToLedger(ledgerroomcondition, value, cashierid, 0);

                }
            }
            # endregion

            int transid = 0;

            # region Adding Extra rent to ledger
            if (con3 == 1)
            {

                if ((liability1 > 0) && (flag == 1))
                {

                    OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counterno + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerrent + " and liability_type='0'", conn);
                    cmn.Transaction = odbTrans;
                    OdbcDataReader orn = cmn.ExecuteReader();
                    if (orn.Read())
                    {
                        int amount = Convert.ToInt32(orn["amount"]);
                        amount = amount + liability1;
                        OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                        cmd3.CommandType = CommandType.StoredProcedure;
                        cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                        cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                        cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counterno + " and ledger_id=" + ledgerrent + " and liability_type='0'");
                        cmd3.Transaction = odbTrans;
                        cmd3.ExecuteNonQuery();

                    }
                    else
                    {

                        OdbcCommand cmd48 = new OdbcCommand("CALL selectdata(?,?)", conn);
                        cmd48.CommandType = CommandType.StoredProcedure;
                        cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                        cmd48.Transaction = odbTrans;
                        OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmd48);
                        DataTable dtt48 = new DataTable();
                        dacnt48.Fill(dtt48);
                        if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
                        {
                            transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                            transid = transid + 1;

                        }
                        else
                        {
                            transid = 1;

                        }
                        OdbcCommand cmdliability = new OdbcCommand("CALL savedata(?,?)", conn);
                        cmdliability.CommandType = CommandType.StoredProcedure;
                        cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmdliability.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counterno + ",'0'," + ledgerrent + "," + liability1 + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                        cmdliability.Transaction = odbTrans;
                        cmdliability.ExecuteNonQuery();

                    }

                }

            }
            if ((flag == 1) && (con3 == 0) && (liability1 > 0))
            {


                OdbcCommand cmn1 = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counterno + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerunclaimdeposit + "", conn);
                cmn1.Transaction = odbTrans;
                OdbcDataReader orn1 = cmn1.ExecuteReader();
                if (orn1.Read())
                {
                    int amount = Convert.ToInt32(orn1["amount"]);
                    amount = amount + liability1;
                    OdbcCommand cmd311 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd311.CommandType = CommandType.StoredProcedure;
                    cmd311.Parameters.AddWithValue("tablename", "t_daily_transaction");
                    cmd311.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                    cmd311.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counterno + " and ledger_id=" + ledgerunclaimdeposit + "");
                    cmd311.Transaction = odbTrans;
                    cmd311.ExecuteNonQuery();
                }
                else
                {
                    OdbcCommand cmd4811 = new OdbcCommand("CALL selectdata(?,?)", conn);
                    cmd4811.CommandType = CommandType.StoredProcedure;
                    cmd4811.Parameters.AddWithValue("tblname", "t_daily_transaction");
                    cmd4811.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                    cmd4811.Transaction = odbTrans;
                    OdbcDataAdapter dacnt4811 = new OdbcDataAdapter(cmd4811);
                    DataTable dtt4811 = new DataTable();
                    dacnt4811.Fill(dtt4811);
                    if (Convert.IsDBNull(dtt4811.Rows[0]["trans_id"]) == false)
                    {
                        transid = Convert.ToInt32(dtt4811.Rows[0]["trans_id"]);
                        transid = transid + 1;

                    }
                    else
                    {
                        transid = 1;

                    }
                    OdbcCommand cmddeposit = new OdbcCommand("CALL savedata(?,?)", conn);
                    cmddeposit.CommandType = CommandType.StoredProcedure;
                    cmddeposit.Parameters.AddWithValue("tblname", "t_daily_transaction");
                    cmddeposit.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counterno + ",'0'," + ledgerunclaimdeposit + "," + liability1 + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                    cmddeposit.Transaction = odbTrans;
                    cmddeposit.Transaction = odbTrans;
                    cmddeposit.ExecuteNonQuery();

                }

            }
            # endregion

            //# region Unclaimed deposit ledger  saving and season deposit updation
            # region Deposit updation in season deposit and in unclaimed deposit

            if (HiddenField1.Value == "1")
            {
                // deposit is not returned
                Session["deporet"] = depo;

                con1 = 0;
                remark = "Unclaimed";

                try
                {
                    int depositreturn = 0;
                    Session["depositreturn"] = depositreturn;
                    int dep = Convert.ToInt32(Session["deposit"]);

                    OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counterno + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerunclaimdeposit + " and liability_type='0'   ", conn);
                    cmn.Transaction = odbTrans;
                    OdbcDataReader orn = cmn.ExecuteReader();
                    if (orn.Read())
                    {
                        int amount = Convert.ToInt32(orn["amount"]);
                        amount = amount + dep;
                        OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                        cmd3.CommandType = CommandType.StoredProcedure;
                        cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                        cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                        cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counterno + " and ledger_id=" + ledgerunclaimdeposit + " and liability_type='0'   ");
                        cmd3.Transaction = odbTrans;
                        cmd3.ExecuteNonQuery();
                    }
                    else
                    {
                        OdbcCommand cmd481 = new OdbcCommand("CALL selectdata(?,?)", conn);
                        cmd481.CommandType = CommandType.StoredProcedure;
                        cmd481.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmd481.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                        cmd481.Transaction = odbTrans;
                        OdbcDataAdapter dacnt481 = new OdbcDataAdapter(cmd481);
                        DataTable dtt481 = new DataTable();
                        dacnt481.Fill(dtt481);
                        if (Convert.IsDBNull(dtt481.Rows[0]["trans_id"]) == false)
                        {
                            transid = Convert.ToInt32(dtt481.Rows[0]["trans_id"]);
                            transid = transid + 1;

                        }
                        else
                        {
                            transid = 1;

                        }
                        OdbcCommand cmddeposit = new OdbcCommand("CALL savedata(?,?)", conn);
                        cmddeposit.CommandType = CommandType.StoredProcedure;
                        cmddeposit.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmddeposit.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counterno + ",'0'," + ledgerunclaimdeposit + "," + dep + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                        cmddeposit.Transaction = odbTrans;
                        cmddeposit.ExecuteNonQuery();

                    }

                    updatedeposit();

                }

                catch (Exception ex)
                {
                }

                depo = 0;
            }

            else if (HiddenField1.Value == "0")
            {
              // deposit returned
                
                Session["deporet"] = depo;

                con1 = 1;
                try
                {
                    int without = Convert.ToInt32(Session["withoutiddep"]);

                    dep = Convert.ToInt32(Session["deposit"]);
                    dep = dep + Convert.ToInt32(Session["inmatedeposit"]);
                    int depositreturn = dep;
                    Session["depositreturn"] = depositreturn;
                    malyear = Convert.ToInt32(Session["malyear"]);
                    malyearid = Convert.ToInt32(Session["malyyearid"]);


                    DateTime cur2 = DateTime.Now;
                    int currentyear = cur2.Year;

                  int  curseasonid = Convert.ToInt32(Session["seasonid"]);


                    OdbcCommand cmd391 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmd391.CommandType = CommandType.StoredProcedure;
                    cmd391.Parameters.AddWithValue("tblname", "t_seasondeposit");
                    cmd391.Parameters.AddWithValue("attribute", "totaldeposit");
                    cmd391.Parameters.AddWithValue("conditionv", "season_id =" + curseasonid + " and mal_year_id=" + malyearid + " and cashier_id=" + cashierid + "");
                    cmd391.Transaction = odbTrans;
                    OdbcDataAdapter dacnt391 = new OdbcDataAdapter(cmd391);
                    DataTable dtt391 = new DataTable();
                    dacnt391.Fill(dtt391);
                    int se = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
                    se = se - dep;


                    OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
                    cmd826.CommandType = CommandType.StoredProcedure;
                    cmd826.Parameters.AddWithValue("tablename", "t_seasondeposit");
                    cmd826.Parameters.AddWithValue("valu", "totaldeposit=" + se + " ");
                    cmd826.Parameters.AddWithValue("convariable", "season_id=" + curseasonid + " and mal_year_id=" + malyearid + " and cashier_id=" + cashierid + " ");
                    cmd826.Transaction = odbTrans;
                    cmd826.ExecuteNonQuery();
                }
                catch (Exception ex)
                { }
            }
            # endregion

            depp = Convert.ToInt32(Session["depositreturn"]);
            int overrentcharge = Convert.ToInt32(Session["overcharge"]);
            if (overrentcharge > 0)
            {
                remark = "";
            }
            int vacateid = 0;
            OdbcCommand cmdvacate = new OdbcCommand("CALL selectdata(?,?)", conn);
            cmdvacate.CommandType = CommandType.StoredProcedure;
            cmdvacate.Parameters.AddWithValue("tblname", "t_roomvacate");
            cmdvacate.Parameters.AddWithValue("attribute", "max(vacate_id)as vacate_id ");
            cmdvacate.Transaction = odbTrans;
            OdbcDataAdapter dacntvacate = new OdbcDataAdapter(cmdvacate);
            DataTable dttvacate = new DataTable();
            dacntvacate.Fill(dttvacate);
            if (Convert.IsDBNull(dttvacate.Rows[0]["vacate_id"]) == false)
            {
                vacateid = Convert.ToInt32(dttvacate.Rows[0]["vacate_id"]);
                vacateid = vacateid + 1;
            }
            else
            {
                vacateid = 1;
            }

            int keyret = 1, rommcond = 1, roomcomplaint = 0;
            if (rdoKeyReturn.Text == "No")
            {
                keyret = 0;
            }
            if (rdoComplaints.Text == "Yes")
            {
                roomcomplaint = 1;
            }
            if (rdoRoomCondition.Text == "No")
            {
                rommcond = 0;
            }
            int overridedeposit = 0;
            try
            {
                if (Convert.ToInt32(Session["executedeposit"]) == 1)
                {
                    overridedeposit = 1;
                }
            }
            catch { }
            int overridedkey = 0;
            try
            {
                if (Convert.ToInt32(Session["executekey"]) == 1)
                {
                    overridedkey = 1;
                }
            }
            catch { }
            int editreciept = 0;
            try
            {
                if (Convert.ToInt32(Session["editreciept"]) == 1)
                {
                    editreciept = 1;
                }
            }
            catch { }
            int edit = 0;
            if (Convert.ToInt32(Session["edit"]) == 1)
            {
                edit = 1;
            }
            string vacateno = CalculateVacateid();
            if ((HiddenField1.Value == "1") && (txtClientid.Text.ToString() == ""))
            {
                remark = "Receipt not returned";
            }
            // save to room vacate
            # region saving data to room vacate table
            string actualdate2 = actualdate1.ToString("yyyy-MM-dd HH:mm:ss");

            int othercharge1 = Convert.ToInt32(Session["othercharge"].ToString());
            int mn = Convert.ToInt32(Session["overcharge"]);
            OdbcCommand cm3 = new OdbcCommand("CALL savedata(?,?)", conn);
            cm3.CommandType = CommandType.StoredProcedure;
            cm3.Parameters.AddWithValue("tblname", "t_roomvacate");
            if ((cmbCheckOutMehtod.SelectedItem.ToString() == "Normal") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room"))
            {
                overrentcharge = 0;

            }
            int key1 = 0, damage1 = 0;
            if (txtKeynotReturnCharge.Text != "")
            {
                key1 = Convert.ToInt32(txtKeynotReturnCharge.Text);

            }
            if (txtRoomNotGoodCondition.Text != "")
            {
                damage1 = Convert.ToInt32(txtRoomNotGoodCondition.Text);

            }

            int balamt = Convert.ToInt32(txtBalanceAmount.Text) + Convert.ToInt32(txtinmatebal.Text);
            int gross = Convert.ToInt32(txtGrossAmount.Text) + Convert.ToInt32(txtinmategross.Text);
          
            if (edit == 0)
            {
                string sqlquery = "" + vacateid + ",'" + dayendd + "'," + allocid + ",'" + userid + "',null," + overrentcharge + ",'" + "" + "'," + othercharge1 + ", "
                + " '" + actualdate2 + "'," + 0 + "," + 0 + "," + keyret + ", " + key1 + ",   " + con1 + ", " + damage1 + "," + rommcond + "," + roomcomplaint + ", "
                + " " + absconding + ",'0',  " + depp + "," + balamt + "," + gross + "," + counterno + ", "
                + " " + userid + ",'" + datetoday + "' ,'" + remark + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";

                cm3.Parameters.AddWithValue("val", sqlquery);

            }
            else
            {
                string sqlquery = "" + vacateid + ",'" + dayendd + "'," + allocid + "," + userid + ",null," + overrentcharge + ",'" + "" + "'," + othercharge1 + ", "
                + " '" + actualdate2 + "'," + 0 + "," + 0 + "," + keyret + ", " + key1 + ",   " + con1 + ", " + damage1 + "," + rommcond + "," + roomcomplaint + ","
                + " " + absconding + "  , '0', " + depp + "," + balamt + "," + gross + "," + counterno + ", "
                + " " + userid + ",'" + datetoday + "' ,'" + remark + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";
                cm3.Parameters.AddWithValue("val", sqlquery);


            }
            cm3.Transaction = odbTrans;
            cm3.ExecuteNonQuery();
            Session["edit"] = 0;
            # endregion 

            decimal bal = 0;
            depo = Convert.ToInt32(Session["deposit"]);
            depo = depo + Convert.ToInt32(Session["inmatedeposit"]); 
            OdbcCommand cmd991 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd991.CommandType = CommandType.StoredProcedure;
            cmd991.Parameters.AddWithValue("tblname", "t_security_deposit");
            cmd991.Parameters.AddWithValue("attribute", "balance");
            cmd991.Parameters.AddWithValue("conditionv", "deposit_id = (SELECT MAX(deposit_id) FROM t_security_deposit WHERE counter1 = '" + int.Parse(Session["counterid"].ToString()) + "')");
            cmd991.Transaction = odbTrans;
            OdbcDataAdapter dat991 = new OdbcDataAdapter(cmd991);
            DataTable dacnt991 = new DataTable();
            dat991.Fill(dacnt991);

            if (dacnt991.Rows.Count > 0)
            {

                bal = int.Parse(dacnt991.Rows[0]["balance"].ToString());

            }


            bal = bal - depo;
            string savdep = "'" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["userid"].ToString()) + "','" + Session["seasonid"].ToString() + "','" + int.Parse(Session["malyyearid"].ToString()) + "','" + datetoday + "',5,'" + vacateid + "',-'" + depo + "','" + bal + "'";

            OdbcCommand cmd57 = new OdbcCommand("CALL savedata(?,?)", conn);
            cmd57.CommandType = CommandType.StoredProcedure;
            cmd57.Parameters.AddWithValue("tblname", " t_security_deposit (counter1,counter2,USER,season,mal_year,trandate,trans_type,trans_no,amount,balance)");
            cmd57.Parameters.AddWithValue("val", savdep);
            cmd57.Transaction = odbTrans;
            cmd57.ExecuteNonQuery();



            # region updating room allocation table status as vacant 

            OdbcCommand cmd3110 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd3110.CommandType = CommandType.StoredProcedure;
            cmd3110.Parameters.AddWithValue("tablename", "t_roomallocation");
            cmd3110.Parameters.AddWithValue("valu", "roomstatus=" + 1 + "");
            cmd3110.Parameters.AddWithValue("convariable", "adv_recieptno=" + int.Parse(txtAdRecieptNo.Text) + " and roomstatus='2'");
            cmd3110.Transaction = odbTrans;
            cmd3110.ExecuteNonQuery();  
            # endregion          
            DateTime date = DateTime.Now;                     
            if (cmbCheckOutMehtod.SelectedItem.ToString() != "Overstay")
            {
                // set room master room  as vacant 
                OdbcCommand cmd30 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                cmd30.CommandType = CommandType.StoredProcedure;
                cmd30.Parameters.AddWithValue("tablename", "m_room");
                cmd30.Parameters.AddWithValue("valu", "roomstatus=" + 1 + ",housekeepstatus=" + 0 + ",updateddate='" + datetoday + "'");
                cmd30.Parameters.AddWithValue("convariable", "build_id=" + cmbBuilding.SelectedValue + " and roomno=" + int.Parse(txtRoomNo.Text) + "");
                cmd30.Transaction = odbTrans;
                cmd30.ExecuteNonQuery();                
                     // house keeping insertion
                 //   HouseKeepingInsertion();
                }
                odbTrans.Commit();

                SeaonDepositLoad();
            
            // check if there any penality for donor allocation amount will add to cashier/Donor account

            if ((flag == 0) && ((Session["customer"].ToString() == "Donor Free Allocation") || (Session["customer"].ToString() == "Donor multiple pass") || (Session["customer"].ToString() == "Donor Paid Allocation")))
            {

                if ((txtKeynotReturnCharge.Text != "") || (txtRoomNotGoodCondition.Text != ""))
                {
                    lblHead.Text = "Tsunami ARMS - Confirmation";
                    lblMsg.Text = "Where to add damage/Key not reurned Charge?";
                    ViewState["action"] = "donoryes";
                    pnlOk.Visible = false;
                    btnYes.Text = "Donor";
                    btnNo.Text = "Cashier";
                    pnlYesNo.Visible = true;
                    ModalPopupExtender1.Show();
                    this.ScriptManager1.SetFocus(btnYes);
                    return;

                }

            }

            CalulatingCounterLiability();
            Session["executedeposit"] = 0;
            lblHead.Text = "Tsunami ARMS - Confirmation";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Successfully Checked Out";
            ViewState["action"] = "warnn";
            ModalPopupExtender1.Show();
            this.ScriptManager1.SetFocus(btnOk);
            Session["executedeposit"] = 0;
            Session["executekey"] = 0;
            conn.Close();
        }
        catch
        {
            odbTrans.Rollback();
            messagedisplay("problem found during check out", "warnnnn");

        }
    }
    # endregion
     
   # region Liability text change
    protected void txtliability_TextChanged(object sender, EventArgs e)
    {
    }
    # endregion

    protected void txtdeposit_TextChanged(object sender, EventArgs e)
    {

    }

    # region BalanceReceipt Text No Change
    protected void txtstartresno_TextChanged(object sender, EventArgs e)
    {
        btnSave.Enabled = true;
        Session["editreciept"] = 1;
        Session["edit"] = 1;
        int counter = Convert.ToInt32(Session["counterid"]);
        string datenow = Session["datenow"].ToString();
        if (conn.State == ConnectionState.Closed)
        {

            conn.ConnectionString = strConnection;
            conn.Open();
        }

        OdbcCommand cm2 = new OdbcCommand("select bill_receiptno from t_roomvacate where  bill_receiptno>'0'  and counter_id=" + counter + " order by bill_receiptno desc limit 0,1", conn);
        OdbcDataReader oo = cm2.ExecuteReader();
        if (oo.Read())
        {
            int g = Convert.ToInt32(oo["bill_receiptno"]);
            int s = int.Parse(txtStartRecieptNo.Text);
            int diff = s - g;
            if (diff > 1)
            {

                lblHead.Text = "Tsunami ARMS - Confirmation";
                lblMsg.Text = diff - 1 + " " + "receipt is missing";
                ViewState["action"] = "missing";
                pnlOk.Visible = false;
                pnlYesNo.Visible = true;
                ModalPopupExtender1.Show();
                this.ScriptManager1.SetFocus(btnYes);

            }

            conn.Close();

        }

    }
    # endregion

    # region Balance Quantity Change
    protected void txtrecbala_TextChanged(object sender, EventArgs e)
    {
        int itemid = Convert.ToInt32(Session["itemid"]);
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        string counter = Session["counter"].ToString();

        OdbcCommand cccmddd = new OdbcCommand("update t_pass_receipt set quantity=" + int.Parse(txtRecieptBalance.Text) + " where quantity!=" + 0 + " and counter_id=" + counter + " and item_id=" + itemid + "", conn);
        cccmddd.ExecuteNonQuery();
        conn.Close();
    }
    # endregion

    # region TXTADVREC NO CHANGE

    protected void txtrecieptno_TextChanged(object sender, EventArgs e)
    {
     # region LOADING DETAILS BY ENTERING RECEIPT NO

       
        try
        {
           

           if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }


           OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
           DateTime date = Convert.ToDateTime(cmd.ExecuteScalar());

           ViewState["date"] = date;
           Session["changegross"] = 0;
           Session["overstay"] = 0;
           Session["flag"] = "false";
           Session["normflag"] = "false";

              OdbcCommand cmdadv = new OdbcCommand();
              cmdadv.CommandType = CommandType.StoredProcedure;
              cmdadv.Parameters.AddWithValue("tblname", "m_sub_building msb ,m_room mr,t_roomallocation tr  left join m_sub_district msd   on  tr.district_id=msd.district_id");
              cmdadv.Parameters.AddWithValue("attribute", "barcode,mr.build_id,roomno,swaminame,advance,districtname,place,tr.deposit,allocdate ,alloc_type,exp_vecatedate,alloc_no,tr.roomrent");
              cmdadv.Parameters.AddWithValue("conditionv", " tr.adv_recieptno=" + Convert.ToInt32(txtAdRecieptNo.Text) + " and tr.roomstatus='2' and  mr.room_id=tr.room_id and mr.build_id=msb.build_id  ");
              DataTable dtadv = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdadv);
              if (dtadv.Rows.Count>0)
              {
                string vv = base64Decode(dtadv.Rows[0]["barcode"].ToString());
                cmbBuilding.SelectedValue = dtadv.Rows[0]["build_id"].ToString();
                txtRoomNo.Text = (dtadv.Rows[0]["roomno"]).ToString();
                txtCustomerName.Text = dtadv.Rows[0]["swaminame"].ToString();
                txtAdvanceAmount.Text = dtadv.Rows[0]["advance"].ToString();
                txtDistrict.Text = dtadv.Rows[0]["districtname"].ToString();
                txtCustomerPlace.Text = dtadv.Rows[0]["place"].ToString();
                dep = Convert.ToInt32(dtadv.Rows[0]["deposit"]);
                DateTime datedt = DateTime.Parse(dtadv.Rows[0]["allocdate"].ToString());
                string dates1 = datedt.ToString("dd-MM-yyyy");
                string times1 = datedt.ToString("hh:mm tt");
                txtAllocatedDate.Text =dates1.ToString();
                txtAllocatedTime.Text = times1.ToString();
                DateTime dateprop = DateTime.Parse(dtadv.Rows[0]["exp_vecatedate"].ToString());
                propdat = dateprop;
                Session["allocdate"] = dtadv.Rows[0]["allocdate"].ToString();
                ViewState["propdat"] = propdat;
                string propdate = dateprop.ToString("dd/MM/yyyy hh:mm tt");
                txtPropCheckOut.Text = propdate.ToString();
                txtAllocNo.Text = dtadv.Rows[0]["alloc_no"].ToString();
                Session["deposit"] = dep;
                Session["propdate"] = dtadv.Rows[0]["exp_vecatedate"];
                Session["customer"] = dtadv.Rows[0]["alloc_type"].ToString();
                alloctime = DateTime.Parse(dtadv.Rows[0]["allocdate"].ToString());
                ViewState["alloctime"] = alloctime;
                ViewState["paytype"] = paytype;
                Session["advance"] = dtadv.Rows[0]["advance"];
                Session["orent"] = dtadv.Rows[0]["roomrent"].ToString();

                DateTime datestring1 = Convert.ToDateTime(ViewState["date"].ToString());
                txtVacatingDate.Text = datestring1.ToString("dd/MM/yyyy");

                txtVecatingTime.Text = datestring1.ToString("hh:mm tt");


                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                {
                    DateTime datedt1 = DateTime.Now;
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtVacatingDate.Text = dates11;
                    txtVecatingTime.Text = times11;
                    txtExtendTime.Text = times11.ToString();

                    GracePeriodCalculation();

                    if (Convert.ToString(Session["measureunit"]) == "5")
                    {

                        DateTime dtx = DateTime.Parse(Session["miniunit"].ToString());
                        string times = dtx.ToString("hh:mm tt");
                        txtVecatingTime.Text = times.ToString();
                        txtExtendTime.Text = times.ToString();

                    }


                    DateTime dateCheckin = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text.ToString()) + " " + txtAllocatedTime.Text);
                    string[] checkoutSplitx = txtPropCheckOut.Text.Split(' ');
                    DateTime datecheckout = DateTime.Parse(objcls.yearmonthdate(checkoutSplitx[0].ToString()) + " " + checkoutSplitx[1].ToString() + " " + checkoutSplitx[2].ToString());
                    int ddx1, tc1, n1, td1;
                    TimeSpan datediffx = datecheckout - dateCheckin;
                    td1 = datediffx.Hours;
                    ddx1 = datediffx.Days;
                    tc1 = ddx1;
                    ddx1 = 24 * ddx1;
                    n1 = ddx1 + td1;
                    Int32 rent1, deposit1;

                    OdbcCommand cmdR = new OdbcCommand();
                    cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                    cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                    cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                    DataTable dtR = new DataTable();
                    dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);


                    if (n1 <= 12)
                    {


                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["rent"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);


                            if (DateTime.Now < dateExtend)
                            {

                                txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: " + Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]) - Convert.ToInt32(txtRentAlloc.Text)) + " Rs.";
                            }
                            else
                            {
                                txtExtendDate.Text = DateTime.Now.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = DateTime.Now.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToInt32(dtR.Rows[0]["rent"]).ToString();
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: 0 Rs.";

                            }
                        }

                    }
                    else
                    {

                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(12);
                            DateTime dateExtend16 = datecheckout.AddHours(16);

                            if (DateTime.Now < dateExtend)
                            {

                                txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: " + Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(txtRentAlloc.Text)) + " Rs.";
                            }
                            
                            else
                            {
                                txtExtendDate.Text = DateTime.Now.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = DateTime.Now.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: 0 Rs.";

                            }
                        }


                    }

                ////////////////////////////*********************************************************************
                    extend();

                ////////////////////////////*********************************************************************
   

                }
                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                {
                    DateTime datedt1 = DateTime.Parse(dtadv.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtVacatingDate.Text = dates11.ToString();
                    txtVecatingTime.Text = times11.ToString();
                    txtExtendTime.Text = times11.ToString();

                    GracePeriodCalculation();

                    if (Convert.ToString(Session["measureunit"]) == "5")
                    {

                        DateTime dtx = DateTime.Parse(Session["miniunit"].ToString());
                        string times = dtx.ToString("hh:mm tt");
                        txtVecatingTime.Text = times.ToString();
                        txtExtendTime.Text = times.ToString();

                    }


                    DateTime dateCheckin = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text.ToString()) + " " + txtAllocatedTime.Text);
                    string[] checkoutSplitx = txtPropCheckOut.Text.Split(' ');
                    DateTime datecheckout = DateTime.Parse(objcls.yearmonthdate(checkoutSplitx[0].ToString()) + " " + checkoutSplitx[1].ToString() + " " + checkoutSplitx[2].ToString());
                    int ddx1, tc1, n1, td1;
                    TimeSpan datediffx = datecheckout - dateCheckin;
                    td1 = datediffx.Hours;
                    ddx1 = datediffx.Days;
                    tc1 = ddx1;
                    ddx1 = 24 * ddx1;
                    n1 = ddx1 + td1;
                    Int32 rent1, deposit1;
                    if (n1 <= 12)
                    {
                        OdbcCommand cmdR = new OdbcCommand();
                        cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                        cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                        cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                        DataTable dtR = new DataTable();
                        dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);


                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["security"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);

                            txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                            txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                            txtDepositAlloc.Text = "0";

                            txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]));
                            txtNoofDays.Text = "1";
                            txtAdvAmount.Text = "0";
                        }


                    }
                    else
                    {
                        OdbcCommand cmdR = new OdbcCommand();
                        cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                        cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                        cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                        DataTable dtR = new DataTable();
                        dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);


                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["security"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);

                            txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                            txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                            txtDepositAlloc.Text = "0";

                            txtRentAlloc.Text = Convert.ToInt32(dtR.Rows[0]["rent"]).ToString();
                            txtNoofDays.Text = "1";
                            txtAdvAmount.Text = "0";
                        }


                    }




                    ////////////////////////////*********************************************************************
                    extend();

                    ////////////////////////////*********************************************************************
   


                }

                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {

                    DateTime datedt1 = DateTime.Parse(dtadv.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtExtendDate.Text = dates11.ToString();
                    txtExtendTime.Text = times11.ToString();

                }
                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {
                    txtinmno.Text = Session["inm"].ToString();
                    extend();
                    SetFocus(txtinmno);
                }

                conn.Close(); 
              
                    BalanceAmountCalculations();
                    this.ScriptManager1.SetFocus(btnCheckout);
              }

            else
            {

                OdbcCommand cmdread = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdread.CommandType = CommandType.StoredProcedure;
                cmdread.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation tr");
                cmdread.Parameters.AddWithValue("attribute", "  vacate_id");
                cmdread.Parameters.AddWithValue("conditionv", " adv_recieptno=" + int.Parse(txtAdRecieptNo.Text) + " and tv.alloc_id=tr.alloc_id ");
                OdbcDataReader or1 = cmdread.ExecuteReader();
                if (or1.Read())
                {
                    txtAdRecieptNo.Text = "";
                    this.ScriptManager1.SetFocus(txtAdRecieptNo);
                    messagedisplay("Already vacated", "warn00");
                }
                else
                {
                    txtAdRecieptNo.Text = "";
                    this.ScriptManager1.SetFocus(txtAdRecieptNo);
                    messagedisplay("Receipt could not find","warn00");
                }
                 
                  conn.Close();
           }

        }
        catch (Exception ex)
        {
            messagedisplay("Problem found during loading", "warn5");
            this.ScriptManager1.SetFocus(btnOk);
        }
        # endregion

       
    }
    # endregion

    # region Barcode function
    private string GetBarcode(string strValue)
    {
        strValue = strValue.Remove(0, 3);
        strValue = strValue.Remove(strValue.Length - 3, 3);
        return strValue;
    }
    # endregion

    # region Client Id Text Change
    
    protected void txtclientid_TextChanged(object sender, EventArgs e)
    {
        # region  LOADING DETAILS BY ENTERING CLIENTID

        try
        {
           

            string clientid = base64Encode(txtClientid.Text);

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }

            OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
            DateTime date = Convert.ToDateTime(cmd.ExecuteScalar());

            ViewState["date"] = date;
            Session["changegross"] = 0;
            Session["overstay"] = 0;
            Session["flag"] = "false";
            Session["normflag"] = "false";
            OdbcCommand cmdclient = new OdbcCommand();
            cmdclient.CommandType = CommandType.StoredProcedure;
            cmdclient.Parameters.AddWithValue("tblname", "m_sub_building msb ,m_room mr,t_roomallocation tr  left join m_sub_district msd   on  tr.district_id=msd.district_id");
            cmdclient.Parameters.AddWithValue("attribute", "adv_recieptno,mr.build_id,roomno,swaminame,advance,districtname,place,tr.deposit,allocdate ,alloc_type,exp_vecatedate,alloc_no,tr.roomrent,tr.payment_mode");
            cmdclient.Parameters.AddWithValue("conditionv", "tr.roomstatus='2' and  mr.room_id=tr.room_id and mr.build_id=msb.build_id and barcode='" + clientid + "' ");
            DataTable dtclient = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdclient);
            if (dtclient.Rows.Count > 0)
            {
                cmbBuilding.SelectedValue = dtclient.Rows[0]["build_id"].ToString();
                txtRoomNo.Text = (dtclient.Rows[0]["roomno"]).ToString();
                txtCustomerName.Text = dtclient.Rows[0]["swaminame"].ToString();
                txtAdvanceAmount.Text = dtclient.Rows[0]["advance"].ToString();
                txtDistrict.Text = dtclient.Rows[0]["districtname"].ToString();
                txtCustomerPlace.Text = dtclient.Rows[0]["place"].ToString();
                dep = Convert.ToInt32(dtclient.Rows[0]["deposit"]);
                DateTime datedt = DateTime.Parse(dtclient.Rows[0]["allocdate"].ToString());
                alloctime = DateTime.Parse(dtclient.Rows[0]["allocdate"].ToString());
                Session["allocdate"] = dtclient.Rows[0]["allocdate"].ToString();
                ViewState["alloctime"] = alloctime;
                string dates1 = datedt.ToString("dd-MM-yyyy");
                string times1 = datedt.ToString("hh:mm tt");
                txtAllocatedDate.Text = dates1.ToString();
                txtAllocatedTime.Text = times1.ToString();
                txtAdRecieptNo.Text = dtclient.Rows[0]["adv_recieptno"].ToString();
                DateTime dateprop = DateTime.Parse(dtclient.Rows[0]["exp_vecatedate"].ToString());
                propdat = dateprop;
                ViewState["propdat"] = propdat;
                Session["allocdate"] = dtclient.Rows[0]["allocdate"].ToString();
                string propdate = dateprop.ToString("dd/MM/yyyy hh:mm tt");
                txtPropCheckOut.Text = propdate.ToString();
                txtAllocNo.Text = dtclient.Rows[0]["alloc_no"].ToString();
               
                Session["deposit"] = dep;
                Session["propdate"] = dtclient.Rows[0]["exp_vecatedate"];
                Session["customer"] = dtclient.Rows[0]["alloc_type"].ToString();
                ViewState["paytype"] = paytype;
                Session["advance"] = dtclient.Rows[0]["advance"];
                Session["orent"] = dtclient.Rows[0]["roomrent"].ToString();
                //payMode = dtclient.Rows[0]["payment_mode"].ToString();
                ViewState["payment_mode123"] = dtclient.Rows[0]["payment_mode"].ToString();
                DateTime datestring1 = Convert.ToDateTime(ViewState["date"].ToString());
                txtVacatingDate.Text = datestring1.ToString("dd/MM/yyyy");

                txtVecatingTime.Text = datestring1.ToString("hh:mm tt");

                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                {
                    DateTime datedt1 = DateTime.Parse(dtclient.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd/MM/yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtVacatingDate.Text = dates11.ToString();
                   
                    txtVecatingTime.Text = times11.ToString();
                    txtExtendTime.Text = times11.ToString();

                    GracePeriodCalculation();
                    if (Convert.ToString(Session["measureunit"]) == "5")
                    {

                        DateTime dtx = DateTime.Parse(Session["miniunit"].ToString());
                        string times = dtx.ToString("hh:mm tt");
                        txtVecatingTime.Text = times.ToString();
                        txtExtendTime.Text = times.ToString();
                    }

                    DateTime dateCheckin = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text.ToString()) + " " + txtAllocatedTime.Text);
                    string[] checkoutSplitx = txtPropCheckOut.Text.Split(' ');
                    DateTime datecheckout = DateTime.Parse(objcls.yearmonthdate(checkoutSplitx[0].ToString()) + " " + checkoutSplitx[1].ToString() + " " + checkoutSplitx[2].ToString());
                    int ddx1, tc1, n1, td1;
                    TimeSpan datediffx = datecheckout - dateCheckin;
                    td1 = datediffx.Hours;
                    ddx1 = datediffx.Days;
                    tc1 = ddx1;
                    ddx1 = 24 * ddx1;
                    n1 = ddx1 + td1;
                    Int32 rent1, deposit1;
                    
                    OdbcCommand cmdR = new OdbcCommand();
                    cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                    cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                    cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                    DataTable dtR = new DataTable();
                    
                    dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);

                    if (n1 <= 12)
                    {

                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["rent"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);

                            if (DateTime.Now < dateExtend)
                            {

                                txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: " + Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]) - Convert.ToInt32(txtRentAlloc.Text)) + " Rs.";
                            }
                            else
                            {
                                txtExtendDate.Text = DateTime.Now.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = DateTime.Now.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToInt32(dtR.Rows[0]["rent"]).ToString();
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: 0 Rs.";

                            }
                        }

                    }
                    else
                    {


                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(12);

                            if (DateTime.Now < dateExtend)
                            {

                                txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: " + Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(txtRentAlloc.Text)) + " Rs.";
                            }
                            else
                            {
                                txtExtendDate.Text = DateTime.Now.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = DateTime.Now.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: 0 Rs.";

                            }
                        }


                    }

                    //////////////////////////////////********************************************
                    extend();
                    /////////////////////////////////////////////////////*********************

                   
                }

                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                {
                    DateTime datedt1 = DateTime.Parse(dtclient.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd/MM/yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtVacatingDate.Text = dates11.ToString();
                    txtVecatingTime.Text = times11.ToString();
                    txtExtendTime.Text = times11.ToString();

                    GracePeriodCalculation();

                    if (Convert.ToString(Session["measureunit"]) == "5")
                    {

                        DateTime dtx = DateTime.Parse(Session["miniunit"].ToString());
                        string times = dtx.ToString("hh:mm tt");
                        txtVecatingTime.Text = times.ToString();
                        txtExtendTime.Text = times.ToString();

                    }

                    DateTime dateCheckin = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text.ToString()) + " " + txtAllocatedTime.Text);
                    string[] checkoutSplitx = txtPropCheckOut.Text.Split(' ');
                    DateTime datecheckout = DateTime.Parse(objcls.yearmonthdate(checkoutSplitx[0].ToString()) + " " + checkoutSplitx[1].ToString() + " " + checkoutSplitx[2].ToString());
                    int ddx1, tc1, n1, td1;
                    TimeSpan datediffx = datecheckout - dateCheckin;
                    td1 = datediffx.Hours;
                    ddx1 = datediffx.Days;
                    tc1 = ddx1;
                    ddx1 = 24 * ddx1;
                    n1 = ddx1 + td1;
                    Int32 rent1, deposit1;
                    if (n1 <= 12)
                    {
                        OdbcCommand cmdR = new OdbcCommand();
                        cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                        cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                        cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                        DataTable dtR = new DataTable();
                        dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);


                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["security"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);

                            txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                            txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                            txtDepositAlloc.Text = "0";

                            txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]));
                            txtNoofDays.Text = "1";
                            txtAdvAmount.Text = "0";
                        }

                    }
                    else
                    {
                        OdbcCommand cmdR = new OdbcCommand();
                        cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                        cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                        cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                        DataTable dtR = new DataTable();
                        dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);

                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["security"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);

                            txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                            txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                            txtDepositAlloc.Text = "0";

                            txtRentAlloc.Text = Convert.ToInt32(dtR.Rows[0]["rent"]).ToString();
                            txtNoofDays.Text = "1";
                            txtAdvAmount.Text = "0";
                        }


                    }


                    //////////////////////////////////********************************************
                    extend();
                        /////////////////////////////////////////////////////*********************



                }

                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {

                    DateTime datedt1 = DateTime.Parse(dtclient.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd/MM/yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtExtendDate.Text = dates11.ToString();
                    txtExtendTime.Text = times11.ToString();

                }
                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {
                    txtinmno.Text = Session["inm"].ToString();
                    extend();
                    SetFocus(txtinmno);
                }

                conn.Close();
                if (Session["calc"].ToString() != "calc")
                {
                    BalanceAmountCalculations();
                }
                this.ScriptManager1.SetFocus(btnCheckout);

            }

            else
            {

                OdbcCommand cmdvacate = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdvacate.CommandType = CommandType.StoredProcedure;
                cmdvacate.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation tr");
                cmdvacate.Parameters.AddWithValue("attribute", " vacate_id,return_deposit");
                cmdvacate.Parameters.AddWithValue("conditionv", " barcode='" + clientid + "' and tv.alloc_id=tr.alloc_id");

                OdbcDataReader or1 = cmdvacate.ExecuteReader();
                if (or1.Read())
                {

                    int returndeposit = Convert.ToInt32(or1["return_deposit"]);
                    if (returndeposit == 0)
                    {

                        lblHead.Text = "Tsunami ARMS - Confirmation";
                        lblMsg.Text = "Already Checked Out.  Do you want to return the deposit?";
                        ViewState["action"] = "depositreturn";
                        pnlOk.Visible = false;
                        pnlYesNo.Visible = true;
                        ModalPopupExtender1.Show();
                        this.ScriptManager1.SetFocus(btnYes);
                        return;

                    }
                    else
                    {
                        this.ScriptManager1.SetFocus(txtClientid);
                        messagedisplay("Already vacated", "warn3");
                        this.ScriptManager1.SetFocus(btnOk);

                    }
                }

                else
                {
                    txtClientid.Text = "";
                    this.ScriptManager1.SetFocus(txtClientid);
                    messagedisplay("Barcode could not find", "warn3");

                } conn.Close();
            }
        }
        catch (Exception ex)
        {
            messagedisplay("Problem found", "warn6");

        }
        conn.Close();

        # endregion
    }
    # endregion

    private void extend()
    {
        double oldimrate = 0, oldimno = 0, newimrate = 0, newimno = 0, inmdepoold=0;

        # region Calculate Grace Period
        int flag0 = 0, data = 0;
        seasonid = Convert.ToInt32(Session["season_subid"]);
        OdbcCommand cmdselectpolicy = new OdbcCommand();
        cmdselectpolicy.CommandType = CommandType.StoredProcedure;
        cmdselectpolicy.Parameters.AddWithValue("tblname", "t_policy_allocation ta ,t_policy_allocation_seasons tps");
        cmdselectpolicy.Parameters.AddWithValue("attribute", "season_sub_id,noofunits");
        cmdselectpolicy.Parameters.AddWithValue("conditionv", " reqtype='Common'and ta.rowstatus<>'2' and ((curdate()>=fromdate and  curdate()<=todate) or (curdate()>=fromdate and todate='0000-00-00'))and waitingcriteria='Hours' and (ta.alloc_policy_id=tps.alloc_policy_id )and tps.season_sub_id=" + seasonid + "");
        DataTable dtt391 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdselectpolicy);


        if (dtt391.Rows.Count > 0)
        {
            for (int i = 0; i < dtt391.Rows.Count; i++)
            {

                data = 1;
                int seaid = Convert.ToInt32(dtt391.Rows[i]["season_sub_id"]);
                if (seaid == seasonid)
                {
                    graceperiod = int.Parse(dtt391.Rows[i]["noofunits"].ToString());
                    flag0 = 1;
                    break;
                }

                if (flag0 == 1)
                    break;

            }

        }
        if (data == 0)
        {
            messagedisplay("No policy Set for Grace Period ", "warn22");
            return;

        }

        if (flag0 == 0)
        {
            messagedisplay("No policy Set for Grace Period ", "warn22");

            return;
        }
        # endregion
            
     DateTime datedt1 = Convert.ToDateTime(ViewState["propdat"].ToString());
     string dates11 = datedt1.ToString("dd/MM/yyyy");
     string times11 = datedt1.ToString("hh:mm tt");
     txtVacatingDate.Text = dates11.ToString();
     txtVecatingTime.Text = times11.ToString();


     string ad = txtPropCheckOut.Text;
     string vacatx = ad.Replace('/','-');
     string ab = txtAllocatedDate.Text + " " + txtAllocatedTime.Text;
     string aldatex1 = ab.Replace('/', '-');
     string ah= txtPropCheckOut.Text;
     string checkoutx  = ah.Replace('/', '-');
     string[] checkoutSplit = checkoutx.Split(' ');

     String SSq = "SELECT TIMEDIFF(STR_TO_DATE('" + aldatex1 + "','%d-%m-%Y %l:%i %p'), STR_TO_DATE('" + vacatx + "','%d-%m-%Y %l:%i %p')),REPLACE('" + checkoutSplit[0].ToString() + "','/','-') as 'Date'";
     DataTable DTSSq = objcls.DtTbl(SSq);
     TimeSpan totperiod = TimeSpan.Parse(DTSSq.Rows[0][0].ToString());

     int tottime = 0;
     tottime = Convert.ToInt32(totperiod.TotalHours);
     if ((totperiod.Minutes > 0) && (totperiod.Minutes < 30))
     {
         tottime++;
     }

     double olddeposit = 0;
     ////////////////old rent************************************
     OdbcCommand cmdRRx = new OdbcCommand();
     cmdRRx.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
     cmdRRx.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
     cmdRRx.Parameters.AddWithValue("conditionv", " ('" + tottime + "' > m_rent.start_duration)  AND ('" + tottime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category AND m_room.room_id = m_inmate.room_id AND ( '" + tottime + "' > m_inmate.start_duration)  AND ('" + tottime + "' <= m_inmate.end_duration ) ");

     DataTable dtRRx = new DataTable();
     dtRRx = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRRx);
     if (dtRRx.Rows.Count > 0)
     {
       oldrent = Convert.ToDouble(dtRRx.Rows[0]["rent"].ToString());
       olddeposit = Convert.ToDouble(dtRRx.Rows[0]["security_deposit"].ToString());
       oldimrate = Convert.ToDouble(dtRRx.Rows[0]["rate"].ToString());
       oldimno   = Convert.ToDouble(dtRRx.Rows[0]["noofinmates"].ToString());
       inmdepoold = Convert.ToDouble(dtRRx.Rows[0]["deposit"].ToString());
     }
     

     #region Extended Stay
     if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
     {

         string af  = txtPropCheckOut.Text;
         string str1 = af.Replace('/', '-');
         string ssvb = @"SELECT CASE WHEN  DATE_ADD(STR_TO_DATE('" + str1 + "','%d-%m-%Y %l:%i %p'),INTERVAL '" + graceperiod + "' HOUR ) <=  NOW() THEN 'OK' ELSE 'Not' END AS 'CHK'";
         DataTable DTSS1x = objcls.DtTbl(ssvb);

         if (DTSS1x.Rows[0][0].ToString() == "OK")
         {
             ViewState["auction"] = "checkoutdate";
             messagedisplay("Vacate time exceeds checkout time with grace period. Extended stay not possible not possible", "ll");

             lblrent.Visible = false;
             txtRentAlloc.Text = "0";
             txtDepositAlloc.Text = Convert.ToString(olddeposit);
             txtDepositAlloc.Text = "0";
             txtAdvAmount.Text = "0";
             txtNoofDays.Text = "0";

             this.ScriptManager1.SetFocus(btnOk);
             return;
         }

         Session["old"] = olddeposit;
         //////////////////////////////////***************new Extended Stay***************//////////////////////////////
         
         DataTable dt_club = new DataTable();

         OdbcCommand cmdBP1 = new OdbcCommand();
         cmdBP1.Parameters.AddWithValue("tblname", "t_policy_allocation");
         cmdBP1.Parameters.AddWithValue("attribute", "defaulttime,max_allocdays");

         if (Session["customer"].ToString() == "Clubbing")
         {

             string club = @"SELECT alloc_type,TIMEDIFF(checkoutdate,checkindate) AS 'Hours',rent,deposit FROM t_clubdetails WHERE alloc_id =(SELECT alloc_id FROM t_roomallocation WHERE adv_recieptno = '" + txtAdRecieptNo.Text + "')  ORDER BY club_id DESC LIMIT 1";
             dt_club = objcls.DtTbl(club);


             cmdBP1.Parameters.AddWithValue("conditionv", " (CURDATE() BETWEEN fromdate AND todate ) AND reqtype = '" + dt_club.Rows[0][0].ToString() + "'  ORDER BY alloc_policy_id DESC LIMIT 1");

         }
         else
         {
             cmdBP1.Parameters.AddWithValue("conditionv", " (CURDATE() BETWEEN fromdate AND todate ) AND reqtype = '" + Session["customer"].ToString() + "'  ORDER BY alloc_policy_id DESC LIMIT 1");
         }

         DataTable dtBP1 = new DataTable();
         dtBP1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdBP1);
         if (dtBP1.Rows.Count > 0)
         {
             maxhour = Convert.ToInt32(dtBP1.Rows[0]["max_allocdays"].ToString());
             defhour = Convert.ToInt32(dtBP1.Rows[0]["defaulttime"].ToString());
         }

      
         double minhr = 0;

         OdbcCommand cmdRRxc = new OdbcCommand();
         cmdRRxc.Parameters.AddWithValue("tblname", " m_rent ,m_room");
         cmdRRxc.Parameters.AddWithValue("attribute", " MIN(m_rent.end_duration) as 'minhr', m_rent.rent, m_rent.security_deposit");
         cmdRRxc.Parameters.AddWithValue("conditionv", " m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category GROUP BY m_rent.room_category");

         DataTable dtRRxc = new DataTable();
         dtRRxc = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRRxc);
         if (dtRRxc.Rows.Count > 0)
         {
             minhr = Convert.ToDouble(dtRRxc.Rows[0]["minhr"].ToString());

         }

         if (tottime <= 12)
         {
             minhr = 4;
         }

         DateTime aldate = DateTime.Parse(ViewState["alloctime"].ToString());
         string atdate1 = aldate.ToString("yyyy-MM-dd hh:mm:ss tt");
         DateTime actualvact = datedt1.AddHours(minhr);
         String actualvacate = actualvact.ToString("yyyy-MM-dd hh:mm:ss tt");
         String SS = @"SELECT TIMEDIFF(STR_TO_DATE('" + actualvacate + "','%Y-%m-%d %l:%i:%s %p'),STR_TO_DATE('" + atdate1 + "','%Y-%m-%d %l:%i:%s %p')) ";
         DataTable DTSS = objcls.DtTbl(SS);
         TimeSpan timespan = TimeSpan.Parse(DTSS.Rows[0][0].ToString());
         int overtime = 0;
         overtime = Convert.ToInt32(timespan.TotalHours);
         if ((timespan.Minutes > 0) && (timespan.Minutes < 30))
         {
             overtime++;
         }

         string datedt12 = datedt1.ToString("yyyy-MM-dd hh:mm:ss tt");
          
         String SS1 = "SELECT TIMEDIFF(STR_TO_DATE('" + actualvacate + "','%Y-%m-%d %l:%i:%s %p'),STR_TO_DATE('" + datedt12 + "','%Y-%m-%d %l:%i:%s %p'))";
         DataTable DTSS1 = objcls.DtTbl(SS1);
         TimeSpan staytime = TimeSpan.Parse(DTSS1.Rows[0][0].ToString());

         int stayhours = 0;
         stayhours = Convert.ToInt32(staytime.TotalHours);
         if ((staytime.Minutes > 0) && (staytime.Minutes < 30))
         {
             stayhours++;
         }

         txtNoofDays.Text = overtime.ToString();

         int aloctime = 0;

         if (Session["customer"].ToString() == "Clubbing")
         {

             TimeSpan timespanclub = TimeSpan.Parse(dt_club.Rows[0]["Hours"].ToString());
         
             aloctime = Convert.ToInt32(timespanclub.TotalHours);
             if ((timespanclub.Minutes > 0) && (timespanclub.Minutes < 30))
             {
                 aloctime++;
             }

             overtime = Convert.ToInt32(minhr) + aloctime;
         }

         overtime = overtime - graceperiod;

         double depochk = 0;
        
         ///////////////////////////////////////////////////
        
         ////////////////////////////////////////////////////////////////////

         if (Session["customer"].ToString() == "Clubbing")
         {
             int dp = 0, df = 0;
             string club = @"SELECT alloc_type,TIMEDIFF(checkoutdate,checkindate) AS 'Hours',rent,deposit FROM t_clubdetails WHERE alloc_id =(SELECT alloc_id FROM t_roomallocation WHERE adv_recieptno = '" + txtAdRecieptNo.Text + "') ";
             dt_club = objcls.DtTbl(club);
             if (dt_club.Rows.Count > 0)
             {
                 for (int n = 0; n < dt_club.Rows.Count; n++)
                 {
                     if (dt_club.Rows[n][0].ToString() == "Donor Paid Allocation")
                     {
                         dp++;

                     }
                     if (dt_club.Rows[n][0].ToString() == "Donor Free Allocation")
                     {
                         df++;
                     }

                 }

                 int extsum = 0;

                 extsum = dp * 12 + df * 24;

                 if (extsum > 0)
                 {
                     maxhour = extsum;
                 }
             }

         }

         if (overtime <= maxhour)
         {
             if (Session["customer"].ToString() == "Donor Free Allocation")
             {
                 stayhours = stayhours - graceperiod;
                 overtime = stayhours;
             }

             txtExtendDate.Text = actualvact.ToString("dd-MM-yyyy");
             txtExtendTime.Text = actualvact.ToString("hh:mm tt");

             double newinmdepo = 0;
             double oldimtot = 0, newimtot = 0, inmatecount = 0, xtrainm = 0, oldinmdepotot = 0, inmdepnewtot = 0, totalt = 0;

             OdbcCommand cmdRR = new OdbcCommand();
             cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
             cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
             cmdRR.Parameters.AddWithValue("conditionv", " ('" + overtime + "' > m_rent.start_duration)  AND ('" + overtime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category  AND m_room.room_id = m_inmate.room_id AND ( '" + overtime + "' > m_inmate.start_duration)  AND ('" + overtime + "' <= m_inmate.end_duration ) ");

             DataTable dtRR = new DataTable();
             dtRR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRR);
             if (dtRR.Rows.Count > 0)
             {
                 rentchk = Convert.ToDouble(dtRR.Rows[0]["rent"].ToString());
                 depochk = Convert.ToDouble(dtRR.Rows[0]["security_deposit"].ToString());

                 newimno = Convert.ToDouble(dtRR.Rows[0]["noofinmates"].ToString());
                 newimrate = Convert.ToDouble(dtRR.Rows[0]["rate"].ToString());
                 newinmdepo = Convert.ToDouble(dtRR.Rows[0]["deposit"].ToString());
                 Session["chk"] = "ok";
             }
             else
             {
                 Session["chk"] = "stop";
                 this.ScriptManager1.SetFocus(txtClientid);
                 messagedisplay("Policy not set for period", "warn6");
                 this.ScriptManager1.SetFocus(btnOk);
             }

            
             txtinmno.Enabled = true;

             string stdv = @"SELECT extra_inmates,inmatedeposit FROM t_inmateallocation WHERE alloc_id='" + Session["allocid"].ToString() + "'";
             DataTable DTSS_stdv = objcls.DtTbl(stdv);

             if (DTSS_stdv.Rows.Count > 0)
             {
                 if (Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString()) == 0)
                 {
                     inmatecount = oldimno + Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                     //inmatecount = Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                     //txtinmno.Text = inmatecount.ToString();
                     oldimtot = oldimrate * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                     oldinmdepotot = inmdepoold * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                 }
                 else
                 {
                     inmatecount = oldimno + Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                     //inmatecount = Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                     //txtinmno.Text = inmatecount.ToString();
                     oldimtot = oldimrate * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                     oldinmdepotot = inmdepoold * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                 }
            
                 if (Session["customer"].ToString() == "Clubbing")
                 {//aloctime

                     OdbcCommand cmdRRcvb = new OdbcCommand();
                     cmdRRcvb.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                     cmdRRcvb.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
                     cmdRRcvb.Parameters.AddWithValue("conditionv", " ('" + aloctime + "' > m_rent.start_duration)  AND ('" + aloctime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category  AND m_room.room_id = m_inmate.room_id AND ( '" + aloctime + "' > m_inmate.start_duration)  AND ('" + aloctime + "' <= m_inmate.end_duration ) ");

                     DataTable dtRRcvb = new DataTable();
                     dtRRcvb = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRRcvb);
                     if (dtRRcvb.Rows.Count > 0)
                     {

                         double clubnoinm = Convert.ToDouble(dtRRcvb.Rows[0]["noofinmates"].ToString());
                         double clubinmrate = Convert.ToDouble(dtRRcvb.Rows[0]["rate"].ToString());
                         double clubinmdepo = Convert.ToDouble(dtRRcvb.Rows[0]["deposit"].ToString());
                      oldimtot = clubinmrate * (inmatecount - clubnoinm);
                      oldinmdepotot = clubinmdepo * (inmatecount - clubnoinm);

                     }

                 }

                 xtrainm = inmatecount - newimno;
                 newimtot = newimrate * xtrainm;
                 oldimtot = oldimrate * xtrainm;
                 totalt = newimtot - oldimtot;
                 txtinmno.Text = inmatecount.ToString();

                 inmdepnewtot = newinmdepo * xtrainm;

                 Session["inmrate"] = totalt;
                 Session["count"] = xtrainm;
                 Session["time"] = overtime;
                 Session["inmate"] = "ok";

             }
             else
             {
                 Session["inmate"] = "not";
             }



             if (Session["chk"].ToString() == "ok")
             {

                 double inmrate = totalt; //newimtot - oldimtot;
                 txtinmcharge.Text = Convert.ToString(inmrate);

                 double inmdep = inmdepnewtot - oldinmdepotot;
                 txtinmdeposit.Text = Convert.ToString(inmdep);

               if (Session["customer"].ToString() == "Donor Free Allocation")
                 {
                     oldrent = Convert.ToDouble(Session["orent"].ToString());
                     olddepo = Convert.ToDouble(Session["orent"].ToString());
                     if (olddepo > depochk)
                     {
                         depochk = olddepo;
                     }
                     txtinmcharge.Text = "0";
                     txtinmdeposit.Text = "0";
                 }
                 double newrent = rentchk - oldrent;

                 if (Session["customer"].ToString() == "Clubbing")
                 {
                     oldrent = Convert.ToDouble(Session["orent"].ToString());
                     olddepo = Convert.ToDouble(Session["deposit"].ToString());

                     depochk = depochk + olddepo;
                     newrent = rentchk;
                     
                 }

                 double newdepo = depochk - oldrent;

                 txtRentAlloc.Text = newrent.ToString();
                 txtDepositAlloc.Text = newdepo.ToString();

                 double newdue = 0;
                 //////////////////////////////////////INMATES CALCULATION///////////////////////////////////////
                 if (ViewState["CONTROL"] == "1")
                 {
                 double oldimtott = 0, newimtott = 0, inmatecountt = 0, xtrainmm = 0, oldinmdepotott = 0, inmdepnewtott = 0,total = 0;
                
                     //txtinmno.Text = Session["inm"].ToString();
                     if (txtinmno.Text != "")
                     {

                         if (Convert.ToDouble(txtinmno.Text) <= Convert.ToDouble(Session["inm"].ToString()))
                         {
                             if (Convert.ToDouble(txtinmno.Text) <= Convert.ToDouble(Session["inm"].ToString()))
                             {
                                 double oldinmcnt = Convert.ToDouble(Session["inm"].ToString());
                                 inmatecountt = Convert.ToDouble(txtinmno.Text);
                                 double oldextra = inmatecountt - oldinmcnt;

                                 oldimtott = oldextra * oldimrate;
                                 oldinmdepotott = oldextra * inmdepoold;

                                 xtrainmm = inmatecountt - oldimno;
                                 if (oldimno >= inmatecountt)
                                 {
                                     total = 0;
                                 }
                                 else
                                 {

                                     newimtott = newimrate * xtrainmm;
                                     oldimtot = oldimrate * xtrainmm;
                                     total = newimtott - oldimtot;
                                     inmdepnewtott = inmdepoold * xtrainmm;
                                 }
                                 //txtinmcharge.Text = Convert.ToString(newimtott);
                                 Session["inmrate"] = oldimrate;
                                 Session["count"] = xtrainmm;
                                 Session["time"] = tottime;
                                 Session["inmate"] = "ok";
                             }
                             else
                             {
                                 //no extra inamtes......
                                 oldimrate = 0;
                                 xtrainmm = 0;
                                 newimtott = 0; oldimtott = 0;
                                 inmdepnewtott = 0; oldinmdepotott = 0;
                                 Session["inmrate"] = oldimrate;
                                 Session["count"] = xtrainmm;
                                 Session["time"] = tottime;
                                 Session["inmate"] = "not";
                             }

                         }
                         else
                         {
                             txtinmno.Text = Session["inm"].ToString();
                             txtinmcharge.Text = "0";
                             txtinmdeposit.Text = "0";
                             ViewState["auction"] = "checkoutdate";
                             messagedisplay("Entered No of inmates is Less.", "ll");
                             SetFocus(txtinmno);
                             return;

                         }



                         //double inmrate = 0;
                         inmrate = total; //- oldimtott;
                         txtinmcharge.Text = Convert.ToString(inmrate);
                         double inmdepp = 0;
                         inmdepp = inmdepnewtott - oldinmdepotott;
                         txtinmdeposit.Text = Convert.ToString(inmdepp);

                     }
                 }
                 ViewState["CONTROL"] = "0";
                 //txtDepositAlloc.Text = olddeposit.ToString();
                 //txtRentAlloc.Text = "0";
                 //txtAdvAmount.Text = ((Convert.ToDouble(txtDepositAlloc.Text))+(Convert.ToDouble(txtinmcharge.Text)) + (Convert.ToDouble(txtRentAlloc.Text))).ToString();

                 if (txtClientid.Text != "")
                 {


                     txtAdvAmount.Text = (Convert.ToDouble(txtRentAlloc.Text) + Convert.ToDouble(txtDepositAlloc.Text) + inmrate + Convert.ToDouble(txtinmdeposit.Text)).ToString();
                     newdue = ((rentchk + inmrate + depochk) - (oldrent + Convert.ToDouble(Session["deposit"].ToString()))) + inmdep;
                 }
                 else
                 {
                     if (Session["changegross"].ToString() == "0")
                     {

                         txtAdvAmount.Text = (Convert.ToDouble(txtRentAlloc.Text) + Convert.ToDouble(txtDepositAlloc.Text) + inmrate + Convert.ToDouble(txtinmdeposit.Text)).ToString();
                         newdue = ((rentchk + inmrate + depochk ) - (oldrent + Convert.ToDouble(Session["deposit"].ToString()))) + inmdep;
                     }
                     else if (Session["changegross"].ToString() == "1")
                     {
                         txtAdvAmount.Text = (Convert.ToDouble(txtRentAlloc.Text) + Convert.ToDouble(txtDepositAlloc.Text) + inmrate + Convert.ToDouble(txtinmdeposit.Text)).ToString();
                        newdue = ((rentchk + inmrate + depochk) - (oldrent + Convert.ToDouble(Session["deposit"].ToString()))) + inmdep;

                     }
                 }
                 Session["newdue"] = newdue;

                 if (newdue < 0)
                 {

                     lblrent.Visible = true;
                     lblrent.Text = "Due To Swami Rs." + -newdue;
                 }
                 else
                 {
                     lblrent.Visible = true;
                     lblrent.Text = "Due from Swami Rs." + newdue;
                     //Session["due"] = newdue.ToString();
                 }
             }
             else if (Session["chk"].ToString() == "stop")
             {
                 lblrent.Visible = false;
                 txtRentAlloc.Text = "0";
                 txtDepositAlloc.Text = "0";
                 txtAdvAmount.Text = "0";
             }


         }

         else
         {
             this.ScriptManager1.SetFocus(txtClientid);
             messagedisplay("Exceeds Maximum allocation", "warn3");
             this.ScriptManager1.SetFocus(btnOk);
         }
        
       
        

         //////////////////////////////////***************new Extended Stay end***************//////////////////////////////


     } 
     #endregion
     #region Overstay
     else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
     
     
     {



         //////////////////////////////////***************new Overstay***************//////////////////////////////
         if (conn.State == ConnectionState.Closed)
         {
             conn.ConnectionString = strConnection;
             conn.Open();
         }
         DateTime aldate = Convert.ToDateTime(Convert.ToString(ViewState["alloctime"].ToString()));
         //   DateTime propdate = propdat;
         OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
         DateTime actualvact = Convert.ToDateTime(cmd.ExecuteScalar());
         
         string aldate1 = aldate.ToString("yyyy-MM-dd hh:mm:ss tt");
         String SS = "SELECT TIMEDIFF(STR_TO_DATE('" + aldate1 + "','%Y-%m-%d %l:%i:%s %p'), NOW())";
         DataTable DTSS = objcls.DtTbl(SS);
         TimeSpan actperiod = TimeSpan.Parse(DTSS.Rows[0][0].ToString());
         int overtime = 0;
         overtime = Convert.ToInt32(actperiod.TotalHours);
         if ((actperiod.Minutes > 0) && (actperiod.Minutes < 30))
         {
             overtime++;
         }

         string af = txtPropCheckOut.Text;
         string str1 = af.Replace('/', '-');

         if (Session["customer"].ToString() == "Donor Free Allocation" || Session["customer"].ToString() == "Clubbing")
         {
             String SSdf = "SELECT TIMEDIFF(STR_TO_DATE('" + str1 + "','%d-%m-%Y %l:%i %p'), NOW())";
             DataTable DTSSdf = objcls.DtTbl(SSdf);
             TimeSpan actperioddf = TimeSpan.Parse(DTSSdf.Rows[0][0].ToString());
             //int overtimedf = 0;
             overtime = Convert.ToInt32(actperioddf.TotalHours);
             if ((actperioddf.Minutes > 0) && (actperioddf.Minutes < 30))
             {
                 overtime++;
             }
         }

         

         txtExtendDate.Text = actualvact.ToString("dd-MM-yyyy");
         txtExtendTime.Text = actualvact.ToString("hh:mm tt");


         // str1 = m + "-" + d + "-" + y;

         string adf = txtExtendDate.Text + " " + txtExtendTime.Text;
         string str2 = adf.Replace('/', '-');
         // str2 = m + "-" + d + "-" + y;
         //DateTime ind = DateTime.Parse(str1);
         //DateTime outd = DateTime.Parse(str2);
         string ssvb = @"SELECT CASE WHEN  DATE_ADD(STR_TO_DATE('" + str1 + "','%d-%m-%Y %l:%i %p'),INTERVAL '" + graceperiod + "' HOUR ) >=  STR_TO_DATE('" + str2 + "','%d-%m-%Y %l:%i %p') THEN 'OK' ELSE 'Not' END AS 'CHK'";
         DataTable DTSS1x = objcls.DtTbl(ssvb);

         if (DTSS1x.Rows[0][0].ToString() == "OK")
         {
             ViewState["auction"] = "checkoutdate";
             messagedisplay("Vacate time less than allocated time. Overstay not possible not possible", "ll");

             lblrent.Visible = false;
             txtRentAlloc.Text = "0";
             txtDepositAlloc.Text = "0";
             txtAdvAmount.Text = "0";
             txtNoofDays.Text = "0";

             this.ScriptManager1.SetFocus(btnOk);
             return;
         }


         overtime = overtime - graceperiod;
         double newinmdepo = 0;

         OdbcCommand cmdRR = new OdbcCommand();
         cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
         cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
         cmdRR.Parameters.AddWithValue("conditionv", " ('" + overtime + "' > m_rent.start_duration)  AND ('" + overtime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category  AND m_room.room_id = m_inmate.room_id AND ( '" + overtime + "' > m_inmate.start_duration)  AND ('" + overtime + "' <= m_inmate.end_duration ) ");

         DataTable dtRR = new DataTable();
         dtRR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRR);
         if (dtRR.Rows.Count > 0)
         {
             rentchk = Convert.ToDouble(dtRR.Rows[0]["rent"].ToString());
             newimno = Convert.ToDouble(dtRR.Rows[0]["noofinmates"].ToString());
             newimrate = Convert.ToDouble(dtRR.Rows[0]["rate"].ToString());
             newinmdepo = Convert.ToDouble(dtRR.Rows[0]["deposit"].ToString());
             Session["chk"] = "ok";
         }
         else
         {
             Session["chk"] = "stop";
             this.ScriptManager1.SetFocus(txtClientid);
             messagedisplay("Pilicy not set for period", "warn6");
             this.ScriptManager1.SetFocus(btnOk);
         }
         

         double oldimtot = 0, newimtot = 0, inmatecount = 0, xtrainm = 0, oldinmdepotot = 0;

         string stdv = @"SELECT extra_inmates,inmatedeposit,inmatecharge FROM t_inmateallocation WHERE alloc_id='" + Session["allocid"].ToString() + "'";
         DataTable DTSS_stdv = objcls.DtTbl(stdv);

         if (DTSS_stdv.Rows.Count > 0)
         {
             inmatecount = oldimno + Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());

             oldimtot = oldimrate * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
             oldinmdepotot = inmdepoold * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());


             //oldinmdepotot = Convert.ToDouble(DTSS_stdv.Rows[0]["inmatedeposit"].ToString());
             xtrainm = inmatecount - newimno;
             newimtot = newimrate * xtrainm;

             Session["inmrate"] = newimrate;
             Session["count"] = xtrainm;
             Session["time"] = overtime;
             Session["inmate"] = "ok";

         }
         else
         {
             Session["inmate"] = "not";
         }
         txtinmno.Text = txtinmno.Text != "" ? txtinmno.Text : Session["inm"].ToString();
         //txtinmno.Text = Session["inm"].ToString();
         
         //txtAdvAmount.Text = ((Convert.ToDouble(txtDepositAlloc.Text))+(Convert.ToDouble(txtinmcharge.Text)) + (Convert.ToDouble(txtRentAlloc.Text))).ToString();

         //txtinmno.Text = Session["inm"].ToString();

         if (Session["chk"].ToString() == "ok")
         {
             double rate = 0;


             // rate = Convert.ToDouble(Session["advance"].ToString()) - Convert.ToDouble(Session["deposit"].ToString());

             // double newrent = rentchk - rate;

             if (Session["customer"].ToString() == "Clubbing")
             {
                 oldimtot = 0;
                 oldinmdepotot = 0;
                 oldrent = 0;
             }

             double inmrate = newimtot - oldimtot;
             ViewState["INM"] = inmrate;
             txtinmcharge.Text = Convert.ToString(inmrate);
             ViewState["INM"] = txtinmcharge.Text;
             if (Session["customer"].ToString() == "Donor Free Allocation")
             {
                 oldrent = Convert.ToDouble(Session["orent"].ToString());
                 olddepo = Convert.ToDouble(Session["deposit"].ToString());
                 //if (olddepo > depochk)
                 //{
                 //    depochk = olddepo;
                 //}

                 txtinmcharge.Text = "0";
             }




             double newrent = rentchk - oldrent;
             txtRentAlloc.Text = newrent.ToString();
             txtDepositAlloc.Text = "0";
             txtAdvAmount.Text = "0";
             txtinmdeposit.Text = "0";

             string datedt12 = datedt1.ToString("yyyy-MM-dd hh:mm:ss tt");
             String SS1 = "SELECT TIMEDIFF(STR_TO_DATE('" + datedt12 + "','%Y-%m-%d %l:%i:%s %p'), NOW())";
             DataTable DTSS1 = objcls.DtTbl(SS1);
             TimeSpan staytime = TimeSpan.Parse(DTSS1.Rows[0][0].ToString());

             int stayhours = 0;

             stayhours = Convert.ToInt32(staytime.TotalHours);
             if ((staytime.Minutes > 0) && (staytime.Minutes < 30))
             {
                 stayhours++;
             }


             txtNoofDays.Text = stayhours.ToString();
             double newdue = 0;
             double oldimtott = 0, newimtott = 0, inmatecountt = 0, xtrainmm = 0, oldinmdepotott = 0, inmdepnewtott = 0,total = 0;
             if (ViewState["CONTROL"].ToString() == "1")
             {
               


                    if (txtinmno.Text != "")
                    {

                        if (Convert.ToDouble(txtinmno.Text) <= Convert.ToDouble(Session["inm"].ToString()))
                        {
                            if (Convert.ToDouble(txtinmno.Text) < Convert.ToDouble(Session["inm"].ToString()))
                            {

                                double oldinmcnt = Convert.ToDouble(Session["inm"].ToString());
                                inmatecountt = Convert.ToDouble(txtinmno.Text);
                                double oldextra = inmatecountt - oldimno;

                                oldimtott = oldextra * oldimrate;
                                oldinmdepotott = oldextra * inmdepoold;

                                xtrainmm = inmatecountt - oldimno;
                                if (oldimno >= inmatecountt)
                                {
                                    total = 0;
                                }
                                else
                                {

                                    newimtott = newimrate * xtrainmm;
                                    oldimtot = oldimrate * xtrainmm;
                                    total = newimtott - oldimtot;
                                    inmdepnewtott = inmdepoold * xtrainmm;
                                }
                                //txtinmcharge.Text = Convert.ToString(newimtott);
                                Session["inmrate"] = oldimrate;
                                Session["count"] = xtrainmm;
                                Session["time"] = tottime;
                                Session["inmate"] = "ok";
                            }
                            else
                            {
                                //no extra inamtes......
                                //oldimrate = 0;
                                //xtrainmm = 0;
                                //newimtott = 0; oldimtott = 0;
                                //inmdepnewtott = 0; oldinmdepotott = 0;
                                //Session["inmrate"] = oldimrate;
                                //Session["count"] = xtrainmm;
                                //Session["time"] = tottime;
                                //Session["inmate"] = "not";
                            }

                        }
                        else
                        {
                            txtinmno.Text = Session["inm"].ToString();
                            txtinmcharge.Text = "0";
                            txtinmdeposit.Text = "0";
                            ViewState["auction"] = "checkoutdate";
                            messagedisplay("Entered No of inmates is Less.", "ll");
                            SetFocus(txtinmno);
                            return;

                        }



                        //double inmrate = 0;
                        inmrate = total; //- oldimtott;
                        txtinmcharge.Text = Convert.ToString(inmrate);
                        double inmdepp = 0;
                        inmdepp = inmdepnewtott - oldinmdepotott;
                        txtinmdeposit.Text = Convert.ToString(inmdepp);


                    }
                
             }
             ViewState["CONTROL"] = "0";
             //if (txtClientid.Text != "")
             //{
             //    newdue = Convert.ToDouble(Session["advance"].ToString()) - rentchk;
             //}
             //else
             //{
             //    if (Session["changegross"].ToString() == "0")
             //    {
             //        newdue = Convert.ToDouble(Session["advance"].ToString()) - (rentchk + Convert.ToDouble(Session["deposit"].ToString()));
             //    }
             //    else if (Session["changegross"].ToString() == "1")
             //    {
             //        newdue = Convert.ToDouble(Session["advance"].ToString()) - rentchk;

             //    }
             //}

             if (txtClientid.Text != "")
             {
                 // newdue = Convert.ToDouble(Session["deposit"].ToString()) - newrent ;
                 //if (Convert.ToDouble(Session["deposit"].ToString()) < (newrent + inmrate))
                 //{
                 //    newdue = 0;

                 //}
                 //else
                 //{

                 newdue = (olddeposit + oldinmdepotot) - (newrent + inmrate);
                 //if (Convert.ToDouble(txtinmno.Text) < oldimno)
                 //{
                 //    int charg = 0;
                 //    charg = Convert.ToInt32(ViewState["INM"].ToString());
                 //    newdue = (Convert.ToDouble(Session["deposit"].ToString()) + oldinmdepotot) - (newrent +charg);
                 //}
                 //else
                 //{
                 //    int charg = 0;
                 //    charg = Convert.ToInt32(ViewState["INM"].ToString());
                 //    newdue = (Convert.ToDouble(Session["deposit"].ToString()) + oldinmdepotot) - (newrent + charg);
                 //}

                 //}

             }
             else
             {
                 if (Session["changegross"].ToString() == "0")
                 {
                     // newdue = Convert.ToDouble(Session["deposit"].ToString()) - (newrent + Convert.ToDouble(Session["deposit"].ToString()));
                     //if (Convert.ToDouble(Session["deposit"].ToString()) < (newrent + inmrate + Convert.ToDouble(Session["deposit"].ToString())))
                     //{
                     //    newdue = 0;
                     //}
                     //else
                     //{

                     newdue = (olddeposit + oldinmdepotot) - (newrent + inmrate);
                     //newdue = (olddeposit + oldinmdepotot) - (newrent + inmrate); //+ Convert.ToDouble(Session["deposit"].ToString()));
                     //}

                 }
                 else if (Session["changegross"].ToString() == "1")
                 {
                     // newdue = Convert.ToDouble(Session["deposit"].ToString()) - newrent ;
                     //if (Convert.ToDouble(Session["deposit"].ToString()) < (newrent + inmrate))
                     //{
                     //    newdue = 0;

                     //}
                     //else
                     //{

                     newdue = (olddeposit + oldinmdepotot) - (newrent + inmrate); //+ Convert.ToDouble(Session["deposit"].ToString()));

                     //}
                 }
             }


             Session["newdue"] = newdue;
             if (newdue > 0)
             {
                 lblrent.Visible = true;
                 lblrent.Text = "Due To Swami Rs." + newdue;
             }
             else
             {
                 txtAdvAmount.Text = Convert.ToString(-newdue);
                 lblrent.Visible = true;
                 lblrent.Text = "Due from Swami Rs." + -newdue;
                 //Session["due"] = "-" + newdue.ToString();
             }
         }
         else if (Session["chk"].ToString() == "stop")
         {
             lblrent.Visible = false;
             txtRentAlloc.Text = "0";
             txtDepositAlloc.Text = "0";
             txtAdvAmount.Text = "0";
         }
         //////////////////////////////////***************new Overstay end***************//////////////////////////////


     } 
     #endregion
     #region Inmates Add
     else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Inmates Add")
     {
       
         txtExtendDate.Text = DTSSq.Rows[0][1].ToString();
         txtExtendTime.Text = checkoutSplit[1].ToString() + " " + checkoutSplit[2].ToString();
       
         txtNoofDays.Text = tottime.ToString();



         double oldimtot = 0, newimtot = 0, inmatecount = 0, xtrainm = 0, oldinmdepotot = 0, inmdepnewtot=0;

         string stdv = @"SELECT extra_inmates,inmatedeposit FROM t_inmateallocation WHERE alloc_id='" + Session["allocid"].ToString() + "'";
         DataTable DTSS_stdv = objcls.DtTbl(stdv);

         if (DTSS_stdv.Rows.Count > 0)
         {
           
         }
         else
         {
             Session["inmate"] = "not";
         }




         if (txtinmno.Text != "")
         {
             if (Convert.ToDouble(txtinmno.Text) >= Convert.ToDouble(Session["inm"].ToString()))
             {
                 if (Convert.ToDouble(txtinmno.Text) > oldimno)
                 {
                     double oldinmcnt = Convert.ToDouble(Session["inm"].ToString());
                     inmatecount = Convert.ToDouble(txtinmno.Text);
                     double oldextra = oldinmcnt - oldimno;

                     oldimtot = oldextra * oldimrate;
                     oldinmdepotot = oldextra * inmdepoold;

                     xtrainm = inmatecount - oldimno;
                     newimtot = oldimrate * xtrainm;
                     inmdepnewtot = inmdepoold * xtrainm;

                     Session["inmrate"] = oldimrate;
                     Session["count"] = xtrainm;
                     Session["time"] = tottime;
                     Session["inmate"] = "ok";
                 }
                 else
                 {
                     //no extra inamtes......
                     oldimrate = 0;
                     xtrainm = 0;
                     newimtot = 0; oldimtot = 0;
                     inmdepnewtot = 0; oldinmdepotot = 0;
                     Session["inmrate"] = oldimrate;
                     Session["count"] = xtrainm;
                     Session["time"] = tottime;
                     Session["inmate"] = "not";
                 }

             }
             else
             {
                 txtinmno.Text = Session["inm"].ToString();
                 txtinmcharge.Text = "0";
                 txtinmdeposit.Text = "0";
                 ViewState["auction"] = "checkoutdate";
                 messagedisplay("Entered No of inmates is Less.", "ll");
                 SetFocus(txtinmno);
                 return;

             }

         }



         double inmrate = 0;
         inmrate= newimtot - oldimtot;
         txtinmcharge.Text = Convert.ToString(inmrate);
          double inmdep = 0;
          inmdep = inmdepnewtot - oldinmdepotot;
         txtinmdeposit.Text = Convert.ToString(inmdep);

         txtDepositAlloc.Text = olddeposit.ToString();
         txtRentAlloc.Text = "0";
         txtAdvAmount.Text = ((Convert.ToDouble(txtDepositAlloc.Text))+(Convert.ToDouble(txtRentAlloc.Text))).ToString();

         double newdue = 0;

         if (txtClientid.Text != "")
         {

             newdue = inmrate+ inmdep ;

         }
         else
         {
             if (Session["changegross"].ToString() == "0")
             {


                 newdue = inmrate + inmdep;// Convert.ToDouble(Session["deposit"].ToString())
              
             }
             else if (Session["changegross"].ToString() == "1")
             {

                 newdue = inmrate+ inmdep;
            
             }

         }

         Session["newdue"] = newdue;
         if (newdue < 0)
         {
             lblrent.Visible = true;
             lblrent.Text = "Due To Swami Rs." + -newdue;
         }
         else
         {
             lblrent.Visible = true;
             lblrent.Text = "Due from Swami Rs." + newdue;
            // Session["due"] = newdue.ToString();
         }

     } 
     #endregion

        Session["calc"] = "calc";
        BalanceAmountCalculations();
        this.ScriptManager1.SetFocus(btnCheckout);

    }
         
        
    # region Loading Details By entering Room no,Building
    protected void txtroomno_TextChanged(object sender, EventArgs e)
   {
        # region LOADING DETAILS BY ENTERING ROOMNO AND BUILDING

        try
        {
           

          if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }
          OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
          DateTime date = Convert.ToDateTime(cmd.ExecuteScalar());

          ViewState["date"] = date;
          Session["changegross"] = 0;
          Session["overstay"] = 0;
          Session["flag"] = "false";
          Session["normflag"] = "false";

            OdbcCommand cmdvacate = new OdbcCommand();
            cmdvacate.CommandType = CommandType.StoredProcedure;
            cmdvacate.Parameters.AddWithValue("tblname", " m_sub_building msb ,m_room mr,t_roomallocation tr  left join m_sub_district msd   on  tr.district_id=msd.district_id");
            cmdvacate.Parameters.AddWithValue("attribute", "adv_recieptno,mr.build_id,roomno,swaminame,advance,districtname,place,tr.deposit,allocdate ,alloc_type,exp_vecatedate,alloc_no,tr.roomrent,tr.payment_mode");
            cmdvacate.Parameters.AddWithValue("conditionv", "tr.roomstatus='2' and  mr.room_id=tr.room_id and mr.build_id=msb.build_id and  mr.roomno=" + int.Parse(txtRoomNo.Text) + " and mr.build_id=" + Convert.ToInt32(cmbBuilding.SelectedValue) + " ");
            DataTable dttvacate = new DataTable();
            dttvacate = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdvacate);
            if (dttvacate.Rows.Count > 0)
            {
                Session["customer"] = dttvacate.Rows[0]["alloc_type"].ToString();
                txtAdRecieptNo.Text = dttvacate.Rows[0]["adv_recieptno"].ToString();
                cmbBuilding.SelectedValue = dttvacate.Rows[0]["build_id"].ToString();
                txtRoomNo.Text = (dttvacate.Rows[0]["roomno"]).ToString();
                txtCustomerName.Text = dttvacate.Rows[0]["swaminame"].ToString();
                txtAdvanceAmount.Text = dttvacate.Rows[0]["advance"].ToString();
                txtDistrict.Text = dttvacate.Rows[0]["districtname"].ToString();
                txtCustomerPlace.Text = dttvacate.Rows[0]["place"].ToString();
                dep = Convert.ToInt32(dttvacate.Rows[0]["deposit"]);
                DateTime datedt = DateTime.Parse(dttvacate.Rows[0]["allocdate"].ToString());
             
                string dates1 = datedt.ToString("dd-MM-yyyy");
                string times1 = datedt.ToString("hh:mm tt");
                txtAllocatedDate.Text = dates1.ToString();
                txtAllocatedTime.Text = times1.ToString();
                DateTime dateprop = DateTime.Parse(dttvacate.Rows[0]["exp_vecatedate"].ToString());
                propdat = dateprop;
                ViewState["propdat"] = propdat;
                Session["allocdate"] = dttvacate.Rows[0]["allocdate"].ToString();
                string propdate = dateprop.ToString("dd/MM/yyyy hh:mm tt");

                txtPropCheckOut.Text = propdate.ToString();
                txtAllocNo.Text = dttvacate.Rows[0]["alloc_no"].ToString();
                alloctime = DateTime.Parse(dttvacate.Rows[0]["allocdate"].ToString());
                ViewState["alloctime"] = alloctime;
                ViewState["paytype"] = paytype;

                Session["advance"] = dttvacate.Rows[0]["advance"];
                Session["orent"] = dttvacate.Rows[0]["roomrent"].ToString();
                ViewState["payment_mode123"] = dttvacate.Rows[0]["payment_mode"].ToString();
                DateTime datestring1 = Convert.ToDateTime(ViewState["date"].ToString());
                txtVacatingDate.Text = datestring1.ToString("dd/MM/yyyy");

                txtVecatingTime.Text = datestring1.ToString("hh:mm tt");

             
                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                {
                    DateTime datedt1 =DateTime.Now;
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtVacatingDate.Text = dates11;
                    txtVecatingTime.Text = times11;
                    txtExtendTime.Text = times11.ToString();

                    GracePeriodCalculation();

                    if (Convert.ToString(Session["measureunit"]) == "5")
                    {

                        DateTime dtx = DateTime.Parse(Session["miniunit"].ToString());
                        string times = dtx.ToString("hh:mm tt");
                        txtVecatingTime.Text = times.ToString();
                        txtExtendTime.Text = times.ToString();

                    }


                    DateTime dateCheckin = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text.ToString()) + " " + txtAllocatedTime.Text);
                    string[] checkoutSplitx = txtPropCheckOut.Text.Split(' ');
                    DateTime datecheckout = DateTime.Parse(objcls.yearmonthdate(checkoutSplitx[0].ToString()) + " " + checkoutSplitx[1].ToString() + " " + checkoutSplitx[2].ToString());
                    int ddx1, tc1, n1, td1;
                    TimeSpan datediffx = datecheckout - dateCheckin;
                    td1 = datediffx.Hours;
                    ddx1 = datediffx.Days;
                    tc1 = ddx1;
                    ddx1 = 24 * ddx1;
                    n1 = ddx1 + td1;
                    Int32 rent1, deposit1;
                    
                    OdbcCommand cmdR = new OdbcCommand();
                    cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                    cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                    cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                    DataTable dtR = new DataTable();
                    dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);


                    if (n1 <= 12)
                    {
                        

                        if (dtR.Rows.Count > 0)
                        {

                            rent1 =Convert.ToInt32(dtR.Rows[0]["rent_1"])- Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["rent"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);
                          

                            if (DateTime.Now < dateExtend)
                            {



                                txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: " + Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]) - Convert.ToInt32(txtRentAlloc.Text)) + " Rs.";
                            }
                            else 
                            {
                                txtExtendDate.Text = DateTime.Now.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = DateTime.Now.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToInt32(dtR.Rows[0]["rent"]).ToString();
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: 0 Rs.";

                            }
                        }


                    }
                    else
                    {
                        

                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(12);
                            DateTime dateExtend16 = datecheckout.AddHours(16);
                            
                            if (DateTime.Now < dateExtend)
                            {

                                txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: " + Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(txtRentAlloc.Text)) + " Rs.";
                            }
                           
                            else
                            {
                                txtExtendDate.Text = DateTime.Now.ToString("dd-MM-yyyy");

                                txtExtendTime.Text = DateTime.Now.ToString("hh:mm tt");

                                txtDepositAlloc.Text = "0";

                                txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent"]));
                                txtNoofDays.Text = "1";
                                txtAdvAmount.Text = "0";

                                lblrent.Visible = true;
                                lblrent.Text = "Due To: 0 Rs.";

                            }
                        }


                    }

                    ////////////////////////////*********************************************************************
                    extend();

                    ////////////////////////////*********************************************************************
   


                }
                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                {
                    DateTime datedt1 = DateTime.Parse(dttvacate.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtVacatingDate.Text = dates11.ToString();
                    txtVecatingTime.Text = times11.ToString();
                    txtExtendTime.Text = times11.ToString();

                    GracePeriodCalculation();

                    if (Convert.ToString(Session["measureunit"]) == "5")
                    {

                        DateTime dtx = DateTime.Parse(Session["miniunit"].ToString());
                        string times = dtx.ToString("hh:mm tt");
                        txtVecatingTime.Text = times.ToString();
                        txtExtendTime.Text = times.ToString();

                    }


                    DateTime dateCheckin = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text.ToString()) + " " + txtAllocatedTime.Text);
                    string[] checkoutSplitx = txtPropCheckOut.Text.Split(' ');
                    DateTime datecheckout = DateTime.Parse(objcls.yearmonthdate(checkoutSplitx[0].ToString()) + " " + checkoutSplitx[1].ToString() + " " + checkoutSplitx[2].ToString());
                    int ddx1, tc1, n1, td1;
                    TimeSpan datediffx = datecheckout - dateCheckin;
                    td1 = datediffx.Hours;
                    ddx1 = datediffx.Days;
                    tc1 = ddx1;
                    ddx1 = 24 * ddx1;
                    n1 = ddx1 + td1;
                    Int32 rent1, deposit1;
                    if (n1 <= 12)
                    {
                        OdbcCommand cmdR = new OdbcCommand();
                        cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                        cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                        cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                        DataTable dtR = new DataTable();
                        dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);


                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["security"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);

                            txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                            txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                            txtDepositAlloc.Text = "0";

                            txtRentAlloc.Text = Convert.ToString(Convert.ToInt32(dtR.Rows[0]["rent_1"]) - Convert.ToInt32(dtR.Rows[0]["rent"]));
                            txtNoofDays.Text = "1";
                            txtAdvAmount.Text = "0";
                        }


                    }
                    else
                    {
                        OdbcCommand cmdR = new OdbcCommand();
                        cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                        cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent_1");
                        cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbBuilding.SelectedValue + " and room.roomno='" + txtRoomNo.Text + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                        DataTable dtR = new DataTable();
                        dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);


                        if (dtR.Rows.Count > 0)
                        {

                            rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                            deposit1 = Convert.ToInt32(dtR.Rows[0]["security"]);
                            deposit1 = rent1;
                            Session["rent1"] = rent1;
                            Session["deposit1"] = deposit1;

                            DateTime dateExtend = datecheckout.AddHours(4);

                            txtExtendDate.Text = dateExtend.ToString("dd-MM-yyyy");

                            txtExtendTime.Text = dateExtend.ToString("hh:mm tt");

                            txtDepositAlloc.Text = "0";

                            txtRentAlloc.Text = Convert.ToInt32(dtR.Rows[0]["rent"]).ToString();
                            txtNoofDays.Text = "1";
                            txtAdvAmount.Text = "0";
                        }


                    }



                    ////////////////////////////*********************************************************************
                    extend();

                    ////////////////////////////*********************************************************************
   

                }


                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {

                    DateTime datedt1 = DateTime.Parse(dttvacate.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtExtendDate.Text = dates11.ToString();
                    txtExtendTime.Text = times11.ToString();
                }
                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {
                    //txtinmno.Text = Session["inm"].ToString();
                    extend();
                    SetFocus(txtinmno);
                }
              

                conn.Close();
              
                    BalanceAmountCalculations();
              
                this.ScriptManager1.SetFocus(btnCheckout);

            }

            else
            {
                messagedisplay("Room is not allocated now", "warn3");

            }
        }
        catch (Exception ex)
        {
            messagedisplay("Problem found","warn8");
        }
        conn.Close();

        # endregion
    }
    # endregion

    # region ENTERING CUSTOMER NAME
    protected void txtcustomername_TextChanged(object sender, EventArgs e)
    {
        if (conn.State ==ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }

        try
        {
           string name=objcls.initiallast(txtCustomerName.Text);
           txtCustomerName.Text = name;
            Panel5.Visible = false;
            Panel7.Visible = true;

             OdbcCommand cmdadv = new OdbcCommand();
              cmdadv.CommandType = CommandType.StoredProcedure;
              cmdadv.Parameters.AddWithValue("tblname", "m_sub_building msb ,m_room mr, t_roomallocation tr left join m_sub_district msd on tr.district_id=msd.district_id");
              cmdadv.Parameters.AddWithValue("attribute", "swaminame ,place , districtname ,buildingname ,roomno ,DATE_FORMAT(allocdate,'%d-%m-%y  %l:%i %p') as allocdate ");
              cmdadv.Parameters.AddWithValue("conditionv", " tr.roomstatus='2' and  mr.room_id=tr.room_id and mr.build_id=msb.build_id and  swaminame LIKE  '" + txtCustomerName.Text + "' and tr.roomstatus=" + 2 + "");
              DataTable dtt = objcls.SpDtTbl("call selectcond(?,?,?)",cmdadv);
              dtgCustomerDetails.DataSource = dtt;
              dtgCustomerDetails.DataBind();
              conn.Close();
        }
        catch (Exception ex)
        {

            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Problem found ";
            ViewState["action"] = "warn28";
            ModalPopupExtender1.Show();

        }

    }
    # endregion

    # region Text Changes
    protected void txtcustomerplace_TextChanged(object sender, EventArgs e)
    {

    }
    protected void txtDistrict_TextChanged(object sender, EventArgs e)
    {

    }
   
    # endregion
   
    # region Vacating Time text change- Edit 
    protected void txtvecatingtime_TextChanged(object sender, EventArgs e)
    {
    # region VACATING TIME EDIT
        try
        {
            btnSave.Enabled = true;
            Session["edit"] = 1;
            string curdate = Session["dayend"].ToString();


            if (conn.State ==ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            string vecdate =objcls.yearmonthdate(txtVacatingDate.Text.ToString());
            DateTime tim2 = DateTime.Parse(txtVecatingTime.Text);
            string time11 = tim2.ToString();
            DateTime date = DateTime.Now;
            string datef2 = date.ToString("dd/MM/yyyy");
         
            string datetime  =objcls.yearmonthdate(datef2);
            string datekk = date.ToShortTimeString();
            DateTime tim3 = DateTime.Parse(datekk.ToString());

            DateTime tim4 = DateTime.Parse(time11.ToString());
            TimeSpan dif = tim4 - tim3;
            int diff = dif.Hours;
            if (diff < 0)
            {
                BalanceAmountCalculations();
                lblHead.Text = "Tsunami ARMS - Warning";
                pnlOk.Visible = true;
                pnlYesNo.Visible = false;
                lblOk.Text = " Edited time is less than current time";
                ViewState["action"]="warn15";
                ModalPopupExtender1.Show();

              
                conn.Close();

            }

            BalanceAmountCalculations();
        }
        catch (Exception ex)
        {


        }
        # endregion
    }
    # endregion

    # region Vacating Date Change
    protected void txtvecdate_TextChanged(object sender, EventArgs e)
    {
        try
        {
            btnSave.Enabled = true;
            Session["edit"] = 1;
            string curdate = Session["dayend"].ToString();

            DateTime dat1 = DateTime.Parse(txtVacatingDate.Text);
            if (conn.State ==ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }

            string vecdate =objcls.yearmonthdate(txtVacatingDate.Text.ToString());
            DateTime tim2 = DateTime.Parse(txtVecatingTime.Text);
            string timemm = tim2.ToString();
            DateTime date = DateTime.Now;
           
            string datef2 = date.ToString("dd/MM/yyyy");
            string datekk2 =objcls.yearmonthdate(datef2);
            string datekk = date.ToShortTimeString();
            TimeSpan di = date - dat1;

            int diff = di.Days;


            if (diff > 0)
            {


            }

            conn.Close();

        }
        catch (Exception ex)
        {


        }

        BalanceAmountCalculations();

    }
    # endregion
      
    # region Check Out button
    protected void btncheckout_Click(object sender, EventArgs e)
    {
        if ((cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Inmates Add"))
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }

            string plain = "";
            //if (chkOldReceipt.Checked == true)
            //{
            //    plain = "yes";
            //}
            //else
            //{
                plain = "no";

            //}

            OdbcCommand cmd712 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd712.CommandType = CommandType.StoredProcedure;
            cmd712.Parameters.AddWithValue("tblname", "t_roomallocation");
            cmd712.Parameters.AddWithValue("attribute", "adv_recieptno");
            cmd712.Parameters.AddWithValue("conditionv", "adv_recieptno=" + int.Parse(txtAllocRecNo.Text) + " and is_plainprint='" + plain + "'");
            OdbcDataAdapter dacnt712 = new OdbcDataAdapter(cmd712);
            DataTable dtt712 = new DataTable();
            dacnt712.Fill(dtt712);
            if (dtt712.Rows.Count > 0)
            {
                messagedisplay("Reciept already exists", "v1");
                
                this.ScriptManager1.SetFocus(txtAllocRecNo);
                return;
                
            }
            conn.Close();
            lblHead.Text = "Tsunami ARMS - Confirmation";
            lblMsg.Text = "Do you want to Realloc?";
            ViewState["action"] = "realloc";
            pnlOk.Visible = false;
            pnlYesNo.Visible = true;
            ModalPopupExtender1.Show();
            this.ScriptManager1.SetFocus(btnYes);
        }
       
        else
        {
           
                lblHead.Text = "Tsunami ARMS - Confirmation";
                lblMsg.Text = "Do you want to Check out?";
                ViewState["action"] = "checkout";
                pnlOk.Visible = false;
                pnlYesNo.Visible = true;
                ModalPopupExtender1.Show();
                this.ScriptManager1.SetFocus(btnYes);
          
        }

    }
    # endregion

    # region Bill Print Button
    protected void btnbill_Click(object sender, EventArgs e)
    {

        lblHead.Text = "Tsunami ARMS - Confirmation";
        lblMsg.Text = "Do you want to Print the Bill?";
        ViewState["action"] = "printbill";
        pnlOk.Visible = false;
        pnlYesNo.Visible = true;

        ModalPopupExtender1.Show();
        this.ScriptManager1.SetFocus(btnNo );

    }

    # endregion
        
    # region Button Edit Click
    protected void btnedit_Click1(object sender, EventArgs e)
    {
        pnlLogin.Visible = true;
    }
    # endregion

    # region Button Save Click
    protected void  btnsave_Click1(object sender, EventArgs e)
    {
        txtLiability.Enabled = false;
        txtRecieptBalance.Enabled = false;
        txtDeposit.Enabled = false;
        txtStartRecieptNo.Enabled = false;
        pnlLogin.Visible = false;
        txtVecatingTime.Enabled = false;
        txtVacatingDate.Enabled = false;
        btnSave.Enabled = false;
    }
    # endregion

    # region Button Inmates Absconding click
    protected void  btnabscending_Click(object sender, EventArgs e)
    {
    string customer1=Session["customer"].ToString();
    if ((customer1 != "Donor Free Allocation") && (customer1 != "Donor Paid Allocation") && (customer1 != "Donor Multiple Pass"))
    {

        lblHead.Text = "Tsunami ARMS - Confirmation";
        lblMsg.Text = "Do you want to Check out?";
        ViewState["action"] = "incheckout";
        pnlOk.Visible = false;
        pnlYesNo.Visible = true;

        ModalPopupExtender1.Show();
        this.ScriptManager1.SetFocus(btnYes);


    }
    else
    {
        pnlOk.Visible = false;
        pnlYesNo.Visible = false;
        pnlYesNo2.Visible = true;
        lblHead.Text = "Tsunami ARMS - Confirmation";
        ModalPopupExtender1.Show();
        this.ScriptManager1.SetFocus(btnYes);



    }
}
    # endregion

    # region Button Report
protected void  btnreport_Click(object sender, EventArgs e)
{
    # region care taker,donor combo load

    if (conn.State == ConnectionState.Closed)
    {

        conn.ConnectionString = strConnection;
        conn.Open();

    }

    pnlReports.Visible = true;
    string strSql4 = " select  distinct msb.build_id,buildingname from t_roomallocation tr,m_sub_building msb ,m_room mr where tr.room_id=mr.room_id and mr.build_id=msb.build_id ";

    OdbcDataAdapter da = new OdbcDataAdapter(strSql4, conn);


    DataTable dtt1 = new DataTable();
    DataColumn colID = dtt1.Columns.Add("build_id", System.Type.GetType("System.Int32"));
    DataColumn colNo = dtt1.Columns.Add("buildingname", System.Type.GetType("System.String"));
    DataRow row = dtt1.NewRow();
    row["build_id"] = "-1";
    row["buildingname"] = "--Select--";
    dtt1.Rows.InsertAt(row, 0);
    da.Fill(dtt1);

    cmbBuildReport2.DataSource = dtt1;
    cmbBuildReport2.DataBind();

    string strSql4a = " select  distinct msb.build_id,buildingname from t_roomallocation tr,m_sub_building msb ,m_room mr where tr.room_id=mr.room_id and mr.build_id=msb.build_id and tr.roomstatus=2";

    OdbcDataAdapter daa = new OdbcDataAdapter(strSql4a, conn);


    DataTable dtt1a = new DataTable();
    DataColumn colIDa = dtt1a.Columns.Add("build_id", System.Type.GetType("System.Int32"));
    DataColumn colNoa = dtt1a.Columns.Add("buildingname", System.Type.GetType("System.String"));
    DataRow rowa = dtt1a.NewRow();
    rowa["build_id"] = "-1";
    rowa["buildingname"] = "All";
    dtt1a.Rows.InsertAt(rowa, 0);
    daa.Fill(dtt1a);
   
    cmbSelectBuilding.DataSource = dtt1a;
    cmbSelectBuilding.DataBind();


    DateTime dts = DateTime.Now;
    string todate = dts.ToString("dd/MM/yyyy");

    txtToDate.Text = todate.ToString();


    string strSql4b = " SELECT build_id, buildingname FROM  m_sub_building where rowstatus!='2'";

    OdbcDataAdapter dab = new OdbcDataAdapter(strSql4b, conn);

    
    DataTable dtt1b = new DataTable();
    dab.Fill(dtt1b);

    DataRow rowb = dtt1b.NewRow();
    rowb["build_id"] = "-1";
    rowb["buildingname"] = "All";
    dtt1b.Rows.InsertAt(rowb, 0);

    cmbCompleteBuilding.DataSource = dtt1b;
    cmbCompleteBuilding.DataBind();



# endregion



}
# endregion

    # region
protected void  btnPrinterOnOff_Click(object sender, EventArgs e)
{
    
}
protected void RadioButton1_CheckedChanged(object sender, EventArgs e)
{
             
}

protected void  Button2_Click(object sender, EventArgs e)
{

}
protected void  Button3_Click(object sender, EventArgs e)
{

}

# endregion

    # region Key Lost Charge Change
protected void  txtKeynotReturnCharge_TextChanged(object sender, EventArgs e)
{
    BalanceAmountCalculations();

}
# endregion

    # region  Saving Data TO Ledger

   public void SavingDataToLedger(int ledger_id,int value,int cashierid, int type)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();

        }
        string dayendd = Session["dayend"].ToString();
        datetoday = Session["datenow"].ToString();
        counterno = Convert.ToInt32(Session["counterid"]);

        OdbcCommand cmdread = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmdread.CommandType = CommandType.StoredProcedure;
        cmdread.Parameters.AddWithValue("tblname", "t_daily_transaction");
        cmdread.Parameters.AddWithValue("attribute", "amount");
       cmdread.Parameters.AddWithValue("conditionv", "date='" + dayendd + "' and liability_type=" + type + " and counter_id=" + counterno + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledger_id + "");
       cmdread.Transaction = odbTrans;
        OdbcDataReader orn = cmdread.ExecuteReader();
     
       if (orn.Read())
        {
           
            int amount = Convert.ToInt32(orn["amount"]);
            amount = amount + value;
            OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd3.CommandType = CommandType.StoredProcedure;
            cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
            cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
            cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + " and liability_type=" + type + "   and date='" + dayendd + "' and  counter_id=" + counterno + " and ledger_id=" + ledger_id + "");
            cmd3.Transaction = odbTrans;
           cmd3.ExecuteNonQuery();
                        
        }
        else
        {
            int transid = 0;
            OdbcCommand cmd48 = new OdbcCommand("CALL selectdata(?,?)", conn);
            cmd48.CommandType = CommandType.StoredProcedure;
            cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
            cmd48.Transaction = odbTrans;
           OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmd48);
            DataTable dtt48 = new DataTable();
            dacnt48.Fill(dtt48);
            if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
            {

                transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                transid = transid + 1;

            }
            else
            {
                transid = 1;

            }
            OdbcCommand cmdliability = new OdbcCommand("CALL savedata(?,?)",conn);
            cmdliability.CommandType = CommandType.StoredProcedure;
            cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmdliability.Parameters.AddWithValue("val",""+transid+","+type+","+cashierid+"," + counterno + ",'0',"+ledger_id+"," + value + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'" );
            cmdliability.Transaction = odbTrans;
           cmdliability.ExecuteNonQuery();

        }

    }
    # endregion

    # region Complaint Radio Button Change

    protected void RadioButtonList1_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (txtAdRecieptNo.Text != "")
        {
            if (rdoComplaints.Text == "Yes")
            {
                Session["deposit"] = Convert.ToInt32(Session["deposit"]);
                Session["compfromvacating"] = 1;
                Session["reciept"] = txtAdRecieptNo.Text;
                Session["clientid"] = txtClientid.Text;
                Session["cmbbuildid"] = cmbBuilding.SelectedValue;
                Session["roomno"] = txtRoomNo.Text;
                Session["swaminame"] = txtCustomerName.Text;
                Session["place"] = txtCustomerPlace.Text;
                Session["district"] = txtDistrict.Text;
                Session["alloctime"] = txtAllocatedDate.Text;
                Session["alloctime"] = txtAllocatedTime.Text;
                Session["vacatedate"] = txtVacatingDate.Text;
                Session["vacatetime"] = txtVecatingTime.Text;
                Session["noofdays"] = txtDaysStayed.Text;
                Session["advance"] = txtAdvanceAmount.Text;
                Session["grossamount"] = txtGrossAmount.Text;
                Session["balance"] = txtBalanceAmount.Text;
                Session["indicatetext"] = btnBalanceIndicator.Text;
                Session["propcheck"] = txtPropCheckOut.Text.ToString();
                Session["allocno"] = txtAllocNo.Text.ToString();
                if (txtKeynotReturnCharge.Visible == true)
                {
                    Session["x"] = 1;
                    Session["keypenality"] = txtKeynotReturnCharge.Text;
                }
                else
                {
                    Session["x"] = 0;

                }
                if (txtRoomNotGoodCondition.Visible == true)
                {
                    Session["y"] = 1;
                    Session["roomdamage"] = txtRoomNotGoodCondition.Text;
                }
                else
                {
                    Session["y"] = 0;

                }
              
                Session["buildalternate"] = cmbaltbulilding.SelectedValue;
                Session["clientid"] = txtClientid.Text;
                try
                {
                    Session["roomalter"] = cmbaltroom.SelectedItem.ToString();
                }
                catch { }
                Session["allocrecno"] = txtAllocRecNo.Text;
                Session["alloctransno"] = txtAllocNumber.Text;
                Session["extendate"] = txtExtendDate.Text;
                Session["extendtime"]=txtExtendTime.Text;
                Session["noofunits"] = txtNoofDays.Text;
                Session["deposit"] = txtDepositAlloc.Text;
                Session["rent"] = txtRentAlloc.Text;
                Session["total"] = txtAdvAmount.Text;
                Session["reason"] = CmbReason.SelectedValue;
                Session["checkout"] = cmbCheckOutMehtod.SelectedItem.ToString();
                Session["hidden"] = HiddenField1.Value;
                Session["con3"] = con3;
                if (btnBalanceIndicator.BackColor == System.Drawing.Color.Red)
                {
                    Session["color"] = 1;
                }
                else if (btnBalanceIndicator.BackColor == System.Drawing.Color.Green)
                {
                    Session["color"] = 0;

                }
                else Session["color"] = 2;
                Session["roomcond"] = rdoRoomCondition.SelectedItem;
                Session["complaints"] = rdoComplaints.SelectedItem;
                Session["keystatus"] = rdoKeyReturn.SelectedItem;
                Server.Transfer("~/complaint Register.aspx", false);
               // Response.Redirect("~/complaint Register.aspx", false);
            }
           
        }
        else
        {
            Session["compfromvacating"] = 0;
            messagedisplay("Enter Advance reciept no","warn");

        }
    }
    # endregion

    # region Key Return Radio Button Change
    protected void rdoKeyReturn_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (txtAdRecieptNo.Text != "")
        {

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }


            string dd = Session["dayend"].ToString();
            int data1 = 0, flag1 = 0;
            int seasonsubid = Convert.ToInt32(Session["season_subid"]);

            if (rdoKeyReturn.Text == "No")
            {

                try
                {
                    lblPenalityKey.Visible = true;

                    txtKeynotReturnCharge.Visible = true;
                    int keynotreturned = 0;
                
                                OdbcCommand cmdbill = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                                cmdbill.CommandType = CommandType.StoredProcedure;
                                cmdbill.Parameters.AddWithValue("tblname", "t_policy_billservice_seasons  bs ,t_policy_billservice  tpb");
                                cmdbill.Parameters.AddWithValue("attribute", "*");
                                cmdbill.Parameters.AddWithValue("conditionv", " bill_service_id=" + 3 + " and bs.bill_policy_id=tpb.bill_policy_id and bs.rowstatus!=" + 2 + "  and ((curdate()>=fromdate and curdate()<=todate) or (curdate()>=fromdate and todate='0000-00-00'))");
                                OdbcDataAdapter dacntbill = new OdbcDataAdapter(cmdbill);
                                DataTable dttbill = new DataTable();
                                dacntbill.Fill(dttbill);

                                if (dttbill.Rows.Count > 0)
                                {
                                    for (int ii = 0; ii < dttbill.Rows.Count; ii++)
                                    {

                                        data1 = 1;
                                        int seaid = Convert.ToInt32(dttbill.Rows[ii]["season_sub_id"]);
                                        if (seaid == seasonsubid)
                                        {
                                            int servicecharge1 = Convert.ToInt32(dttbill.Rows[ii]["servicecharge"]);
                                            txtKeynotReturnCharge.Text = servicecharge1.ToString();
                                            flag1 = 1;
                                            BalanceAmountCalculations();


                                            if ((cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay"))
                                            {
                                                txtBalanceAmount.Text = (0).ToString();

                                                if (txtBalanceAmount.Text == "0")
                                                {

                                                    btnBalanceIndicator.BackColor = System.Drawing.Color.Wheat;
                                                    btnBalanceIndicator.Text = "";
                                                }

                                                Session["flag"] = "true";


                                                double due = Convert.ToDouble(Session["newdue"].ToString());
                                                due = due - Convert.ToDouble(servicecharge1);
                                                if (due > 0)
                                                {
                                                    lblrent.Visible = true;
                                                    lblrent.Text = "Due To Swami Rs." + due;
                                                }
                                                else
                                                {

                                                    lblrent.Visible = true;
                                                    lblrent.Text = "Due from Swami Rs." + -due;
                                                    Session["due"] = "-" + due.ToString();
                                                }

                                            }
                                            else
                                            {
                                                txtGrossAmount.Text = (Convert.ToInt32(txtGrossAmount.Text) - servicecharge1).ToString();
                                                Session["normflag"] = "true";
                                            }

                                            break;
                                        }

                                        if (flag1 == 1)
                                        {
                                            break;
                                        }


                                    }

                                    if (keynotreturned == 1)
                                    {


                                    }

                                    
                                }
                                else
                                {
                                    lblHead.Text = "Tsunami ARMS - Warning";
                                    pnlOk.Visible = true;
                                    pnlYesNo.Visible = false;
                                    lblOk.Text = "No policy Set in Billing and service charge policy for key not return charge";
                                    ViewState["action"] = "warn22";
                                    ModalPopupExtender1.Show();
                                    return;

                                }
                                if (data1 == 0)
                                {
                                    lblHead.Text = "Tsunami ARMS - Warning";
                                    pnlOk.Visible = true;
                                    pnlYesNo.Visible = false;
                                    lblOk.Text = "No policy Set ";
                                    ViewState["action"] = "warn22";
                                    ModalPopupExtender1.Show();
                                    return;

                                }
                                
                                if (flag1 == 0)
                                {
                                    lblHead.Text = "Tsunami ARMS - Warning";
                                    pnlOk.Visible = true;
                                    pnlYesNo.Visible = false;
                                    lblOk.Text = "No policy set for Key not returned status";
                                    ViewState["action"] = "warn22";
                                    ModalPopupExtender1.Show();
                                   return;
                                }


                }
                catch (Exception ex)
                {

                    lblHead.Text = "Tsunami ARMS - Warning";
                    pnlOk.Visible = true;
                    pnlYesNo.Visible = false;
                    lblOk.Text = "Problem found";
                    ViewState["action"] = "warn24";
                    ModalPopupExtender1.Show();
                }
                conn.Close();
             
            }
            else if (rdoKeyReturn.Text == "Yes")
            {
                txtKeynotReturnCharge.Text = "";
                txtKeynotReturnCharge.Visible = false;
                lblPenalityKey.Visible = false;
                BalanceAmountCalculations();

                if ((cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay") || (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay"))
                {
                    txtBalanceAmount.Text = (0).ToString();

                    if (txtBalanceAmount.Text == "0")
                    {

                        btnBalanceIndicator.BackColor = System.Drawing.Color.Wheat;
                        btnBalanceIndicator.Text = "";
                    }

                    Session["flag"] = "false";


                    double due = Convert.ToDouble(Session["newdue"].ToString());
                    if (due > 0)
                    {
                        lblrent.Visible = true;
                        lblrent.Text = "Due To Swami Rs." + due;
                    }
                    else
                    {

                        lblrent.Visible = true;
                        lblrent.Text = "Due from Swami Rs." + -due;
                        Session["due"] = "-" + due.ToString();
                    }
                }
                else
                {
                    Session["normflag"] = "false";
                }
            }


        }
        else if (txtAdRecieptNo.Text == "")
        {
            messagedisplay("Enter Advance Receipt No", "warno");

        }
    }
    # endregion

    protected void btnRoomCondNo_CheckedChanged(object sender, EventArgs e)
    {

    }

    # region RoomCondition Radio Button
    protected void rdoRoomCondition_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (txtAdRecieptNo.Text != "")
        {
            if (rdoRoomCondition.Text == "No")
            {
                lblPealityDamage.Visible = true;
                txtRoomNotGoodCondition.Visible = true;
                txtRoomNotGoodCondition.Text = "0";
                this.ScriptManager1.SetFocus(txtRoomNotGoodCondition);

            }
            else if (rdoRoomCondition.Text == "Yes")
            {
                txtRoomNotGoodCondition.Text ="";
                txtRoomNotGoodCondition.Visible = false;
                lblPealityDamage.Visible = false;
                BalanceAmountCalculations();

            }

        }
        else if (txtAdRecieptNo.Text == "")
        {

            messagedisplay("Enter Advance Receipt no", "warno");
        }


    }
    # endregion

    # region ABSCONDING CHECK OUT
    public void AbscondingCheckoutCaretakerLiability()
    {
        try
        {

            string remark = "";
            cashierid = Convert.ToInt32(Session["cashierid"]);
            Session["receiptforforcevacating"] = 0;
            pnlYesNo2.Visible = false;
            string customer = Session["customer"].ToString();
            int allocid = Convert.ToInt32(Session["allocid"]);
            int staffid = 0, taskid = 0;
            ViewState["action"] = "NILL";
            userid = Convert.ToInt32(Session["userid"]);

            int counter = Convert.ToInt32(Session["counterid"]);
            
            int notreturn = Convert.ToInt32(Session["notreturn"]);
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }

            odbTrans = conn.BeginTransaction();

            int servicecharge = Convert.ToInt32(Session["servicecharge"]);
            int rentt;
            rentt = Convert.ToInt32(Session["extraamount"]);
            string actualdate = txtVacatingDate.Text.ToString();
            actualdate =objcls.yearmonthdate(actualdate);
            actualdate = actualdate + " " + txtVecatingTime.Text;
            DateTime actualdate1 = DateTime.Parse(actualdate);
            string actualdate2 = actualdate1.ToString("yyyy-MM-dd hh:mm:ss");
            int overcharge = Convert.ToInt32(Session["overcharge"]);
            string dayendd = Session["dayend"].ToString();
            DateTime datenow = DateTime.Now;
            string f22 = datenow.ToString("dd/MM/yyyy");
            string datetoday = objcls.yearmonthdate(f22);
            datetoday = datetoday + " " + DateTime.Now.ToString("HH:mm:ss");
            string customertype = Session["customer"].ToString();

            DateTime expdate = DateTime.Parse(Session["expdate"].ToString());

            DateTime actualdate11 = DateTime.Parse(actualdate);
            string actualdate21 = actualdate1.ToString("yyyy-MM-dd hh:mm:ss");

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }

            int sum1 = Convert.ToInt32(txtBalanceAmount.Text);

            if (sum1 > 0)
            {

                OdbcCommand cmd2 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd2.CommandType = CommandType.StoredProcedure;
                cmd2.Parameters.AddWithValue("tblname", " m_sub_task ");
                cmd2.Parameters.AddWithValue("attribute", "task_id");
                cmd2.Parameters.AddWithValue("conditionv", "taskname='caretaker'");
                cmd2.Transaction = odbTrans;
                OdbcDataReader ord2 = cmd2.ExecuteReader();
                if (ord2.Read())
                {
                    taskid = Convert.ToInt32(ord2["task_id"]);


                    OdbcCommand cm2 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cm2.CommandType = CommandType.StoredProcedure;
                    cm2.Parameters.AddWithValue("tblname", " m_team_workplace mt,m_team_members vv ");
                    cm2.Parameters.AddWithValue("attribute", "staff_id");
                    cm2.Parameters.AddWithValue("conditionv", "mt.task_id=" + taskid + " and mt.workplace_id=" + cmbBuilding.SelectedValue + "   and vv.team_id=mt.team_id");
                    cm2.Transaction = odbTrans;
                    OdbcDataReader or2 = cm2.ExecuteReader();
                    if (or2.Read())
                    {
                        staffid = Convert.ToInt32(or2["staff_id"]);

                    }
                    else
                    {
                        messagedisplay("No caretaker set for the building Check out is not done", "warnnc");
                        return;

                    }

                }
                else
                {
                    messagedisplay("No caretaker set for the building Check out is not done", "warnnc");
                    return;
                }
            }

            if (rdoKeyReturn.Text == "No")
            {
                UpdateKeyInventory();
            }

            int ledgerrent = 0, ledgerunclaimdeposit = 0, ledgerkeynot = 0, ledgerroomcondition = 0;
            OdbcCommand cmdledger = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Overstay Rent'", conn);
            cmdledger.Transaction = odbTrans;
            OdbcDataReader orledger = cmdledger.ExecuteReader();
            if (orledger.Read())
            {
                ledgerrent = Convert.ToInt32(orledger["ledger_id"]);

            }
            OdbcCommand cmdledger1 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Unclaimed Security Deposit'", conn);
            cmdledger1.Transaction = odbTrans;
            OdbcDataReader orledger1 = cmdledger1.ExecuteReader();
            if (orledger1.Read())
            {
                ledgerunclaimdeposit = Convert.ToInt32(orledger1["ledger_id"]);

            }

            OdbcCommand cmdledger2 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Penality for Key Not Returned'", conn);
            cmdledger2.Transaction = odbTrans;
            OdbcDataReader orledger2 = cmdledger2.ExecuteReader();
            if (orledger2.Read())
            {
                ledgerkeynot = Convert.ToInt32(orledger2["ledger_id"]);

            }

            OdbcCommand cmdledger3 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Penality for Room Damages'", conn);
            cmdledger3.Transaction = odbTrans;
            OdbcDataReader orledger3 = cmdledger3.ExecuteReader();
            if (orledger3.Read())
            {
                ledgerroomcondition = Convert.ToInt32(orledger3["ledger_id"]);

            }

            int liability1 = 0;


            liability1 = Convert.ToInt32(txtBalanceAmount.Text);
            if (HiddenField1.Value == "0")
            {
                int deposit5 = Convert.ToInt32(Session["deposit"]);
                liability1 = liability1 + deposit5;

            }

            int othercharge = Convert.ToInt32(Session["othercharge"]);
            if (othercharge != 0)
            {

                liability1 = liability1 - othercharge;
            }

            int value3 = 0;

            if (rdoKeyReturn.Text == "No")
            {
                int xx = Convert.ToInt32(txtKeynotReturnCharge.Text);
                if (xx > 0)
                {

                    if (expdate > actualdate11)
                    {

                        int deposit6 = Convert.ToInt32(Session["deposit"]);

                        int x = Convert.ToInt32(txtKeynotReturnCharge.Text);
                        value3 = x;
                        int y = x - deposit6;
                        SavingDataToLedger(ledgerkeynot, deposit6, cashierid, 0);


                        if (y > 0)
                        {
                            txtKeynotReturnCharge.Text = y.ToString();


                        }
                        else
                        {
                            txtKeynotReturnCharge.Text = "0";


                        }
                        remark = "Key penality";
                    }
                }
            }


            int keyexecutiveflag = 0;
            try
            {
                keyexecutiveflag = Convert.ToInt32(Session["executekey"]);

            }
            catch { }

            if (txtKeynotReturnCharge.Text != "") 
            {
                int value = int.Parse(txtKeynotReturnCharge.Text);
                SavingDataToLedger(ledgerkeynot, value, staffid, 1);

            }
            if (txtRoomNotGoodCondition.Text != "")
            {
                int value = int.Parse(txtRoomNotGoodCondition.Text);
                SavingDataToLedger(ledgerroomcondition, value, staffid, 1);

            }

            int transid = 0;
            if (liability1 > 0)
            {

                OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counter + " and cash_caretake_id=" + staffid + " and ledger_id=" + ledgerrent + " and liability_type='1'", conn);
                cmn.Transaction = odbTrans;
                OdbcDataReader orn = cmn.ExecuteReader();
                if (orn.Read())
                {

                    int amount = Convert.ToInt32(orn["amount"]);
                    amount = amount + liability1;
                    OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd3.CommandType = CommandType.StoredProcedure;
                    cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                    cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                    cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + staffid + "  and date='" + dayendd + "' and  counter_id=" + counter + " and ledger_id=" + ledgerrent + " and liability_type='1' ");
                    cmd3.Transaction = odbTrans;
                    cmd3.ExecuteNonQuery();

                }
                else
                {

                    OdbcCommand cmd48 = new OdbcCommand("CALL selectdata(?,?)", conn);
                    cmd48.CommandType = CommandType.StoredProcedure;
                    cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
                    cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                    cmd48.Transaction = odbTrans;  
                    OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmd48);
                    DataTable dtt48 = new DataTable();
                    dacnt48.Fill(dtt48);
                    if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
                    {

                        transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                        transid = transid + 1;

                    }
                    else
                    {
                        transid = 1;

                    }


                    OdbcCommand cmdliability = new OdbcCommand("CALL savedata(?,?)", conn);
                    cmdliability.CommandType = CommandType.StoredProcedure;
                    cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
                    cmdliability.Parameters.AddWithValue("val", "" + transid + ",'1', " + staffid + "," + counter + ",'0'," + ledgerrent + "," + liability1 + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                    cmdliability.Transaction = odbTrans;
                    cmdliability.ExecuteNonQuery();

                }

            }

            if (HiddenField1.Value == "1")
            {
                Session["deporet"] = depo;

                con1 = 0;

                remark = "Inmates absconding";

               
                    int depositreturn = 0;
                    Session["depositreturn"] = depositreturn;
                    int dep = Convert.ToInt32(Session["deposit"]);
                  
                    OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counter + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerunclaimdeposit + " and liability_type='0' ", conn);
                    cmn.Transaction = odbTrans;
                    OdbcDataReader orn = cmn.ExecuteReader();
                    if (orn.Read())
                    {

                        int amount = Convert.ToInt32(orn["amount"]);
                        amount = amount + dep;
                        OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                        cmd3.CommandType = CommandType.StoredProcedure;
                        cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                        cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "' ");
                        cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counter + " and ledger_id=" + ledgerunclaimdeposit + " and liability_type='0'");
                        cmd3.Transaction = odbTrans;
                        cmd3.ExecuteNonQuery();



                    }
                    else
                    {
                        OdbcCommand cmd481 = new OdbcCommand("CALL selectdata(?,?)", conn);
                        cmd481.CommandType = CommandType.StoredProcedure;
                        cmd481.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmd481.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                        cmd481.Transaction = odbTrans;
                        OdbcDataAdapter dacnt481 = new OdbcDataAdapter(cmd481);
                        DataTable dtt481 = new DataTable();
                        dacnt481.Fill(dtt481);
                        if (Convert.IsDBNull(dtt481.Rows[0]["trans_id"]) == false)
                        {

                            transid = Convert.ToInt32(dtt481.Rows[0]["trans_id"]);
                            transid = transid + 1;

                        }
                        else
                        {
                            transid = 1;

                        }


                        OdbcCommand cmddeposit = new OdbcCommand("CALL savedata(?,?)", conn);
                        cmddeposit.CommandType = CommandType.StoredProcedure;
                        cmddeposit.Parameters.AddWithValue("tblname", "t_daily_transaction");
                        cmddeposit.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counter + ",'0'," + ledgerunclaimdeposit + "," + dep + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                        cmddeposit.Transaction = odbTrans;
                        cmddeposit.ExecuteNonQuery();

                    }

                    updatedeposit();

               
                depo = 0;
            }


            else if (HiddenField1.Value == "0")
            {
               
                Session["deporet"] = depo;
                  con1 = 1;
                
                    int without = Convert.ToInt32(Session["withoutiddep"]);

                    dep =Convert.ToInt32(Session["deposit"]);
                   
                    int depositreturn = dep;
                    Session["depositreturn"] = depositreturn;
                     malyear = Convert.ToInt32(Session["malyear"]);
                     malyearid = Convert.ToInt32(Session["malyyearid"]);

                    DateTime cur2 = DateTime.Now;
                    int currentyear = cur2.Year;
                  
                    int curseasonid = Convert.ToInt32(Session["seasonid"]);
                    int depoo = Convert.ToInt32(Session["depo"]);
                    OdbcCommand cmd391 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmd391.CommandType = CommandType.StoredProcedure;
                    cmd391.Parameters.AddWithValue("tblname", "t_seasondeposit");
                    cmd391.Parameters.AddWithValue("attribute", "totaldeposit");
                    cmd391.Parameters.AddWithValue("conditionv", "season_id =" + curseasonid + " and mal_year_id=" + malyearid + " and  cashier_id=" + cashierid + "");
                    cmd391.Transaction = odbTrans;
                    OdbcDataAdapter dacnt391 = new OdbcDataAdapter(cmd391);
                    DataTable dtt391 = new DataTable();
                    dacnt391.Fill(dtt391);
                    int se = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
                    se = se - dep;

                    OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
                    cmd826.CommandType = CommandType.StoredProcedure;
                    cmd826.Parameters.AddWithValue("tablename", "t_seasondeposit");
                    cmd826.Parameters.AddWithValue("valu", "totaldeposit=" + se + " ");
                    cmd826.Parameters.AddWithValue("convariable", "season_id=" + curseasonid + " and mal_year_id=" + malyearid + " and cashier_id=" + cashierid + "");
                    cmd826.Transaction = odbTrans;
                    
                    cmd826.ExecuteNonQuery();
               
            }

            //# region UPDATING Room allocation table,Room  vacate table and room master;

            try
            {
                int depp = Convert.ToInt32(Session["depositreturn"]);

                int vacateid = 0;
                OdbcCommand cmdselect1 = new OdbcCommand("CALL selectdata(?,?)", conn);
                cmdselect1.CommandType = CommandType.StoredProcedure;
                cmdselect1.Parameters.AddWithValue("tblname", "t_roomvacate");
                cmdselect1.Parameters.AddWithValue("attribute", "max(vacate_id)as vacate_id ");
                cmdselect1.Transaction = odbTrans;
                OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmdselect1);
                DataTable dtt48 = new DataTable();
                dacnt48.Fill(dtt48);
                if (Convert.IsDBNull(dtt48.Rows[0]["vacate_id"]) == false)
                {

                    vacateid = Convert.ToInt32(dtt48.Rows[0]["vacate_id"]);
                    vacateid = vacateid + 1;

                }
                else
                {
                    vacateid = 1;

                }

                int keyret = 1, rommcond = 1, roomcomplaint = 0;
                if (rdoKeyReturn.Text == "No")
                {
                    keyret = 0;

                }
                if (rdoComplaints.Text == "Yes")
                {
                    roomcomplaint = 1;

                }
                if (rdoRoomCondition.Text == "No")
                {
                    rommcond = 0;
                }

                int othercharge1 = Convert.ToInt32(Session["othercharge"].ToString());

                int mn = Convert.ToInt32(Session["overcharge"]);

                int key1 = 0, damage1 = 0;
                if (txtKeynotReturnCharge.Text != "")
                {
                    key1 = Convert.ToInt32(txtKeynotReturnCharge.Text);

                }
                if (txtRoomNotGoodCondition.Text != "")
                {
                    damage1 = Convert.ToInt32(txtRoomNotGoodCondition.Text);

                }

                if (flag == 1)
                {

                }
                int overridedeposit = 0;
                try
                {
                    if (Convert.ToInt32(Session["execute"]) == 1)
                    {

                        overridedeposit = 1;

                    }
                }
                catch { }

                int overridedkey = 0;
                try
                {
                    if (Convert.ToInt32(Session["executekey"]) == 1)
                    {

                        overridedkey = 1;

                    }
                }
                catch { }


                int editreciept = 0;
                try
                {
                    if (Convert.ToInt32(Session["editreciept"]) == 1)
                    {

                        editreciept = 1;

                    }
                }
                catch { }

                int edit = 0;
                if (Convert.ToInt32(Session["edit"]) == 1)
                {

                    edit = 1;
                }
                string vacateno = CalculateVacateid();
                int overrentcharge = Convert.ToInt32(Session["overcharge"]);
                OdbcCommand cmdsave = new OdbcCommand("CALL savedata(?,?)", conn);
                cmdsave.CommandType = CommandType.StoredProcedure;
                cmdsave.Parameters.AddWithValue("tblname", "t_roomvacate");

                if (edit == 1)
                {
                    string sqlsave="" + vacateid + ",'" + dayendd + "'," + allocid + "," + userid + ",null," + overrentcharge + ",'" + "" + "'," + othercharge1 + "," 
                    + " '" + actualdate2 + "'," + 0 + "," + 0 + "," + keyret + ", " + key1 + "," + con1 + ", " + damage1 + ", " + rommcond + "," + roomcomplaint + ", "
                    + " " + 1 + ",'1', " + depp + "," + Convert.ToInt32(txtBalanceAmount.Text) + "," + Convert.ToInt32(txtGrossAmount.Text) + "," + counter + "," + userid + ", "
                    + " '" + datetoday + "','" + remark.ToString() + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";

                    cmdsave.Parameters.AddWithValue("val", sqlsave);


                }
                else
                {
                    string sqlsave="" + vacateid + ",'" + dayendd + "'," + allocid + ",null,null," + overrentcharge + ",'" + "" + "'," + othercharge1 + ",'" + actualdate2 + "', "
                    + " " + 0 + "," + 0 + "," + keyret + ", " + key1 + "," + con1 + ", " + damage1 + ", " + rommcond + "," + roomcomplaint + "," + 1 + ",'1', " + depp + ", " 
                    + " " + Convert.ToInt32(txtBalanceAmount.Text) + "," + Convert.ToInt32(txtGrossAmount.Text) + "," + counter + "," + userid + ",'" + datetoday + "', "
                    + "'" + remark.ToString() + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";
                    cmdsave.Parameters.AddWithValue("val", sqlsave);

                }

                cmdsave.Transaction = odbTrans;

                cmdsave.ExecuteNonQuery();
                Session["edit"] = 0;


            }
            catch
            {
            }

            OdbcCommand cmdupdatealloc = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmdupdatealloc.CommandType = CommandType.StoredProcedure;
            cmdupdatealloc.Parameters.AddWithValue("tablename", "t_roomallocation");
            cmdupdatealloc.Parameters.AddWithValue("valu", "roomstatus=" + 1 + "");
            cmdupdatealloc.Transaction = odbTrans;
            cmdupdatealloc.Parameters.AddWithValue("convariable", "adv_recieptno=" + int.Parse(txtAdRecieptNo.Text) + " ");
            cmdupdatealloc.ExecuteNonQuery();
            DateTime date = DateTime.Now;
            try
            {
                OdbcCommand cmdupdateroom = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                cmdupdateroom.CommandType = CommandType.StoredProcedure;
                cmdupdateroom.Parameters.AddWithValue("tablename", "m_room");
                cmdupdateroom.Parameters.AddWithValue("valu", "roomstatus=" + 1 + ",housekeepstatus=" + 0 + ", updateddate='" + datetoday + "'");
                cmdupdateroom.Parameters.AddWithValue("convariable", "build_id=" + cmbBuilding.SelectedValue + " and roomno=" + int.Parse(txtRoomNo.Text) + "");
                cmdupdateroom.Transaction = odbTrans;
                cmdupdateroom.ExecuteNonQuery();

            }
            catch (Exception ex)
            { }


            odbTrans.Commit();
            SeaonDepositLoad();

            flag = 0;
            CalulatingCounterLiability();
            Session["executedeposit"] = 0;
            Session["executekey"] = 0;
            lblHead.Text = "Tsunami ARMS -Confirmation";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Successfully Checked Out";
            ViewState["action"] = "warnn";
            ModalPopupExtender1.Show();
            this.ScriptManager1.SetFocus(btnOk);

        }
        catch
        {
            odbTrans.Rollback();
            messagedisplay("problem in check out", "oo");

        }


    }
    # endregion

    # region RoomCondition Text change
    protected void txtRoomNotGoodCondition_TextChanged(object sender, EventArgs e)
    {
        BalanceAmountCalculations();
    }
    # endregion

    # region Grid VIew Customer Details Change
    protected void GridView2_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            int k = int.Parse(dtgCustomerDetails.SelectedRow.Cells[5].Text);
            string building = (dtgCustomerDetails.SelectedRow.Cells[4].Text).ToString();
            string swami = (dtgCustomerDetails.SelectedRow.Cells[1].Text).ToString();


            OdbcCommand cmdcust = new OdbcCommand();
            cmdcust.CommandType = CommandType.StoredProcedure;
            cmdcust.Parameters.AddWithValue("tblname", "m_room mr,m_sub_building msb,t_roomallocation ta  left join m_sub_district msd   on  ta.district_id=msd.district_id ");
            cmdcust.Parameters.AddWithValue("attribute", "adv_recieptno, mr.build_id,roomno,swaminame,advance,districtname,place,ta.deposit,allocdate ,alloc_type,exp_vecatedate,alloc_no,totalcharge ");
            cmdcust.Parameters.AddWithValue("conditionv", " mr.room_id=ta.room_id and mr.build_id=msb.build_id and   swaminame='" + swami + "' and buildingname='" + building + "' and roomno=" + k + " and  ta.roomstatus=" + 2 + "   ");
            DataTable dtcust = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdcust);
            if (dtcust.Rows.Count > 0)
            {
                Session["customer"] = dtcust.Rows[0]["alloc_type"].ToString();
                txtAdRecieptNo.Text = dtcust.Rows[0]["adv_recieptno"].ToString();
                cmbBuilding.SelectedValue = dtcust.Rows[0]["build_id"].ToString();
                txtRoomNo.Text = (dtcust.Rows[0]["roomno"]).ToString();
                txtCustomerName.Text = dtcust.Rows[0]["swaminame"].ToString();
                txtAdvanceAmount.Text = dtcust.Rows[0]["advance"].ToString();
                txtDistrict.Text = dtcust.Rows[0]["districtname"].ToString();
                txtCustomerPlace.Text = dtcust.Rows[0]["place"].ToString();
                dep = Convert.ToInt32(dtcust.Rows[0]["deposit"]);
                DateTime datedt = DateTime.Parse(dtcust.Rows[0]["allocdate"].ToString());
                string dates1 = datedt.ToString("dd-MM-yyyy");
                string times1 = datedt.ToString("hh:mm tt");

                txtAllocatedDate.Text = dates1.ToString();
                txtAllocatedTime.Text = times1.ToString();
                DateTime dateprop = DateTime.Parse(dtcust.Rows[0]["exp_vecatedate"].ToString());
                string propdate = dateprop.ToString("dd/MM/yyyy hh:mm tt");

                txtPropCheckOut.Text = propdate.ToString();
                txtAllocNo.Text = dtcust.Rows[0]["alloc_no"].ToString();
                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                {
                    DateTime datedt1 = DateTime.Parse(dtcust.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtVacatingDate.Text = dates11.ToString();
                   
                    txtVecatingTime.Text = times11.ToString();
                    txtExtendTime.Text = times11.ToString();
                    
                    GracePeriodCalculation();
                    if (Convert.ToString(Session["measureunit"]) == "5")
                    {
                        DateTime dtx = DateTime.Parse(Session["miniunit"].ToString());
                        string times = dtx.ToString("hh:mm tt");
                        txtVecatingTime.Text = times.ToString();
                        txtExtendTime.Text = times.ToString();
                    }

                }
                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {
                    DateTime datedt1 = DateTime.Parse(dtcust.Rows[0]["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtExtendDate.Text = dates11.ToString();
                    txtExtendTime.Text = times11.ToString();
                }

                BalanceAmountCalculations();
            }

            conn.Close();
        }
        catch
        {
            messagedisplay("problem found", "hjg" );
        }

    }
    # endregion

    # region Page Index Change
    protected void GridView2_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }



        dtgCustomerDetails.PageIndex = e.NewPageIndex;
        dtgCustomerDetails.DataBind();


      
        OdbcDataAdapter cmd11 = new OdbcDataAdapter("select swaminame as SwamiName,place as Place, district as District,buildingname as Building,roomno as RoomNo from roomtransaction where custname LIKE  '" + txtCustomerName.Text + "' and roomstatus=" + 4 + "", conn);

        DataSet dass = new DataSet();
        cmd11.Fill(dass, "room_transaction");
        dtgCustomerDetails.DataSource = dass;
        dtgCustomerDetails.DataBind();
        conn.Close();

    }
    # endregion

    # region Grid View Sorting
    protected void GridView2_Sorting(object sender, GridViewSortEventArgs e)
    {
       
    }
    # endregion

    # region Grid View PAge Index change2
    protected void GridView1_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        dtgRoomVacateDetails.PageIndex = e.NewPageIndex;
        dtgRoomVacateDetails.DataBind();

        if (chkselectall.Checked == true)
        {


            OdbcDataAdapter das = new OdbcDataAdapter("select adv_recieptno, buildingname ,roomno ,swaminame ,DATE_FORMAT( exp_vecatedate,'%d-%m-%y %l:%i %p') as vacatedate from t_roomallocation  rt,m_sub_building msb,m_room mr where  rt. roomstatus=" + 2 + "   and   rt.room_id=mr.room_id and mr.build_id=msb.build_id   order by exp_vecatedate", conn);
         
            DataSet dass = new DataSet();
            das.Fill(dass, "t_roomallocation");
            dtgRoomVacateDetails.DataSource = dass;
            dtgRoomVacateDetails.DataBind();


        }
        else if (check == 1)
        {


            OdbcDataAdapter cmd1 = new OdbcDataAdapter("select adv_recieptno,buildingname ,roomno ,swaminame , DATE_FORMAT(exp_vecatedate, '%l:%i %p') as vacatedate from tempvacate1,m_room mr,m_sub_building msb where mr.room_id=tempvacate1.room_id and msb.build_id=mr.build_id", conn);

            DataSet dass = new DataSet();
            cmd1.Fill(dass, "tempvacate1");
            dtgRoomVacateDetails.DataSource = dass;
            dtgRoomVacateDetails.DataBind();


        }
        else if (check == 2)
        {

            OdbcDataAdapter cmd11 = new OdbcDataAdapter("select adv_recieptno, buildingname ,roomno ,swaminame , DATE_FORMAT(exp_vecatedate, '%l:%i %p') as vacatedate from tempvacate2,m_room mr,m_sub_building msb where mr.room_id=tempvacate1.room_id and msb.build_id=mr.build_id", conn);
            DataSet dass = new DataSet();
            cmd11.Fill(dass, "tempvacate2");
            dtgRoomVacateDetails.DataSource = dass;
            dtgRoomVacateDetails.DataBind();

        }
        else
        {
            OdbcDataAdapter das = new OdbcDataAdapter("select adv_recieptno, buildingname ,roomno ,swaminame,DATE_FORMAT( exp_vecatedate,'%d-%m-%y %l:%i %p') as vacatedate from t_roomallocation  rt,m_sub_building msb,m_room mr where  rt. roomstatus=" + 2 + "   and  date(exp_vecatedate)=curdate()  and   rt.room_id=mr.room_id and mr.build_id=msb.build_id   order by exp_vecatedate", conn);
            DataSet dass = new DataSet();
            das.Fill(dass, "t_roomallocation");
            dtgRoomVacateDetails.DataSource = dass;
            dtgRoomVacateDetails.DataBind();
        }


    }
# endregion

    # region Grid view Row created
    protected void GridView1_RowCreated(object sender, GridViewRowEventArgs e)
    {

    }
    # endregion

    # region grid sorting
    protected void GridView1_Sorting(object sender, GridViewSortEventArgs e)
    {
    }
     # endregion

    # region Customer Details Row created
    protected void GridView2_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.RowState == DataControlRowState.Alternate)
            {
                e.Row.Attributes.Add("onmouseover", "this.style.backgroundColor='lightblue';");
                e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor='White';");
            }
            else
            {
                e.Row.Attributes.Add("onmouseover", "this.style.backgroundColor='lightblue';");
                e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor='#EFF3FB';");
            }
            e.Row.Style.Add("cursor", "pointer");
            e.Row.Attributes["onclick"] = ClientScript.GetPostBackClientHyperlink(this.dtgCustomerDetails, "Select$" + e.Row.RowIndex);
        }


    }
    # endregion
   
    # region Calculating Counter Liability
    public void CalulatingCounterLiability()
    {
        Session["totalamount"] = 0;
        cashierid = Convert.ToInt32(Session["cashierid"]);

        int ledgerunclaimdeposit=0;
        OdbcCommand cmdledger1 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Unclaimed Security Deposit'", conn);
        OdbcDataReader orledger1 = cmdledger1.ExecuteReader();
        if (orledger1.Read())
        {
            ledgerunclaimdeposit = Convert.ToInt32(orledger1["ledger_id"]);

        }
        int ledgerrent=0;
        OdbcCommand cmdledgerv = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Overstay Rent'", conn);
        OdbcDataReader orledgerv = cmdledgerv.ExecuteReader();
        if (orledgerv.Read())
        {
            ledgerrent = Convert.ToInt32(orledgerv["ledger_id"]);

        }
               string dayend=Session["dayend"].ToString();
               counterno=Convert.ToInt32(Session["counterid"]);
               userid = Convert.ToInt32(Session["userid"]);
               OdbcCommand cmdcounter = new OdbcCommand();
               cmdcounter.CommandType = CommandType.StoredProcedure;
               cmdcounter.Parameters.AddWithValue("tblname", "t_daily_transaction");
               cmdcounter.Parameters.AddWithValue("attribute", "sum(amount)as amount");
               cmdcounter.Parameters.AddWithValue("conditionv", "cash_caretake_id="+cashierid+" and counter_id=" + counterno + " and date='" + dayend + "' and liability_type='0'  and ledger_id!="+ledgerrent+" and ledger_id!='6' ");
               DataTable dttcounter = new DataTable();
               dttcounter = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdcounter);
               if (dttcounter.Rows.Count > 0)
                {
                    if (Convert.IsDBNull(dttcounter.Rows[0]["amount"]) == false)
                    {
                        Session["totalamount"] = Convert.ToInt32(dttcounter.Rows[0]["amount"]);
                        txtLiability.Text = dttcounter.Rows[0]["amount"].ToString();
                    }
                    else
                    {
                        txtLiability.Text = "0";

                    }
                }

            }
    # endregion

    # region 
    protected void btnClear_Click1(object sender, EventArgs e)
    {
        clear();
    }
     # endregion

    # region button close report
    protected void btnCloseReport_Click(object sender, EventArgs e)
    {
        pnlReports.Visible = false;
    }
     # endregion

    # region Daily  Income Report
    protected void lnkConsolidatedIncome_Click(object sender, EventArgs e)
    {

        try
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();


            }
            string daycolse1 =objcls.yearmonthdate(txtDaycloseDate.Text);
            DateTime dayclose2 = DateTime.Parse(daycolse1);

            string dayclose3 = dayclose2.ToString("dd MMM");

            DataTable dt;
            int casheirid = Convert.ToInt32(Session["cashierid"]);
            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string f2 = dts.ToString("dd/MM/yyyy");
            string dated = dts.ToString("yyyy-MM-dd");
            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "Daywisecollection" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);

            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            page.strRptMode ="Receiptledger";
            
            int total = 0;
            PdfPTable table = new PdfPTable(3);
            float[] c5 = { 5, 15, 15 };
            table.SetWidths(c5);

            OdbcCommand cmd31 = new OdbcCommand();
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_daily_transaction t,m_sub_budghead_ledger l,m_staff s");
            cmd31.Parameters.AddWithValue("attribute", "sum(amount) as amount,t.ledger_id,ledgername,date,cash_caretake_id,staffname");
            cmd31.Parameters.AddWithValue("conditionv", " cash_caretake_id=" + casheirid + " and l.ledger_id=t.ledger_id and date='" + daycolse1 + "' and s.staff_id=" + casheirid + "  and t.ledger_id!='5'  and t.ledger_id!='6' and  liability_type='0'  group by date, t.ledger_id  ");

            dt = objcls.SpDtTbl("CALL selectcond(?,?,?)",cmd31);
           
            string staff = "";
            try
            {
                staff = dt.Rows[0]["staffname"].ToString();
            }
            catch { }
                PdfPCell cell = new PdfPCell(new Phrase("DAILY  COLLECTION  OF " + staff + " " + "  ON  " + dayclose3, font12));
                cell.Colspan = 5;
                cell.HorizontalAlignment = 1;
                cell.Border = 1;
                table.AddCell(cell);

                doc.Add(table);

                OdbcCommand cmdk = new OdbcCommand("select sum(amount) as amount from t_daily_transaction where date='" + daycolse1 + "' and ledger_id!='6'  and ledger_id!='5' and cash_caretake_id=" + casheirid + " and liability_type='0'", conn);
                OdbcDataReader ork = cmdk.ExecuteReader();

                if (ork.Read())
                {
                    if (Convert.IsDBNull(ork["amount"]) == false)
                    {

                        total = Convert.ToInt32(ork["amount"]);

                    }

                }

                PdfPTable table1 = new PdfPTable(3);
                float[] c6 = { 5, 15, 15 };
                table1.SetWidths(c6);

                PdfPCell cell1w = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table1.AddCell(cell1w);
              
                PdfPCell cell2v = new PdfPCell(new Phrase(new Chunk("Ledger Name", font8)));
                table1.AddCell(cell2v);
                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                table1.AddCell(cell3);

                doc.Add(table1);
                int slno = 0;
                int i = 0;

                foreach (DataRow dr in dt.Rows)
                {
                    slno = slno + 1;
                    if (i > 30)
                    {
                        i = 0;
                        PdfPTable table2 = new PdfPTable(3);
                        float[] c1 = { 5, 15, 15 };
                        table2.SetWidths(c1);
                        PdfPCell cell1wf = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                        table2.AddCell(cell1wf);
                     
                        PdfPCell cell2x = new PdfPCell(new Phrase(new Chunk("Ledger Name", font8)));
                        table1.AddCell(cell2x);
                        PdfPCell cell3f = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                        table2.AddCell(cell3f);

                        doc.Add(table2);

                    }


                    PdfPTable table3 = new PdfPTable(3);
                    float[] c = { 5, 15, 15 };
                    table3.SetWidths(c);

                    PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table3.AddCell(cell4);

                    PdfPCell cell5n = new PdfPCell(new Phrase(new Chunk(dr["ledgername"].ToString(), font7)));
                    table3.AddCell(cell5n);

                    PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["amount"].ToString(), font7)));
                    table3.AddCell(cell6);
                    i++;
                    doc.Add(table3);

                }

                if (dt.Rows.Count > 0)
                {

                    PdfPTable tablef = new PdfPTable(3);

                    float[] colWidths23av1 = { 5, 15, 15 };
                    tablef.SetWidths(colWidths23av1);
                    PdfPCell cell1wf2 = new PdfPCell(new Phrase(new Chunk("Total", font8)));
                    cell1wf2.Colspan = 2;
                    cell1wf2.HorizontalAlignment = 2;

                    tablef.AddCell(cell1wf2);

                    PdfPCell cell1wf2h = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                    tablef.AddCell(cell1wf2h);

                    PdfPCell cell1wf2hd = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell1wf2hd.Colspan = 3;
                    cell1wf2hd.Border = 0;
                    tablef.AddCell(cell1wf2hd);

                    PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                    cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellfb.PaddingLeft = 20;
                    cellfb.Colspan = 3;
                    cellfb.MinimumHeight = 30;
                    cellfb.Border = 0;
                    tablef.AddCell(cellfb);

                    PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                    cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellf1b.PaddingLeft = 20;
                    cellf1b.Colspan = 3;
                    cellf1b.Border = 0;
                    tablef.AddCell(cellf1b);

                    PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                    cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellh2.PaddingLeft = 20;
                    cellh2.Border = 0;
                    cellh2.Colspan = 3;
                    tablef.AddCell(cellh2);

                    doc.Add(tablef);

                }
          
            doc.Close();
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Cashier liability report";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);

         
                        
        }
        catch
        {
            messagedisplay("Problem found", "kk");
        }
    }
    # endregion

    # region Rent Remmittance Report
    protected void lnkRentRemmittance_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        int ledgerunclaimdeposit = 0;
        OdbcCommand cmdledger1 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Rent Remmittance'", conn);
        OdbcDataReader orledger1 = cmdledger1.ExecuteReader();
        if (orledger1.Read())
        {
            ledgerunclaimdeposit = Convert.ToInt32(orledger1["ledger_id"]);

        }

        int total = 0;
      
        DataTable dt;
        int casheirid = Convert.ToInt32(Session["cashierid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dated = dts.ToString("yyyy-MM-dd");
        Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
        string pdfFilePath = Server.MapPath(".") + "/pdf/daywiserent10.pdf";
        Font font8 = FontFactory.GetFont("ARIAL", 9);
        Font font9 = FontFactory.GetFont("ARIAL", 11);

        pdfPage page = new pdfPage();
        PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
        wr.PageEvent = page;
        doc.Open();
        PdfPTable table = new PdfPTable(4);
        float[] colWidths23 = { 10, 20,20, 20 };
        table.SetWidths(colWidths23);
        table.TotalWidth = 400f;

        if ((txtFromDate.Text == "") || (txtToDate.Text == ""))
        {
            OdbcCommand cmd31 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_daily_transaction t,m_sub_budghead_ledger l,m_staff s");
            cmd31.Parameters.AddWithValue("attribute", "sum(amount)as amount,t.ledger_id,ledgername,date,cash_caretake_id,staffname");
            cmd31.Parameters.AddWithValue("conditionv", " cash_caretake_id=" + casheirid + " and l.ledger_id=t.ledger_id and date='" + dated + "' and s.staff_id=" + casheirid + "  and t.ledger_id=" + ledgerunclaimdeposit + "  group by date");
            OdbcDataAdapter da = new OdbcDataAdapter(cmd31);
            dt = new DataTable();
            da.Fill(dt);



            PdfPCell cell = new PdfPCell(new Phrase("DAY WISE COLLECTION OF RENT REMMITTANCE ON  " + f2, font9));
            cell.Colspan = 4;
            cell.HorizontalAlignment = 1;
            table.AddCell(cell);
            if (dt.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt.Rows[0]["amount"]);
                }
            }
            doc.Add(table);

        }
        else
        {
            string aa = objcls.yearmonthdate(txtFromDate.Text);
            string bb = objcls.yearmonthdate(txtToDate.Text);

            OdbcCommand cmd312 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd312.CommandType = CommandType.StoredProcedure;
            cmd312.Parameters.AddWithValue("tblname", "t_daily_transaction t,m_sub_budghead_ledger l,m_staff s");
            cmd312.Parameters.AddWithValue("attribute", "sum(amount) as amount, t.ledger_id,ledgername,date,cash_caretake_id ,staffname");
            cmd312.Parameters.AddWithValue("conditionv", " cash_caretake_id=" + casheirid + " and  s.staff_id=" + casheirid + " and l.ledger_id=t.ledger_id and date >='" + aa + "'  and date<='" + bb + "' and t.ledger_id="+ledgerunclaimdeposit+" group by date  order by date");
            OdbcDataAdapter dad = new OdbcDataAdapter(cmd312);
            dt = new DataTable();
            dad.Fill(dt);


            OdbcCommand cmd3121 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd3121.CommandType = CommandType.StoredProcedure;
            cmd3121.Parameters.AddWithValue("tblname", "t_daily_transaction t ,m_staff s");
            cmd3121.Parameters.AddWithValue("attribute", "sum(amount) as amount");
            cmd3121.Parameters.AddWithValue("conditionv", " cash_caretake_id=" + casheirid + " and date >='" + aa + "'  and date<='" + bb + "' and t.ledger_id=" + ledgerunclaimdeposit + " and s.staff_id=" + casheirid + " ");
            OdbcDataAdapter dad1 = new OdbcDataAdapter(cmd3121);
            DataTable  dt1 = new DataTable();
            dad1.Fill(dt1);
            if (dt1.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt1.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt1.Rows[0]["amount"]);
                }
            }
            
            
            
            PdfPCell cells = new PdfPCell(new Phrase("DAY WISE COLLECTION OF RENT REMITTANCE  ON  " + txtFromDate.Text.ToString() + "  TO " + txtToDate.Text, font9));
            cells.Colspan = 4;
            cells.HorizontalAlignment = 1;
            table.AddCell(cells);
            doc.Add(table);

        }
        PdfPTable table1 = new PdfPTable(4);
        float[] colWidths23a = { 10, 20, 20, 20 };
        table1.SetWidths(colWidths23a);
        table1.TotalWidth = 400f;
        PdfPCell cell1w = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
        table1.AddCell(cell1w);
        PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
        table1.AddCell(cell1);
        PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Cashier Name", font8)));
        table1.AddCell(cell2);
        
        PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
        table1.AddCell(cell3);

        doc.Add(table1);
        int slno = 0;
        int i = 0;
        foreach (DataRow dr in dt.Rows)
        {
            slno = slno + 1;
            if (i > 30)
            {
                i = 0;
                PdfPTable table2 = new PdfPTable(4);
                float[] colWidths231 = { 10, 20, 20, 20 };
                table2.SetWidths(colWidths231);
                table2.TotalWidth = 400f;
                PdfPCell cell1wf = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table2.AddCell(cell1wf);
                PdfPCell cell1f = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                table2.AddCell(cell1f);
                PdfPCell cell2f = new PdfPCell(new Phrase(new Chunk("Cashier Name", font8)));
                table2.AddCell(cell2f);
               
                PdfPCell cell3f = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                table2.AddCell(cell3f);

                doc.Add(table2);

            }


            PdfPTable table3 = new PdfPTable(4);
            float[] colWidths23av = { 10, 20, 20, 20 };
            table3.SetWidths(colWidths23av);
            

            PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font8)));
            table3.AddCell(cell4);


            DateTime dt5 = DateTime.Parse(dr["date"].ToString());
            string date1 = dt5.ToString("dd-MM-yyyy");
            PdfPCell cell4w = new PdfPCell(new Phrase(new Chunk(date1.ToString(), font8)));
            table3.AddCell(cell4w);

            PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(dr["staffname"].ToString(), font8)));
            table3.AddCell(cell5);
            
            PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["amount"].ToString(), font8)));
            table3.AddCell(cell6);
            i++;
            doc.Add(table3);

        }
        if (dt.Rows.Count > 0)
        {
            PdfPTable tablef = new PdfPTable(4);
            float[] colWidths23av1 = { 10, 20, 20, 20 };
            tablef.SetWidths(colWidths23av1);
            tablef.TotalWidth = 400f;
            
            PdfPCell cell1wf2 = new PdfPCell(new Phrase(new Chunk("Total", font8)));
            cell1wf2.Colspan = 3;
            cell1wf2.HorizontalAlignment = 2;

            tablef.AddCell(cell1wf2);

            PdfPCell cell1wf2h = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
            tablef.AddCell(cell1wf2h);

            doc.Add(tablef);
        }

        doc.Close();
        Random r = new Random();
        string PopUpWindowPage = "print.aspx?reportname=daywiserent10.pdf&Title=Day Wise Collection of RentRemmittance Ledger";
        string Script = "";
        Script += "<script id='PopupWindow'>";
        Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
        Script += "confirmWin.Setfocus()</script>";
        if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
            Page.RegisterClientScriptBlock("PopupWindow", Script);


    }
    # endregion
      
    # region Consolidated IncomeStatement report
    protected void lnkConsolidatedIncomeReport_Click(object sender, EventArgs e)
    {

        if ((txtFromDate.Text !="") && (txtToDate.Text !=""))
        {
            if (conn.State == ConnectionState.Closed)
            {

                conn.ConnectionString = strConnection;
                conn.Open();

            }

            string fromdate =objcls.yearmonthdate(txtFromDate.Text);
            string todate =objcls.yearmonthdate(txtToDate.Text);
            OdbcCommand cmdmalyear = new OdbcCommand("select mal_year,mal_year_id from  t_settings where   end_eng_date>='" + fromdate + "'  and start_eng_date<'" + todate + "'", conn);
            OdbcDataReader ormalyear = cmdmalyear.ExecuteReader();
            int malyear1 = 0, malyear2 = 0, malyear3 = 0;
            if (ormalyear.Read())
            {
                malyear1 = Convert.ToInt32(ormalyear["mal_year"]);
                malyearid = Convert.ToInt32(ormalyear["mal_year_id"]);
                Session["malyear"] = malyear1;
                Session["malyyearid"] = malyearid;

            }
            malyear2 = malyear1 - 1;
            malyear3 = malyear1 - 2;
            string[] totdate = new string[1000];
            string[] totdate1 = new string[1000];
            string[] totdate2 = new string[1000];
            OdbcCommand cmdselectdate = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmdselectdate.CommandType = CommandType.StoredProcedure;
            cmdselectdate.Parameters.AddWithValue("tblname", " t_liabilityregister");
            cmdselectdate.Parameters.AddWithValue("attribute", "  distinct dayend");
            cmdselectdate.Parameters.AddWithValue("conditionv","dayend>='"+fromdate+"' and dayend<='"+todate+"' order by dayend asc");

            OdbcDataAdapter da = new OdbcDataAdapter(cmdselectdate);
            DataTable dttdate = new DataTable();

            da.Fill(dttdate);
            int count = 0;
            if (dttdate.Rows.Count > 0)
            {

                for (int i = 0; i < dttdate.Rows.Count; i++)
                {
                  
                    DateTime date5 = DateTime.Parse(dttdate.Rows[i]["dayend"].ToString());
                    string date1 = date5.ToString("dd/MM/yyyy");
                    string dater = date5.ToString("MM/dd/yyyy");
                    DateTime date3 = DateTime.Parse(dater);
                    date1 =objcls.yearmonthdate(date1);

                    int year11 = date3.Year;
                    int year22 = year11 - 1;
                    int year33 = year11 - 2;
                    string prevyear = date3.Day + "/" + date3.Month + "/" + year22;
                    string prevyear1 = date3.Day + "/" + date3.Month + "/" + year33;

                    prevyear =objcls.yearmonthdate(prevyear);
                    prevyear1 =objcls.yearmonthdate(prevyear1);
                    totdate[i] = date1;
                    totdate1[i] = prevyear;
                    totdate2[i] = prevyear1;
                    count++;

                }


            }

            string fromdate1 =totdate1[0];
            string fromdate2 = totdate2[0];
         
            DataTable dttotalamount = new DataTable();
            dttotalamount.Columns.Clear();
            dttotalamount.Columns.Add("date", System.Type.GetType("System.String"));
            dttotalamount.Columns.Add("total", System.Type.GetType("System.String"));
            dttotalamount.Columns.Add("cumilative", System.Type.GetType("System.String"));
            dttotalamount.Columns.Add("year1", System.Type.GetType("System.String"));
            dttotalamount.Columns.Add("cum1", System.Type.GetType("System.String"));
            dttotalamount.Columns.Add("year2", System.Type.GetType("System.String"));
            dttotalamount.Columns.Add("cum2", System.Type.GetType("System.String"));

            for (int i = 0; i < count; i++)
            {


                string datea = totdate[i];

                OdbcCommand cmdselectdata = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdselectdata.CommandType = CommandType.StoredProcedure;
                cmdselectdata.Parameters.AddWithValue("tblname", "t_liabilityregister");
                cmdselectdata.Parameters.AddWithValue("attribute", "sum(total) as total ");
                cmdselectdata.Parameters.AddWithValue("conditionv", " dayend='"+datea+"' ");
                OdbcDataAdapter das = new OdbcDataAdapter(cmdselectdata);
                DataTable dttdate1 = new DataTable();
                das.Fill(dttdate1);
                int amount1 = 0, amountcum = 0, prevamount = 0, prevamount1 = 0,prevcum=0,prevcum1=0;

                if (dttdate1.Rows.Count > 0)
                {
                    if (Convert.IsDBNull(dttdate1.Rows[0]["total"]) == false)
                    {

                        amount1 = Convert.ToInt32(dttdate1.Rows[0]["total"]);

                    }

                }

                OdbcCommand cmdselectdata1 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdselectdata1.CommandType = CommandType.StoredProcedure;
                cmdselectdata1.Parameters.AddWithValue("tblname", " t_liabilityregister");
                cmdselectdata1.Parameters.AddWithValue("attribute", "sum(total)as total1 ");
                cmdselectdata1.Parameters.AddWithValue("conditionv", " dayend>='" + fromdate + "' and dayend<='" + datea + "' ");
                OdbcDataAdapter das1 = new OdbcDataAdapter(cmdselectdata1);
                DataTable dttdate11 = new DataTable();
                das1.Fill(dttdate11);

                if (dttdate11.Rows.Count > 0)
                {
                    if (Convert.IsDBNull(dttdate11.Rows[0]["total1"]) == false)
                    {

                        amountcum = Convert.ToInt32(dttdate11.Rows[0]["total1"]);

                    }

                }

                OdbcCommand cmdselectdata12 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdselectdata12.CommandType = CommandType.StoredProcedure;
                cmdselectdata12.Parameters.AddWithValue("tblname", " t_liabilityregister");
                cmdselectdata12.Parameters.AddWithValue("attribute", "sum(total) as total ");
                cmdselectdata12.Parameters.AddWithValue("conditionv", " dayend='" + totdate1[i] + "'");
                OdbcDataAdapter das12 = new OdbcDataAdapter(cmdselectdata12);
                DataTable dttdate112 = new DataTable();
                das12.Fill(dttdate112);

                if (dttdate112.Rows.Count > 0)
                {
                    if (Convert.IsDBNull(dttdate112.Rows[0]["total"]) == false)
                    {
                        string bb = totdate1[i];

                        prevamount = Convert.ToInt32(dttdate112.Rows[0]["total"]);

                    }


                }

                OdbcCommand cmdselectdata11 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdselectdata11.CommandType = CommandType.StoredProcedure;
                cmdselectdata11.Parameters.AddWithValue("tblname", " t_liabilityregister");
                cmdselectdata11.Parameters.AddWithValue("attribute", "sum(total) as total11 ");
                cmdselectdata11.Parameters.AddWithValue("conditionv", " dayend>='" + fromdate1 + "' and dayend<='" + totdate1[i] + "' ");
                OdbcDataAdapter das11 = new OdbcDataAdapter(cmdselectdata11);
                DataTable dttdate111 = new DataTable();
                das11.Fill(dttdate111);

                if (dttdate111.Rows.Count > 0)
                {
                    if (Convert.IsDBNull(dttdate111.Rows[0]["total11"]) == false)
                    {

                        prevcum = Convert.ToInt32(dttdate111.Rows[0]["total11"]);

                    }

                }
                                                  
                OdbcCommand cmdselectdata0 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdselectdata0.CommandType = CommandType.StoredProcedure;
                cmdselectdata0.Parameters.AddWithValue("tblname", " t_liabilityregister");
                cmdselectdata0.Parameters.AddWithValue("attribute", "sum(total)  as total22");
                cmdselectdata0.Parameters.AddWithValue("conditionv", " dayend='" + totdate2[i] + "'");
                OdbcDataAdapter das0 = new OdbcDataAdapter(cmdselectdata0);
                DataTable dttdate10 = new DataTable();
                das0.Fill(dttdate10);

                if (dttdate10.Rows.Count > 0)
                {
                    if (Convert.IsDBNull(dttdate10.Rows[0]["total22"]) == false)
                    {

                        prevamount1 = Convert.ToInt32(dttdate10.Rows[0]["total22"]);

                    }

                }

                string ff = totdate2[i];
                OdbcCommand cmdselectdata121 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmdselectdata121.CommandType = CommandType.StoredProcedure;
                cmdselectdata121.Parameters.AddWithValue("tblname", " t_liabilityregister");
                cmdselectdata121.Parameters.AddWithValue("attribute", "sum(total) as total112 ");
                cmdselectdata121.Parameters.AddWithValue("conditionv", " dayend>='" + fromdate2 + "' and dayend<='" + totdate2[i] + "' ");
                OdbcDataAdapter das121 = new OdbcDataAdapter(cmdselectdata121);
                DataTable dttdate1121 = new DataTable();
                das121.Fill(dttdate1121);

                if (dttdate1121.Rows.Count > 0)
                {
                    if (Convert.IsDBNull(dttdate1121.Rows[0]["total112"]) == false)
                    {

                        prevcum1=Convert.ToInt32(dttdate1121.Rows[0]["total112"]);

                    }

                }

                dttotalamount.Rows.Add();
                dttotalamount.Rows[i]["date"] = datea;
                if (amount1 == 0)
                {
                    dttotalamount.Rows[i]["total"] = "";
                }
                else
                {

                    dttotalamount.Rows[i]["total"] = amount1;
                }
                if (amountcum == 0)
                {
                    dttotalamount.Rows[i]["cumilative"] = "";
                }
                else
                {
                    dttotalamount.Rows[i]["cumilative"] = amountcum;
                }
                if (prevamount == 0)
                {
                    dttotalamount.Rows[i]["year1"] = "";
                }
                else
                {
                    dttotalamount.Rows[i]["year1"] = prevamount;
                }
                if (prevcum == 0)
                {
                    dttotalamount.Rows[i]["cum1"] = "";
                }
                else
                {
                    dttotalamount.Rows[i]["cum1"] = prevcum;
                }
                if (prevamount1 == 0)
                {
                    dttotalamount.Rows[i]["year2"] = "";

                }
                else
                {

                    dttotalamount.Rows[i]["year2"] = prevamount1;
                }
                if (prevcum1 == 0)
                {
                    dttotalamount.Rows[i]["cum2"] = "";
                }
                else
                {
                    dttotalamount.Rows[i]["cum2"] = prevcum1;
                }

 

            }
            DateTime datedt = DateTime.Now;
            string dt1 = datedt.ToString("dd  MMMM  yyyy");
            string time1 = datedt.ToString(" hh :mm tt");
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "collectionComparison" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;
            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 70);
         
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            page.strRptMode = "Collection Comparison";
            PdfPTable table = new PdfPTable(8);
            float[] colW11 = { 10, 30, 20, 20,20,20,20,20 };
            table.SetWidths(colW11);


            PdfPCell cell = new PdfPCell(new Phrase("Consolidated   Collection comparison report Taken on   " +dt1+" at "+time1 , font12));
            cell.Colspan = 8;
            cell.HorizontalAlignment = 1;
            cell.Border = 1;
            table.AddCell(cell);
            PdfPCell cellc1 = new PdfPCell(new Phrase("No", font9));
            cellc1.Rowspan = 2;
            cellc1.HorizontalAlignment = 1;
            table.AddCell(cellc1);


            PdfPCell cellc = new PdfPCell(new Phrase("Date", font9));
            cellc.HorizontalAlignment = 1;
            cellc.Rowspan = 2;
            table.AddCell(cellc);

            PdfPCell cella= new PdfPCell(new Phrase(malyear1.ToString(),font9 ));
            cella.Colspan = 2;
            cella.HorizontalAlignment = 1;
            table.AddCell(cella);
            
            PdfPCell cellb = new PdfPCell(new Phrase(malyear2.ToString(), font9));
            cellb.Colspan = 2;
            cellb.HorizontalAlignment = 1;
            table.AddCell(cellb);
            PdfPCell cell11q = new PdfPCell(new Phrase(malyear3.ToString(), font9));
            cell11q.Colspan = 2;
            cell11q.HorizontalAlignment = 1;
            table.AddCell(cell11q);

            PdfPCell cellxvvv = new PdfPCell(new Phrase("Day's Coln", font8));
            cellxvvv.HorizontalAlignment = 1;
            table.AddCell(cellxvvv);

            PdfPCell cellx = new PdfPCell(new Phrase("Cum Coln", font8));
            cellx.Colspan = 1;
            cellx.HorizontalAlignment = 1;
            table.AddCell(cellx);

            PdfPCell cell1h = new PdfPCell(new Phrase("Day's Coln", font8));
            cell1h.Colspan = 1;
            cell1h.HorizontalAlignment = 1;
            table.AddCell(cell1h);
                                     
            PdfPCell cell11n = new PdfPCell(new Phrase("Cum Coln", font8));
            cell11n.HorizontalAlignment = 1;
            table.AddCell(cell11n);
            PdfPCell cell1h1 = new PdfPCell(new Phrase("Day's Coln", font8));
            cell1h1.Colspan = 1;
            cell1h1.HorizontalAlignment = 1;
            table.AddCell(cell1h1);

            PdfPCell cell11n1 = new PdfPCell(new Phrase("Cum Coln", font8));
            cell11n1.HorizontalAlignment = 1;
            table.AddCell(cell11n1);
           
            doc.Add(table);

            
            int slno=0, ii=0;
              foreach (DataRow dr in dttotalamount.Rows )
              {

              slno = slno + 1;
              if (ii > 40)
                {
                  ii = 0;
                  doc.NewPage();
                  PdfPTable table1 = new PdfPTable(8);
                  float[] colW111 = { 10, 30, 20, 20, 20, 20, 20, 20 };
                  table1.SetWidths(colW111);

                  PdfPCell cell11v12 = new PdfPCell(new Phrase("No", font8));
                  cell11v12.Rowspan = 2;
                  cell11v12.HorizontalAlignment = 1;
                  table1.AddCell(cell11v12);


                  PdfPCell cell11v1 = new PdfPCell(new Phrase("Date", font8));
                  cell11v1.Rowspan = 2;
                  cell11v1.HorizontalAlignment = 1;
                  table1.AddCell(cell11v1);

                  PdfPCell cell11v = new PdfPCell(new Phrase(malyear1.ToString(), font8));
                  cell11v.Colspan = 2;
                  cell11v.HorizontalAlignment = 1;
                  table1.AddCell(cell11v);

                  PdfPCell cell112v = new PdfPCell(new Phrase(malyear2.ToString(), font8));
                  cell112v.Colspan = 2;
                  cell112v.HorizontalAlignment = 1;
                  table1.AddCell(cell112v);
                
                  PdfPCell cell11qv = new PdfPCell(new Phrase(malyear3.ToString(), font8));
                  cell11qv.Colspan = 2;
                  cell11qv.HorizontalAlignment = 1;
                  table1.AddCell(cell11qv);

                  PdfPCell cellxv = new PdfPCell(new Phrase("Total Coln", font8));
                  cellxv.Colspan = 1;
                  cellxv.HorizontalAlignment = 1;
                  table1.AddCell(cellxv);

                  PdfPCell cellk = new PdfPCell(new Phrase(" Total Cum Coln", font8));
                  cellk.Colspan = 1;
                  cellk.HorizontalAlignment = 1;
                  table1.AddCell(cellk);

                  PdfPCell cell1hv = new PdfPCell(new Phrase("Total Coln", font8));
                  cell1hv.Colspan = 1;
                  cell1hv.HorizontalAlignment = 1;
                  table1.AddCell(cell1hv);
                  
                  PdfPCell cell11ny = new PdfPCell(new Phrase("Total Cum Coln", font8));
                  cell11ny.HorizontalAlignment = 1;
                  table1.AddCell(cell11ny);

                  PdfPCell cell1hvb = new PdfPCell(new Phrase("Total Coln", font8));
                  cell1hvb.Colspan = 1;
                  cell1hvb.HorizontalAlignment = 1;
                  table1.AddCell(cell1hvb);

                  PdfPCell cell11nyb = new PdfPCell(new Phrase("Total Cum Coln", font8));
                  cell11nyb.HorizontalAlignment = 1;
                  table1.AddCell(cell11nyb);
                  doc.Add(table1);

                  
              }


              ii++;
                 
              PdfPTable table2 = new PdfPTable(8);
              float[] colW1111 = { 10, 30, 20, 20, 20, 20, 20, 20 };
              table2.SetWidths(colW1111);
              PdfPCell cell11v2d = new PdfPCell(new Phrase(slno.ToString(), font7));
              cell11v2d.HorizontalAlignment = 1;
              table2.AddCell(cell11v2d);
              DateTime dtd = DateTime.Parse (dr["date"].ToString());
              string datert = dtd.ToString("dd MMMM");

              PdfPCell cell11v2 = new PdfPCell(new Phrase(datert.ToString(), font7));
              cell11v2.HorizontalAlignment = 0;
              table2.AddCell(cell11v2);

              PdfPCell cell112v22 = new PdfPCell(new Phrase(dr["total"].ToString(), font7));
              cell112v22.Colspan = 1;
              cell112v22.HorizontalAlignment = 1;
              table2.AddCell(cell112v22);

              PdfPCell cellxv2 = new PdfPCell(new Phrase(dr["cumilative"].ToString(), font7));
              cellxv2.Colspan = 1;
              cellxv2.HorizontalAlignment = 1;
              table2.AddCell(cellxv2);

              PdfPCell cell11qv2 = new PdfPCell(new Phrase(dr["year1"].ToString(), font7));
              cell11qv2.HorizontalAlignment = 1;
              table2.AddCell(cell11qv2);

              PdfPCell cell11qv22 = new PdfPCell(new Phrase(dr["cum1"].ToString(), font7));
              cell11qv22.HorizontalAlignment = 1;
              table2.AddCell(cell11qv22);
                                
              PdfPCell cell11v21 = new PdfPCell(new Phrase(dr["year2"].ToString(), font7));
              cell11v21.HorizontalAlignment = 1;
              table2.AddCell(cell11v21);

              PdfPCell cell11v211 = new PdfPCell(new Phrase(dr["cum2"].ToString(), font7));
              cell11v211.HorizontalAlignment = 1;
              table2.AddCell(cell11v211);
              doc.Add(table2);
             

          }

          PdfPTable table4 = new PdfPTable(8);
          PdfPCell cellff = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
          cellff.HorizontalAlignment = Element.ALIGN_LEFT;
          cellff.PaddingLeft = 30;
          cellff.Colspan = 8;

          cellff.MinimumHeight = 30;
          cellff.Border = 0;
          table4.AddCell(cellff);

          PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
          cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
          cellf1.PaddingLeft = 30;
          cellf1.Colspan = 8;
          cellf1.Border = 0;
          table4.AddCell(cellf1);

          PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom  ", font8)));
          cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
          cellh2.PaddingLeft = 30;
          cellh2.Border = 0;
          cellh2.Colspan = 8;
          table4.AddCell(cellh2);

          doc.Add(table4);
          doc.Close();
          Random r = new Random();
          string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=OllectionComparison";
          string Script = "";
          Script += "<script id='PopupWindow'>";
          Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
          Script += "confirmWin.Setfocus()</script>";
          if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
              Page.RegisterClientScriptBlock("PopupWindow", Script); 



        }
        else
        {
            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Enter the From date or To date";
            ViewState["action"] = "warn12";
            ModalPopupExtender1.Show();
            this.ScriptManager1.SetFocus(btnOk);

        }


    }
    # endregion

    # region Security Deposit Ledger report
    protected void lnkSecuritydepositLedger_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        int securitydeposit = 0;
        OdbcCommand cmdledger1 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Security Deposit'", conn);
        OdbcDataReader orledger1 = cmdledger1.ExecuteReader();
        if (orledger1.Read())
        {
            securitydeposit = Convert.ToInt32(orledger1["ledger_id"]);

        }


        int total = 0;
        DataTable dt;
        int casheirid = Convert.ToInt32(Session["cashierid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dated = dts.ToString("yyyy-MM-dd");
        Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
        string pdfFilePath = Server.MapPath(".") + "/pdf/daysecurity.pdf";
        Font font8 = FontFactory.GetFont("ARIAL", 9);
        Font font9 = FontFactory.GetFont("ARIAL", 11);

        pdfPage page = new pdfPage();
        PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
        wr.PageEvent = page;
        doc.Open();
        PdfPTable table = new PdfPTable(4);
        float[] colW11 = { 10, 10, 10, 10 };
        table.SetWidths(colW11);
        if ((txtFromDate.Text == "") && (txtToDate.Text == ""))
        {
            OdbcCommand cmd31 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_daily_transaction t,m_sub_budghead_ledger l,m_staff s");
            cmd31.Parameters.AddWithValue("attribute", "sum(amount)as amount,t.ledger_id,ledgername,date,cash_caretake_id,staffname");
            cmd31.Parameters.AddWithValue("conditionv", " cash_caretake_id=" + casheirid + " and l.ledger_id=t.ledger_id and date='" + dated + "' and s.staff_id=" + casheirid + "  and t.ledger_id=" + securitydeposit + "  group by date");
            OdbcDataAdapter da = new OdbcDataAdapter(cmd31);
            dt = new DataTable();
            da.Fill(dt);

            if (dt.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt.Rows[0]["amount"]);
                }
            }

            PdfPCell cell = new PdfPCell(new Phrase("DAY WISE COLLECTION OF SECURITY DEPOSIT ON  " + f2, font9));
            cell.Colspan = 4;
            cell.HorizontalAlignment = 1;
            table.AddCell(cell);

            doc.Add(table);

        }
        else
        {
            string aa =objcls.yearmonthdate(txtFromDate.Text);
            string bb = objcls.yearmonthdate(txtToDate.Text);

            OdbcCommand cmd312 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd312.CommandType = CommandType.StoredProcedure;
            cmd312.Parameters.AddWithValue("tblname", "t_daily_transaction t,m_sub_budghead_ledger l,m_staff s");
            cmd312.Parameters.AddWithValue("attribute", "sum(amount)as amount, t.ledger_id,ledgername,date,cash_caretake_id ,staffname");
            cmd312.Parameters.AddWithValue("conditionv", " cash_caretake_id=" + casheirid + " and  s.staff_id=" + casheirid + " and l.ledger_id=t.ledger_id and date >='" + aa + "'  and date<='" + bb + "' and t.ledger_id=" + securitydeposit + " group by date order by date");
            OdbcDataAdapter dad = new OdbcDataAdapter(cmd312);
            dt = new DataTable();
            dad.Fill(dt);
            PdfPCell cells = new PdfPCell(new Phrase("DAY WISE COLLECTION OF SECURITY DEPOSIT  ON  " + txtFromDate.Text.ToString() + "  TO " + txtToDate.Text, font9));
            cells.Colspan = 4;
            cells.HorizontalAlignment = 1;
            table.AddCell(cells);

            doc.Add(table);
            OdbcCommand cmd3121 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd3121.CommandType = CommandType.StoredProcedure;
            cmd3121.Parameters.AddWithValue("tblname", "t_daily_transaction t ,m_staff s");
            cmd3121.Parameters.AddWithValue("attribute", "sum(amount) as amount");
            cmd3121.Parameters.AddWithValue("conditionv", " cash_caretake_id=" + casheirid + " and date >='" + aa + "'  and date<='" + bb + "' and t.ledger_id=" + securitydeposit + " and s.staff_id=" + casheirid + " ");
            OdbcDataAdapter dad1 = new OdbcDataAdapter(cmd3121);
            DataTable dt1 = new DataTable();
            dad1.Fill(dt1);


            if (dt1.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt1.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt1.Rows[0]["amount"]);
                }
            }



        }
        PdfPTable table1 = new PdfPTable(4);
        float[] colW1 = { 10, 10, 10, 10 };
        table1.SetWidths(colW1);

        PdfPCell cell1w = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
        table1.AddCell(cell1w);
        PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
        table1.AddCell(cell1);
        PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Cashier Name", font8)));
        table1.AddCell(cell2);
       
        PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
        table1.AddCell(cell3);

        doc.Add(table1);
        int slno = 0;
        int i = 0;
        foreach (DataRow dr in dt.Rows)
        {
            slno = slno + 1;
            if (i > 30)
            {
                i = 0;
                PdfPTable table2 = new PdfPTable(4);
                float[] colW = { 10, 10, 10, 10 };
                table2.SetWidths(colW);
                PdfPCell cell1wf = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table2.AddCell(cell1wf);
                PdfPCell cell1f = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                table2.AddCell(cell1f);
                PdfPCell cell2f = new PdfPCell(new Phrase(new Chunk("Cashier Name", font8)));
                table2.AddCell(cell2f);
               
                PdfPCell cell3f = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                table2.AddCell(cell3f);

                doc.Add(table2);

            }


            PdfPTable table3 = new PdfPTable(4);
            PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font8)));
            table3.AddCell(cell4);


            DateTime dt5 = DateTime.Parse(dr["date"].ToString());
            string date1 = dt5.ToString("dd-MM-yyyy");
            PdfPCell cell4w = new PdfPCell(new Phrase(new Chunk(date1.ToString(), font8)));
            table3.AddCell(cell4w);

            PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(dr["staffname"].ToString(), font8)));
            table3.AddCell(cell5);
          

            PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["amount"].ToString(), font8)));
            table3.AddCell(cell6);
            i++;
            doc.Add(table3);

        }
        if (dt.Rows.Count  > 0)
        {
            PdfPTable tablef = new PdfPTable(4);

            float[] colWidths23av1 = { 10, 10, 10, 10 };
            tablef.SetWidths(colWidths23av1);



            PdfPCell cell1wf2 = new PdfPCell(new Phrase(new Chunk("Total", font8)));
            cell1wf2.Colspan = 3;
            cell1wf2.HorizontalAlignment = 2;

            tablef.AddCell(cell1wf2);



            PdfPCell cell1wf2h = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
            tablef.AddCell(cell1wf2h);


            doc.Add(tablef);
        }
        doc.Close();
      
        Random r = new Random();
        string PopUpWindowPage = "print.aspx?reportname=daysecurity.pdf&Title=Day Wise Collection of RentRemmittance Ledger";
        string Script = "";
        Script += "<script id='PopupWindow'>";
        Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
        Script += "confirmWin.Setfocus()</script>";
        if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
            Page.RegisterClientScriptBlock("PopupWindow", Script);


    }
    # endregion

    # region Button Yes1 Click
    protected void  btnYes1_Click(object sender, EventArgs e)
    {
    flag = 1;
    DonorCheckOut();



}
    # endregion

    # region Button No2 Click
protected void  btnNo2_Click(object sender, EventArgs e)
{
    AbscondingCheckoutCaretakerLiability();
}
# endregion

    # region Button No3 click


protected void  btnNo3_Click(object sender, EventArgs e)
{

    flag = 1;
    CheckOut();


}
# endregion

    # region Donor check Out
public void DonorCheckOut()
{

    try
    {

        # region Declarations
        cashierid = Convert.ToInt32(Session["cashierid"]);
        Session["receiptforforcevacating"] = 0;
        string customer = Session["customer"].ToString();
        int allocid = Convert.ToInt32(Session["allocid"]);
      
        ViewState["action"] = "NILL";
        userid = Convert.ToInt32(Session["userid"]);
        pnlYesNo2.Visible = false;
        int counter = Convert.ToInt32(Session["counterid"]);
    
        int notreturn = Convert.ToInt32(Session["notreturn"]);
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        odbTrans = conn.BeginTransaction();

        int overcharge = Convert.ToInt32(Session["overcharge"]);
        flag = 0;

        int donorid = Convert.ToInt32(Session["donorid"]);
        int servicecharge = Convert.ToInt32(Session["servicecharge"]);
        int rentt;
        rentt = Convert.ToInt32(Session["extraamount"]);
        string actualdate = txtVacatingDate.Text.ToString();
        actualdate = objcls.yearmonthdate(actualdate);
        actualdate = actualdate + " " + txtVecatingTime.Text;
        DateTime actualdate1 = DateTime.Parse(actualdate);
        string actualdate2 = actualdate1.ToString("yyyy-MM-dd hh:mm:ss");
        string dayendd = Session["dayend"].ToString();
   
        DateTime datenow = DateTime.Now;
        string f22 = datenow.ToString("dd/MM/yyyy");
        string datetoday =objcls. yearmonthdate(f22);
        datetoday = datetoday + " " + DateTime.Now.ToString("HH:mm:ss");
        string customertype = Session["customer"].ToString();

        DateTime expdate = DateTime.Parse(Session["expdate"].ToString());

        string remark = "";
        DateTime actualdate11 = DateTime.Parse(actualdate);
        string actualdate21 = actualdate1.ToString("yyyy-MM-dd hh:mm:ss");

        # endregion

        # region Update Key inventory

        if (rdoKeyReturn.Text == "No")
        {
            UpdateKeyInventory();
        }
        # endregion

        # region Ledger Id Calculation
        int ledgerrent = 0, ledgerunclaimdeposit = 0, ledgerkeynot = 0, ledgerroomcondition = 0;
        OdbcCommand cmdledger = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Overstay Rent'", conn);
        cmdledger.Transaction = odbTrans;
        OdbcDataReader orledger = cmdledger.ExecuteReader();
        if (orledger.Read())
        {
            ledgerrent = Convert.ToInt32(orledger["ledger_id"]);

        }
        OdbcCommand cmdledger1 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Unclaimed Security Deposit'", conn);
        cmdledger1.Transaction = odbTrans;
        OdbcDataReader orledger1 = cmdledger1.ExecuteReader();
        if (orledger1.Read())
        {
            ledgerunclaimdeposit = Convert.ToInt32(orledger1["ledger_id"]);

        }

        OdbcCommand cmdledger2 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Penality for Key Not Returned'", conn);
        cmdledger2.Transaction = odbTrans;
        OdbcDataReader orledger2 = cmdledger2.ExecuteReader();
        if (orledger2.Read())
        {
            ledgerkeynot = Convert.ToInt32(orledger2["ledger_id"]);

        }

        OdbcCommand cmdledger3 = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Penality for Room Damages'", conn);
        cmdledger3.Transaction = odbTrans;
        OdbcDataReader orledger3 = cmdledger3.ExecuteReader();
        if (orledger3.Read())
        {
            ledgerroomcondition = Convert.ToInt32(orledger3["ledger_id"]);

        }

        int liability1 = 0;
        # endregion



        liability1 = Convert.ToInt32(txtBalanceAmount.Text);
        if (HiddenField1.Value == "0")
        {
            int deposit5 = Convert.ToInt32(Session["deposit"]);
            liability1 = liability1 + deposit5;

        }

        int othercharge = Convert.ToInt32(Session["othercharge"]);
        if (othercharge != 0)
        {

            liability1 = liability1 - othercharge;
        }

        int  value3 = 0;

        # region Force Vacating With actualdate<proposed for key not return

        if (rdoKeyReturn.Text == "No")
        {
            int xx = Convert.ToInt32(txtKeynotReturnCharge.Text);
            if (xx > 0)
            {

                if (expdate > actualdate11)
                {
         
                    int deposit6 = Convert.ToInt32(Session["deposit"]);
                    int x = Convert.ToInt32(txtKeynotReturnCharge.Text);
                    value3 = x;
                    int y = x - deposit6;
                    SavingDataToLedger(ledgerkeynot, deposit6, cashierid, 0);
                    if (y > 0)
                    {
                        txtKeynotReturnCharge.Text = y.ToString();

                    }
                    else
                    {
                        txtKeynotReturnCharge.Text = "0";

                    }
                    remark = "Key penality";
                }
            }
        }

        # endregion

        # region Adding amount Penality ledgers
        int keyexecutiveflag = 0;
        try
        {
            keyexecutiveflag = Convert.ToInt32(Session["executekey"]);

        }
        catch { }

        if (txtKeynotReturnCharge.Text != "") 
        {
            int value = int.Parse(txtKeynotReturnCharge.Text);
            SavingDataToLedger(ledgerkeynot, value, donorid, 1);

        }
        if (txtRoomNotGoodCondition.Text != "")
        {
            int value = int.Parse(txtRoomNotGoodCondition.Text);
            SavingDataToLedger(ledgerroomcondition, value, donorid, 1);

        }
        # endregion
        int transid = 0;

        # region adding Extrarent to ledger
        if (liability1 > 0)
        {

            OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counter + " and cash_caretake_id=" + donorid + " and ledger_id=" + ledgerrent + " and liability_type='2'", conn);
            cmn.Transaction = odbTrans;
            OdbcDataReader orn = cmn.ExecuteReader();
            if (orn.Read())
            {

                int amount = Convert.ToInt32(orn["amount"]);
                amount = amount + liability1;
                OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                cmd3.CommandType = CommandType.StoredProcedure;
                cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
                cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + donorid + "  and date='" + dayendd + "' and  counter_id=" + counter + " and ledger_id=" + ledgerrent + "  and  liability_type='2'");
                cmd3.Transaction = odbTrans;
                cmd3.ExecuteNonQuery();



            }
            else
            {

                OdbcCommand cmd48 = new OdbcCommand("CALL selectdata(?,?)", conn);
                cmd48.CommandType = CommandType.StoredProcedure;
                cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
                cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                cmd48.Transaction = odbTrans;
                OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmd48);
                DataTable dtt48 = new DataTable();
                dacnt48.Fill(dtt48);
                if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
                {

                    transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                    transid = transid + 1;

                }
                else
                {
                    transid = 1;

                }

                OdbcCommand cmdliability = new OdbcCommand("CALL savedata(?,?)", conn);
                cmdliability.CommandType = CommandType.StoredProcedure;
                cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
                cmdliability.Parameters.AddWithValue("val", "" + transid + ",'2', " + donorid + "," + counter + ",'0'," + ledgerrent + "," + liability1 + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                cmdliability.Transaction = odbTrans;
                cmdliability.ExecuteNonQuery();


            }



        }
        # endregion

        # region Security deposit updation
        if (HiddenField1.Value == "1")
        {
            Session["deporet"] = depo;

            con1 = 0;

            remark = "Inmates absconding ";

            try
            {
                int depositreturn = 0;
                Session["depositreturn"] = depositreturn;
                int dep = Convert.ToInt32(Session["deposit"]);

                OdbcCommand cmn = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counter + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerunclaimdeposit + "", conn);
                cmn.Transaction = odbTrans;
                OdbcDataReader orn = cmn.ExecuteReader();
                if (orn.Read())
                {

                    int amount = Convert.ToInt32(orn["amount"]);
                    amount = amount + dep;
                    OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd3.CommandType = CommandType.StoredProcedure;
                    cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
                    cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "' ");
                    cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counter + " and ledger_id=" + ledgerunclaimdeposit + "");
                    cmd3.Transaction = odbTrans;
                    cmd3.ExecuteNonQuery();


                }
                else
                {
                    OdbcCommand cmd481 = new OdbcCommand("CALL selectdata(?,?)", conn);
                    cmd481.CommandType = CommandType.StoredProcedure;
                    cmd481.Parameters.AddWithValue("tblname", "t_daily_transaction");
                    cmd481.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
                    cmd481.Transaction = odbTrans;
                    OdbcDataAdapter dacnt481 = new OdbcDataAdapter(cmd481);
                    DataTable dtt481 = new DataTable();
                    dacnt481.Fill(dtt481);
                    if (Convert.IsDBNull(dtt481.Rows[0]["trans_id"]) == false)
                    {

                        transid = Convert.ToInt32(dtt481.Rows[0]["trans_id"]);
                        transid = transid + 1;

                    }
                    else
                    {
                        transid = 1;

                    }


                    OdbcCommand cmddeposit = new OdbcCommand("CALL savedata(?,?)", conn);
                    cmddeposit.CommandType = CommandType.StoredProcedure;
                    cmddeposit.Parameters.AddWithValue("tblname", "t_daily_transaction");
                    cmddeposit.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counter + ",'0'," + ledgerunclaimdeposit + "," + dep + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
                    cmddeposit.Transaction = odbTrans;
                    cmddeposit.ExecuteNonQuery();

                }

                updatedeposit();

            }

            catch (Exception ex)
            { }
            depo = 0;
        }


        else if (HiddenField1.Value == "0")
        {
            Session["deporet"] = depo;

            con1 = 1;
            try
            {
                int without = Convert.ToInt32(Session["withoutiddep"]);


                dep = Convert.ToInt32(Session["deposit"]);
                int depositreturn = dep;
                Session["depositreturn"] = depositreturn;

                malyear = Convert.ToInt32(Session["malyear"]);
                malyearid = Convert.ToInt32(Session["malyyearid"]);

                DateTime cur2 = DateTime.Now;
                int currentyear = cur2.Year;

                int curseasonid = Convert.ToInt32(Session["seasonid"]);
                int depoo = Convert.ToInt32(Session["depo"]);
                OdbcCommand cmd391 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd391.CommandType = CommandType.StoredProcedure;
                cmd391.Parameters.AddWithValue("tblname", "t_seasondeposit");
                cmd391.Parameters.AddWithValue("attribute", "totaldeposit");
                cmd391.Parameters.AddWithValue("conditionv", "season_id =" + curseasonid + " and mal_year_id=" + malyearid + " and  cashier_id=" + cashierid + "");
                cmd391.Transaction = odbTrans;
                OdbcDataAdapter dacnt391 = new OdbcDataAdapter(cmd391);
                DataTable dtt391 = new DataTable();
                dacnt391.Fill(dtt391);
                int se = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
                se = se - dep;
            
                OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
                cmd826.CommandType = CommandType.StoredProcedure;
                cmd826.Parameters.AddWithValue("tablename", "t_seasondeposit");
                cmd826.Parameters.AddWithValue("valu", "totaldeposit=" + se + " ");
                cmd826.Parameters.AddWithValue("convariable", "season_id=" + curseasonid + " and mal_year_id=" + malyearid + " and casheier_id=" + cashierid + " ");
                cmd826.Transaction = odbTrans;
                cmd826.ExecuteNonQuery();
            }
            catch (Exception ex)
            { }
        }


        # endregion

        //# region UPDATING Room allocation table,Room  vacate table and room master;

        # region Insert into vacating table....................

        try
        {
            int depp = Convert.ToInt32(Session["depositreturn"]);

            int vacateid = 0;
            OdbcCommand cmdselect1 = new OdbcCommand("CALL selectdata(?,?)", conn);
            cmdselect1.CommandType = CommandType.StoredProcedure;
            cmdselect1.Parameters.AddWithValue("tblname", "t_roomvacate");
            cmdselect1.Parameters.AddWithValue("attribute", "max(vacate_id)as vacate_id ");
            cmdselect1.Transaction = odbTrans;
            OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmdselect1);
            DataTable dtt48 = new DataTable();
            dacnt48.Fill(dtt48);
            if (Convert.IsDBNull(dtt48.Rows[0]["vacate_id"]) == false)
            {

                vacateid = Convert.ToInt32(dtt48.Rows[0]["vacate_id"]);
                vacateid = vacateid + 1;

            }
            else
            {
                vacateid = 1;

            }

            int keyret = 1, rommcond = 1, roomcomplaint = 0;
            if (rdoKeyReturn.Text == "No")
            {
                keyret = 0;

            }
            if (rdoComplaints.Text == "Yes")
            {
                roomcomplaint = 1;

            }
            if (rdoRoomCondition.Text == "No")
            {
                rommcond = 0;
            }
            string vacateno = CalculateVacateid();


            int othercharge1 = Convert.ToInt32(Session["othercharge"].ToString());
            int mn = Convert.ToInt32(Session["overcharge"]);
            int key1 = 0, damage1 = 0;
            if (txtKeynotReturnCharge.Text != "")
            {
                key1 = Convert.ToInt32(txtKeynotReturnCharge.Text);

            }
            if (txtRoomNotGoodCondition.Text != "")
            {
                damage1 = Convert.ToInt32(txtRoomNotGoodCondition.Text);

            }

            if (flag == 1)
            {
              
            }
            int overridedeposit = 0;
            try
            {
                if (Convert.ToInt32(Session["execute"]) == 1)
                {

                    overridedeposit = 1;

                }
            }
            catch { }

            int overridedkey = 0;
            try
            {
                if (Convert.ToInt32(Session["execute"]) == 1)
                {

                    overridedkey = 1;

                }
            }
            catch { }


            int editreciept = 0;
            try
            {
                if (Convert.ToInt32(Session["editreciept"]) == 1)
                {

                    editreciept = 1;

                }
            }
            catch { }

            int edit = 0;
            if (Convert.ToInt32(Session["edit"]) == 1)
            {

                edit = 1;
            }
            OdbcCommand cmdsave = new OdbcCommand("CALL savedata(?,?)", conn);
            cmdsave.CommandType = CommandType.StoredProcedure;
            cmdsave.Parameters.AddWithValue("tblname", "t_roomvacate");
            if (edit == 1)
            {
                string sqlsave = "" + vacateid + ",'" + dayendd + "'," + allocid + "," + userid + ",null," + overcharge + ",'" + "" + "'," + othercharge1 + ", "
                + " '" + actualdate2 + "'," + 0 + "," + 0 + "," + keyret + ", " + key1 + "," + con1 + ", " + damage1 + ", " + rommcond + "," + roomcomplaint + ", "
                + " " + 1 + ",'2', " + depp + "," + Convert.ToInt32(txtBalanceAmount.Text) + "," + Convert.ToInt32(txtGrossAmount.Text) + "," + counter + "," + userid + ","
                + " '" + datetoday + "','" + remark.ToString() + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";
                cmdsave.Parameters.AddWithValue("val", sqlsave);
            }
            else
            {
                string sqlsave = "" + vacateid + ",'" + dayendd + "'," + allocid + ",null,null," + overcharge + ",'" + "" + "'," + othercharge1 + ", "
                + " '" + actualdate2 + "'," + 0 + "," + 0 + "," + keyret + ", " + key1 + "," + con1 + ", " + damage1 + ", " + rommcond + ", "
                + " " + roomcomplaint + "," + 1 + ", '2'," + depp + "," + Convert.ToInt32(txtBalanceAmount.Text) + ", "
                + " " + Convert.ToInt32(txtGrossAmount.Text) + "," + counter + "," + userid + ",'" + datetoday + "', "
                + " '" + remark.ToString() + "','" + overridedeposit.ToString() + "','" + overridedkey.ToString() + "','" + editreciept.ToString() + "'";
                cmdsave.Parameters.AddWithValue("val", sqlsave);

            }

            cmdsave.Transaction = odbTrans;
            cmdsave.ExecuteNonQuery();

        }
        catch
        {
        }
        # endregion

        # region Update RoomAllocation table and roommaster

        OdbcCommand cmdupdatealloc = new OdbcCommand("CALL updatedata(?,?,?)", conn);
        cmdupdatealloc.CommandType = CommandType.StoredProcedure;
        cmdupdatealloc.Parameters.AddWithValue("tablename", "t_roomallocation");
        cmdupdatealloc.Parameters.AddWithValue("valu", "roomstatus=" + 1 + "");
        cmdupdatealloc.Parameters.AddWithValue("convariable", "adv_recieptno=" + int.Parse(txtAdRecieptNo.Text) + " ");
        cmdupdatealloc.Transaction = odbTrans;
        cmdupdatealloc.ExecuteNonQuery();
        DateTime date = DateTime.Now;
        try
        {
            OdbcCommand cmdupdateroom = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmdupdateroom.CommandType = CommandType.StoredProcedure;
            cmdupdateroom.Parameters.AddWithValue("tablename", "m_room");
            cmdupdateroom.Parameters.AddWithValue("valu", "roomstatus=" + 1 + ",housekeepstatus=" + 0 + ", updateddate='" + datetoday + "'");
            cmdupdateroom.Parameters.AddWithValue("convariable", "build_id=" + cmbBuilding.SelectedValue + " and roomno=" + int.Parse(txtRoomNo.Text) + "");
            cmdupdateroom.Transaction = odbTrans;
            cmdupdateroom.ExecuteNonQuery();

        }
        catch (Exception ex)
        { }

        # endregion................

        //HouseKeepingInsertion();
        flag = 0;

        odbTrans.Commit();

        SeaonDepositLoad();
        # region Message Display
        CalulatingCounterLiability();
        Session["executedeposit"] = 0;
        lblHead.Text = "Tsunami ARMS -Confirmation";
        pnlOk.Visible = true;
        pnlYesNo.Visible = false;
        lblOk.Text = "Successfully Checked Out";
        ViewState["action"] = "warnn";
        ModalPopupExtender1.Show();
        this.ScriptManager1.SetFocus(btnOk);

        # endregion
    }
    catch
    {
        odbTrans.Rollback();
        messagedisplay("Problem occured during check out", "warnnf");

    }

    }
# endregion

    # region Button Executive overrride Click
    protected void btnExecutive_Click(object sender, EventArgs e)
    {
       
        pnlLogin.Visible = true;
        rdoKey.Visible = true;
        rdodeposit.Visible = true;
       


    }
    # endregion

    # region Link Edit receipt no
    protected void lnkEditRecieptno_Click(object sender, EventArgs e)
    {
        pnlLogin.Visible = true;
        int executeflag = 4;
        Session["executeflag"] = executeflag;
    }
    # endregion

    # region Link Edit Vacating Date click
    protected void lnkDateEdit_Click(object sender, EventArgs e)
    {   
        int executeflag = 3;
        Session["executeflag"] = executeflag;
        pnlLogin.Visible = true;
    }
    # endregion

    # region Button Key penalityclick

    protected void btnKeyPenality_Click(object sender, EventArgs e)
    {
      
    }
    # endregion

    # region 
    protected void btnDeposit_Click(object sender, EventArgs e)
    {
        
    }
# endregion

    # region Executive Override Deposit
    protected void lnkExecutivePay_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        } 
        
        DateTime gh = DateTime.Now;
        string transtim = gh.ToString("dd-MM-yyyy HH-mm");
        string ch = "Executiveoverridepaydeposit" + transtim.ToString() + ".pdf";
        string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

        string staff = "";
        int total = 0;
        DataTable dt;
        int casheirid = Convert.ToInt32(Session["cashierid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dated = dts.ToString("yyyy-MM-dd");
        Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
        Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
        Font font7 = FontFactory.GetFont("ARIAL", 9);
        Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
        Font font9 = FontFactory.GetFont("ARIAL", 10, 1);

        pdfPage page = new pdfPage();
        PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
        wr.PageEvent = page;
        doc.Open();
        PdfPTable table = new PdfPTable(3);
        float[] colW11 = { 10, 150, 200 };
        table.SetWidths(colW11);
        table.TotalWidth = 400f;
        table.LockedWidth = true;
        if ((txtFromDate.Text == "") ||(txtToDate.Text == ""))
        {
            OdbcCommand cmd31 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_roomvacate,m_staff s");
            cmd31.Parameters.AddWithValue("attribute", "sum(retdepamount)as amount, dayend,staffname");
            cmd31.Parameters.AddWithValue("conditionv", " dayend='" + dated + "' and s.staff_id=edit_userid  and dep_override='1' group by dayend" );
            OdbcDataAdapter da = new OdbcDataAdapter(cmd31);
            dt = new DataTable();
            da.Fill(dt);
           
            if (dt.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt.Rows[0]["amount"]);
                    staff = dt.Rows[0]["staffname"].ToString();
                }
            }
            
            PdfPCell cell = new PdfPCell(new Phrase("Executive override Pay for Deposit retun of  " +staff+ " On " + f2, font12));
            cell.Colspan = 4;
            cell.HorizontalAlignment = 1;
            table.AddCell(cell);

            doc.Add(table);

        }
        else
        {
            string aa =objcls.yearmonthdate(txtFromDate.Text);
            string bb =objcls.yearmonthdate(txtToDate.Text);

            OdbcCommand cmd31 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_roomvacate,m_staff s");
            cmd31.Parameters.AddWithValue("attribute", "sum(retdepamount)as amount, dayend,staffname");
            cmd31.Parameters.AddWithValue("conditionv", " dayend >='" + aa + "'  and dayend<='" + bb + "' and s.staff_id=edit_userid and dep_override='1'   group by dayend");
            OdbcDataAdapter dad1 = new OdbcDataAdapter(cmd31);
            dt = new DataTable();
            dad1.Fill(dt);
          
            if (dt.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt.Rows[0]["amount"]);
                }
            }

            OdbcCommand cmd312 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd312.CommandType = CommandType.StoredProcedure;
            cmd312.Parameters.AddWithValue("tblname", "t_roomvacate,m_staff s");
            cmd312.Parameters.AddWithValue("attribute", "sum(retdepamount)as amount, dayend,staffname");
            cmd312.Parameters.AddWithValue("conditionv", " dayend >='" + aa + "'  and dayend<='" + bb + "' and s.staff_id=edit_userid and dep_override='1'   group by dayend ");
                    
            OdbcDataAdapter dad = new OdbcDataAdapter(cmd312);
            dt = new DataTable();
            dad.Fill(dt);
            PdfPCell cells = new PdfPCell(new Phrase("Executive override Pay for Deposit retun of  " +staff+ " From " + txtFromDate.Text.ToString() + "  TO " + txtToDate.Text, font12));
            cells.Colspan = 3;
            cells.HorizontalAlignment = 1;
            table.AddCell(cells);

            doc.Add(table);
          


            if (dt.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt.Rows[0]["amount"]);
                }
            }



        }
        PdfPTable table1 = new PdfPTable(3);
        float[] colW1 = { 10, 10, 10 };
        table1.SetWidths(colW1);
        table1.TotalWidth = 400f;
        table1.LockedWidth = true;
        PdfPCell cell1w = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
        table1.AddCell(cell1w);
        PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
        table1.AddCell(cell1);
    
        PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
        table1.AddCell(cell3);

        doc.Add(table1);
        int slno = 0;
        int i = 0;
        foreach (DataRow dr in dt.Rows)
        {
            slno = slno + 1;
            if (i > 30)
            {
                i = 0;
                PdfPTable table2 = new PdfPTable(3);
                float[] colW = { 10, 10, 10};
                table2.SetWidths(colW);
                table2.TotalWidth = 400f;
                table2.LockedWidth = true;
                PdfPCell cell1wf = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table2.AddCell(cell1wf);
                PdfPCell cell1f = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                table2.AddCell(cell1f);
              
                PdfPCell cell3f = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                table2.AddCell(cell3f);

                doc.Add(table2);

            }
            
            PdfPTable table3 = new PdfPTable(3);

            table3.TotalWidth = 400f;
            table3.LockedWidth = true;
            PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
            table3.AddCell(cell4);


            DateTime dt5 = DateTime.Parse(dr["dayend"].ToString());
            string date1 = dt5.ToString("dd-MM-yyyy");
            PdfPCell cell4w = new PdfPCell(new Phrase(new Chunk(date1.ToString(), font7)));
            table3.AddCell(cell4w);

            PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["amount"].ToString(), font7)));
            table3.AddCell(cell6);
            i++;
            doc.Add(table3);

        }
        if (dt.Rows.Count > 0)
        {
            PdfPTable tablef = new PdfPTable(3);
            float[] colWidths23av1 = { 10, 10, 10 };
            tablef.SetWidths(colWidths23av1);
            tablef.TotalWidth= 400f;
            tablef.LockedWidth = true;

            PdfPCell cell1wf2 = new PdfPCell(new Phrase(new Chunk("Total", font8)));
            cell1wf2.Colspan = 2;
            cell1wf2.HorizontalAlignment = 2;
            tablef.AddCell(cell1wf2);
            PdfPCell cell1wf2h = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
            tablef.AddCell(cell1wf2h);
            doc.Add(tablef);
        }
        doc.Close();
        
        Random r = new Random();
        string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=Day Wise Collection of RentRemmittance Ledger";
        string Script = "";
        Script += "<script id='PopupWindow'>";
        Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
        Script += "confirmWin.Setfocus()</script>";
        if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
            Page.RegisterClientScriptBlock("PopupWindow", Script);
    }
    # endregion

    # region Executive Override Key Charge Report
    protected void lnkExecutKeyReturn_Click(object sender, EventArgs e)
    {
         if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();

        }
        string staff = "";
        int total = 0;
        DataTable dt;
        int casheirid = Convert.ToInt32(Session["cashierid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dated = dts.ToString("yyyy-MM-dd");
        Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
        string pdfFilePath = Server.MapPath(".") + "/pdf/executivepaykey.pdf";
        Font font8 = FontFactory.GetFont("ARIAL", 9);
        Font font9 = FontFactory.GetFont("ARIAL", 11);

        pdfPage page = new pdfPage();
        PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
        wr.PageEvent = page;
       
        doc.Open();
        PdfPTable table = new PdfPTable(3);
        float[] colW11 = { 10, 10, 10 };
        table.SetWidths(colW11);
        if ((txtFromDate.Text == "") || (txtToDate.Text == ""))
        {
            OdbcCommand cmd31 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_roomvacate,m_staff s");
            cmd31.Parameters.AddWithValue("attribute", "sum(retdepamount)as amount , dayend,staffname");
            cmd31.Parameters.AddWithValue("conditionv", " dayend='" + dated + "' and s.staff_id=edit_userid  and key_override='1' group by dayend  " );
            OdbcDataAdapter da = new OdbcDataAdapter(cmd31);
            dt = new DataTable();
            da.Fill(dt);
           
            if (dt.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt.Rows[0]["amount"]);
                    staff = dt.Rows[0]["staffname"].ToString();
                }
            }

            PdfPCell cell = new PdfPCell(new Phrase("Executive override Pay for Deposit retun  with key penality of  " +staff+ " On " + f2, font9));
            cell.Colspan = 4;
            cell.Border = 0;
            cell.HorizontalAlignment = 1;
          
            table.AddCell(cell);

            doc.Add(table);

        }
        else
        {
            string aa =objcls.yearmonthdate(txtFromDate.Text);
            string bb =objcls.yearmonthdate(txtToDate.Text);

            OdbcCommand cmd31 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_roomvacate,m_staff s");
            cmd31.Parameters.AddWithValue("attribute", "sum(retdepamount)as amount , dayend,staffname");
            cmd31.Parameters.AddWithValue("conditionv", " dayend >='" + aa + "'  and dayend<='" + bb + "' and s.staff_id=edit_userid and key_override='1' group by dayend");
            OdbcDataAdapter dad1 = new OdbcDataAdapter(cmd31);
            dt = new DataTable();
            dad1.Fill(dt);
          
            if (dt.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt.Rows[0]["amount"]);
                }
            }


            OdbcCommand cmd312 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd312.CommandType = CommandType.StoredProcedure;
            cmd312.Parameters.AddWithValue("tblname", "t_roomvacate,m_staff s");
            cmd312.Parameters.AddWithValue("attribute", "sum(retdepamount)as amount, dayend,staffname");
            cmd312.Parameters.AddWithValue("conditionv", " dayend >='" + aa + "'  and dayend<='" + bb + "' and s.staff_id=edit_userid  and key_override='1' group by dayend ");
                    
            OdbcDataAdapter dad = new OdbcDataAdapter(cmd312);
            dt = new DataTable();
            dad.Fill(dt);
            PdfPCell cells = new PdfPCell(new Phrase("Executive override Pay for Deposit return with key penality of  " +staff+ " From " + txtFromDate.Text.ToString() + "  TO " + txtToDate.Text, font9));
            cells.Colspan = 3;
            cells.Border = 0;
            cells.HorizontalAlignment = 1;
           
            table.AddCell(cells);

            doc.Add(table);
          
            if (dt.Rows.Count > 0)
            {
                if (Convert.IsDBNull(dt.Rows[0]["amount"]) == false)
                {
                    total = Convert.ToInt32(dt.Rows[0]["amount"]);
                }
            }



        }
        PdfPTable table1 = new PdfPTable(3);
        float[] colW1 = { 10, 10, 10 };
        table1.SetWidths(colW1);

        PdfPCell cell1w = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
        table1.AddCell(cell1w);
        PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
        table1.AddCell(cell1);
       
        PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
        table1.AddCell(cell3);

        doc.Add(table1);
        int slno = 0;
        int i = 0;
        foreach (DataRow dr in dt.Rows)
        {
            slno = slno + 1;
            if (i > 30)
            {
                i = 0;
                PdfPTable table2 = new PdfPTable(3);
                float[] colW = { 10, 10, 10};
                table2.SetWidths(colW);
                PdfPCell cell1wf = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table2.AddCell(cell1wf);
                PdfPCell cell1f = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                table2.AddCell(cell1f);
           
                PdfPCell cell3f = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                table2.AddCell(cell3f);

                doc.Add(table2);

            }

            PdfPTable table3 = new PdfPTable(3);
            PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font8)));
            table3.AddCell(cell4);
            DateTime dt5 = DateTime.Parse(dr["dayend"].ToString());
            string date1 = dt5.ToString("dd-MM-yyyy");
            PdfPCell cell4w = new PdfPCell(new Phrase(new Chunk(date1.ToString(), font8)));
            table3.AddCell(cell4w);
            PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["amount"].ToString(), font8)));
            table3.AddCell(cell6);
            i++;
            doc.Add(table3);

        }
        if (dt.Rows.Count > 0)
        {
            PdfPTable tablef = new PdfPTable(3);

            float[] colWidths23av1 = { 10, 10, 10 };
            tablef.SetWidths(colWidths23av1);

            PdfPCell cell1wf2 = new PdfPCell(new Phrase(new Chunk("Total", font8)));
            cell1wf2.Colspan = 2;
            cell1wf2.HorizontalAlignment = 2;

            tablef.AddCell(cell1wf2);
            PdfPCell cell1wf2h = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
            tablef.AddCell(cell1wf2h);
            doc.Add(tablef);
        }
        doc.Close();
      
        Random r = new Random();
        string PopUpWindowPage = "print.aspx?reportname=executivepaykey.pdf&Title=Day Wise Collection of RentRemmittance Ledger";
        string Script = "";
        Script += "<script id='PopupWindow'>";
        Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
        Script += "confirmWin.Setfocus()</script>";
        if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
            Page.RegisterClientScriptBlock("PopupWindow", Script); 
    }

    public void messagedisplay( string message,string view)
    {
        lblHead.Text = "Tsunami ARMS - Warning";
        pnlOk.Visible = true;
        pnlYesNo.Visible = false;
        lblOk.Text = message;
        ViewState["action"] = view;
        ModalPopupExtender1.Show();
        this.ScriptManager1.SetFocus(btnOk);
       

    }


    # endregion

    # region Due Vacating Room Details
    protected void lnkDueVacatingReports_Click(object sender, EventArgs e)
    {
        if (txtTime.Text != "")
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            string date5 = DateTime.Now.ToString("yyyy-MM-dd");
            string date6 = DateTime.Now.ToString("dd  MMM");
            DateTime datedd = DateTime.Parse(txtTime.Text);
            string date10 = datedd.ToString("hh:mm:ss");
            string checkdate = date5 + " " + date10;
            OdbcCommand cc = new OdbcCommand("DROP view if exists tempnonvacatexc", conn);
            cc.ExecuteNonQuery();

            string date_new = txtDaycloseDate.Text;
            string check_date = "", date10x1 = "";
            try
            {
                if (date_new != "")
                {
                    date_new = objcls.yearmonthdate(txtDaycloseDate.Text);
                    DateTime dateddx = DateTime.Parse(txtTime.Text);
                    string date10x = dateddx.ToString("HH:mm:ss");
                    date10x1 = dateddx.ToString("hh:mm:ss tt");
                    check_date = date_new + " " + date10x;

                }
            }
            catch
            {
                messagedisplay("Please Check Date and Time", "aa");
            }

            string sqlview = @"create view  tempnonvacatexc as  (SELECT
                        ta.alloc_id,ta.alloc_no,ta.reserve_id,ta.swaminame,ta.district_id,
                        ta.state_id,ta.place,ta.std,ta.phone,ta.mobile,ta.idproof,ta.idproofno,
                        ta.room_id,ta.noofinmates,ta.allocdate,ta.exp_vecatedate,ta.barcode,
                        ta.is_plainprint,ta.adv_recieptno,ta.numberofunit,ta.alloc_type,
                        ta.pass_id,ta.donor_id,ta.dayend,ta.userid,
                        ta.roomrent,ta.roomstatus,ta.advance,ta.deposit,ta.rescharge,ta.reason,
                        ta.othercharge,ta.totalcharge,ta.balanceamount,
                        ta.season_id,ta.counter_id,ta.createdby,ta.createdon,ta.realloc_from,ta.reason_id
                        from t_roomallocation ta
                        WHERE ta.roomstatus='2' 
                        and date_format(exp_vecatedate,'%Y/%m/%d %H:%i:%s')<'" + check_date + "')";           
            OdbcCommand cmdview = new OdbcCommand(sqlview, conn);
            cmdview.ExecuteNonQuery();
            try
            {
                string data = Session["dayend"].ToString();
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " tempnonvacatexc tt,m_room mr ,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "adv_recieptno,place, buildingname ,roomno ,swaminame , exp_vecatedate as vacatedate,buildingname ");
                if (cmbSelectBuilding.SelectedValue == "-1")
                {
                    cmd31.Parameters.AddWithValue("conditionv", "tt.room_id=mr.room_id and msb.build_id=mr.build_id order by mr.build_id,roomno ");
                }
                else
                {
                    cmd31.Parameters.AddWithValue("conditionv", "tt.room_id=mr.room_id and msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbSelectBuilding.SelectedValue) + " order by ta.build_id,roomno");
                }

                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
                Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 60);

                DateTime gh = DateTime.Now;
                string transtim = gh.ToString("dd-MM-yyyy HH-mm");
                string ch = "DueVacatingRooms" + transtim.ToString() + ".pdf";
                string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;
    
                Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
                Font font7 = FontFactory.GetFont("ARIAL", 9);
                Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
                Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
                pdfPage page = new pdfPage();
                PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                wr.PageEvent = page;
                doc.Open();
                PdfPTable table = new PdfPTable(5);
                float[] colWidths23 = { 20, 20, 40, 30, 60 };
                table.SetWidths(colWidths23);
                page.strRptMode = "Duevacate";
                PdfPCell cell = new PdfPCell(new Phrase("Room Due for Vacating ", font12));
                cell.Colspan = 5;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                table.AddCell(cell);

                PdfPCell cellv = new PdfPCell(new Phrase("Building Name: ", font9));
                cellv.Colspan = 2;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 1;
                table.AddCell(cellv);

                PdfPCell cellv1 = new PdfPCell(new Phrase(cmbSelectBuilding.SelectedItem.ToString(), font9));
                cellv1.Colspan = 1;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
                table.AddCell(cellv1);

                PdfPCell cellv2 = new PdfPCell(new Phrase("Due Time:", font9));
                cellv2.Colspan = 0;
                cellv2.Border = 0;
                cellv2.HorizontalAlignment = 1;
                table.AddCell(cellv2);

                PdfPCell cellv21 = new PdfPCell(new Phrase(date10x1.ToString() + " On " + txtDaycloseDate.Text, font9));
                cellv21.Colspan = 0;
                cellv21.HorizontalAlignment = 0;
                cellv21.Border = 0;
                table.AddCell(cellv21);

                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table.AddCell(cell1);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                table.AddCell(cell2);
                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Prop Checkout Time", font8)));
                table.AddCell(cell3);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk("Max Time", font8)));
                table.AddCell(cell4);

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                table.AddCell(cell5);
          
                doc.Add(table);
                int i = 0;

                int slno = 0;
                foreach (DataRow dr in dtt.Rows)
                {
                    slno = slno + 1;
                    if (i > 33)
                    {
                        i = 0;

                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(5);
                        float[] colWidths231 = { 20, 20, 40, 30, 60 };
                        table1.SetWidths(colWidths231);

                        PdfPCell cell1n = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                        table1.AddCell(cell1n);

                        PdfPCell cell2n = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                        table1.AddCell(cell2n);

                        PdfPCell cell3n = new PdfPCell(new Phrase(new Chunk("Prop Checkout Time", font8)));
                        table1.AddCell(cell3n);

                        PdfPCell cell4n = new PdfPCell(new Phrase(new Chunk("Max Time", font8)));
                        table1.AddCell(cell4n);

                        PdfPCell cell5n = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                        table1.AddCell(cell5n);
                        doc.Add(table1);
                    }

                    PdfPTable table3 = new PdfPTable(5);
                    
                    #region  formate

                    float[] colWidths23u = { 20, 20, 40, 30, 60 };
                    table3.SetWidths(colWidths23u);
                    PdfPCell cell9 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font8)));
                    table3.AddCell(cell9);
                    string build = "";
                    string building = dr["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dr["roomno"].ToString();

                    PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk(building.ToString(), font8)));
                    table3.AddCell(cell10);
                    DateTime dated = DateTime.Parse(dr["vacatedate"].ToString());
                    string time1 = dated.ToString("dd-MM-yyyy hh:mm tt");

                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk(time1.ToString(), font8)));
                    table3.AddCell(cell11);

                    PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(date10x1.ToString(), font8)));
                    table3.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk("Extended Stay", font8)));
                    table3.AddCell(cell13);

                  
                    i++;
                    #endregion
               
                    doc.Add(table3);

                }
                PdfPTable table4 = new PdfPTable(5);
                PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellf.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf.PaddingLeft = 20;
                cellf.MinimumHeight = 20;
                cellf.Colspan = 5;
                cellf.Border = 0;
                table4.AddCell(cellf);

                PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1.PaddingLeft = 20;
                cellf1.Border = 0;
                cellf1.Colspan = 5;
                table4.AddCell(cellf1);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom"  , font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 5;
               table4.AddCell(cellh2);

                doc.Add(table4);

                doc.Close();
            
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=Nonvacating report";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);

            }
            catch (Exception ex)
            {

                messagedisplay("problem found", "aa");

           }

        }
        else
        {
            messagedisplay("Select Building and enter Time to take report","ww");

        }

    }
    # endregion

    protected void chkplain_CheckedChanged(object sender, EventArgs e)
    {

    }

    # region Advance Rec No text Change
    public void AdvanceRecieptnoTexChange()
    {

         try{
            if(conn.State==ConnectionState.Closed)
            
             {
            conn.ConnectionString = strConnection;
            conn.Open();
              }
            OdbcCommand cmd = new OdbcCommand("select * from  m_sub_building msb ,m_room mr,t_roomallocation tr  left join m_sub_district msd   on  tr.district_id=msd.district_id where tr.adv_recieptno=" + Convert.ToInt32(txtAdRecieptNo.Text) + " and tr.roomstatus='2' and  mr.room_id=tr.room_id and mr.build_id=msb.build_id  ", conn);

            OdbcDataReader or = cmd.ExecuteReader();
            if (or.Read())
            {
                cmbBuilding.SelectedValue = or["build_id"].ToString();
                txtRoomNo.Text = (or["roomno"]).ToString();
                txtCustomerName.Text = or["swaminame"].ToString();
                txtAdvanceAmount.Text = or["advance"].ToString();
                txtDistrict.Text = or["districtname"].ToString();
                txtCustomerPlace.Text = or["place"].ToString();
                dep = Convert.ToInt32(or["deposit"]);
                DateTime datedt = DateTime.Parse(or["allocdate"].ToString());
                string dates1 = datedt.ToString("dd-MM-yyyy");
                string times1 = datedt.ToString("hh:mm tt");
                Session["customer"] = or["alloc_type"].ToString();      
                txtAllocatedDate.Text =dates1.ToString();
                txtAllocatedTime.Text = times1.ToString();
                DateTime dateprop = DateTime.Parse(or["exp_vecatedate"].ToString());
                Session["propdate"] = or["exp_vecatedate"];
                string propdate = dateprop.ToString("dd/MM/yyyy hh:mm tt");

                txtPropCheckOut.Text = propdate.ToString();
                txtAllocNo.Text = or["alloc_no"].ToString();

                Session["deposit"] = dep;

                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                {
                    DateTime datedt1 = DateTime.Parse(or["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtVacatingDate.Text= dates11.ToString();
                    txtVecatingTime.Text = "4:00 PM";


                }
                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {
                    
                    DateTime datedt1 = DateTime.Parse(or["exp_vecatedate"].ToString());
                    string dates11 = datedt1.ToString("dd-MM-yyyy");
                    string times11 = datedt1.ToString("hh:mm tt");
                    txtExtendDate.Text = dates11.ToString();
                    txtExtendTime.Text = times11.ToString();

                }

                conn.Close();
                BalanceAmountCalculations();


            }

            else
            {
                OdbcCommand cmd1 = new OdbcCommand("select * from t_roomvacate tv,t_roomallocation tr where  adv_recieptno=" + int.Parse(txtAdRecieptNo.Text) + " and tv.alloc_id=tr.alloc_id" , conn);


                OdbcDataReader or1 = cmd1.ExecuteReader();

                if (or1.Read())
                {

                    this.ScriptManager1.SetFocus(txtAdRecieptNo);
                    txtAdRecieptNo.Text = "";
                    this.ScriptManager1.SetFocus(txtAdRecieptNo);
                    lblHead.Text = "Tsunami ARMS - Warning";
                    pnlOk.Visible = true;
                    pnlYesNo.Visible = false;
                    lblOk.Text = "Already vacated";
                    ViewState["action"] = "warn3";
                    ModalPopupExtender1.Show();
                    this.ScriptManager1.SetFocus(btnOk);


                }

                else
                {
                    txtAdRecieptNo.Text = "";
                    this.ScriptManager1.SetFocus(txtAdRecieptNo);
                    lblHead.Text = "Tsunami ARMS - Warning";
                    pnlOk.Visible = true;
                    pnlYesNo.Visible = false;
                    lblOk.Text = "Reciept could not find";
                    ViewState["action"] = "warn3";
                    ModalPopupExtender1.Show();
                    this.ScriptManager1.SetFocus(btnOk);


                } conn.Close();
           
        
            
            }




        }
        catch (Exception ex)
        {

            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Problem found during loading";
            ViewState["action"] = "warn5";
            ModalPopupExtender1.Show();
            this.ScriptManager1.SetFocus(btnOk);

        }


    }
    # endregion

    # region Security Deposit Ledger
    protected void lnkDepositLedger_Click(object sender, EventArgs e)
    {

        if (txtDaycloseDate.Text != "")
        {
            string date12 =objcls.yearmonthdate(txtDaycloseDate.Text);
            DateTime cc = DateTime.Parse(date12);

            string datex = cc.ToString("dd MMM yyyy");

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }

            int allocid = Convert.ToInt32(Session["allocid"]);
            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string f2 = dts.ToString("dd/MM/yyyy");
            string dayclosed = dts.ToString("dd MMM yyyy");
            DateTime tim1 = DateTime.Now;
            string kk = tim1.ToString("yyyy/MM/dd");
            string yy = tim1.ToString("dd/MM/yyyy");
            yy = tim1.ToString("dd MMM  yyyy");
            try
            {
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta");
                cmd31.Parameters.AddWithValue("attribute", "bill_receiptno, adv_recieptno,alloc_no,deposit,retdepamount,(deposit-retdepamount)as balance,remark  ");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend='" + date12 + "' and tv.alloc_id=ta.alloc_id order by adv_recieptno");
                DataTable dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
                int totaldeposit = 0, totalrefund = 0, totalbalance = 0;
                Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 70);

                DateTime gh = DateTime.Now;
                string transtim = gh.ToString("dd-MM-yyyy HH-mm");
                string ch = "SecurityDepositLedger" + transtim.ToString() + ".pdf";
                string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;
                Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
                Font font7 = FontFactory.GetFont("ARIAL", 9);
                Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
                Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
                pdfPage page = new pdfPage();
                PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                wr.PageEvent = page;
                doc.Open();
                PdfPTable tablec = new PdfPTable(4);
                float[] colWidths23c = { 30, 30, 30, 30 };
                tablec.SetWidths(colWidths23c);

                page.strRptMode = "Receiptledger";

                PdfPCell cell = new PdfPCell(new Phrase("Security Deposit   Reciept Ledger", font12));
                cell.Colspan = 4;
                cell.MinimumHeight = 10;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                tablec.AddCell(cell);

                PdfPCell cellc = new PdfPCell(new Phrase("Office name:", font9));
                cellc.Colspan = 1;
                cellc.Border = 0;
                cellc.HorizontalAlignment = 1;
                tablec.AddCell(cellc);
                PdfPCell cellv = new PdfPCell(new Phrase("Accommodation office", font9));
                cellv.Colspan = 1;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 1;
                 tablec.AddCell(cellv);

                PdfPCell celld = new PdfPCell(new Phrase("Description:", font9));
                celld.Colspan = 1;
                celld.Border = 0;
                celld.HorizontalAlignment = 1;
                 tablec.AddCell(celld);
                PdfPCell cellf = new PdfPCell(new Phrase("Security Deposit Ledger", font9));
                cellf.Colspan = 1;
                cellf.Border = 0;
                cellf.HorizontalAlignment = 1;
                tablec.AddCell(cellf);

                PdfPCell cellbn = new PdfPCell(new Phrase("Budget Head", font9));
                cellbn.Colspan = 1;
                cellbn.Border = 0;
                cellbn.HorizontalAlignment = 1;
                 tablec.AddCell(cellbn);

                PdfPCell cellnb = new PdfPCell(new Phrase("", font9));
                cellnb.Colspan = 1;
                cellnb.Border = 0;
                cellnb.HorizontalAlignment = 1;
                tablec.AddCell(cellnb);

                PdfPCell cellm = new PdfPCell(new Phrase("Date", font9));
                cellm.Colspan = 1;
                cellm.Border = 0;
                cellm.HorizontalAlignment = 1;
                tablec.AddCell(cellm);

                PdfPCell cellbnn = new PdfPCell(new Phrase(datex.ToString(), font9));
                cellbnn.Colspan = 1;
                cellbnn.Border = 0;
                cellbnn.HorizontalAlignment = 1;
                tablec.AddCell(cellbnn);
                doc.Add(tablec);
                PdfPTable table = new PdfPTable(6);
                float[] colWidths23 = { 30, 30, 40, 30, 30, 70 };
                table.SetWidths(colWidths23);
                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("No", font8)));
                cell1.Rowspan = 2;
                table.AddCell(cell1);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Reciept No", font8)));
                cell2.Rowspan = 2;
                table.AddCell(cell2);

                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Security Deposit Amount", font8)));
                cell3.Colspan = 3;
                cell3.HorizontalAlignment = 1;
                table.AddCell(cell3);

                PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                cell31.Rowspan = 2;
                table.AddCell(cell31);


                PdfPCell cell31c = new PdfPCell(new Phrase(new Chunk("Deposit", font8)));
                cell31c.Rowspan = 1;
                table.AddCell(cell31c);



                PdfPCell cell31cc = new PdfPCell(new Phrase(new Chunk("Refund", font8)));
                cell31cc.Rowspan = 1;
                table.AddCell(cell31cc);


                PdfPCell cell31x = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                cell31x.Rowspan = 1;
                table.AddCell(cell31x);

                doc.Add(table);

                int i = 0;
                int slno = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    slno = slno + 1;
                    if (i > 38)
                    {
                        i = 0;
                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(6);

                        float[] colWidths231 = { 30, 30, 40, 30, 30, 70 };
                        table1.SetWidths(colWidths23);

                        PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk("No", font8)));

                        cell11.Rowspan = 2;
                        table1.AddCell(cell11);

                        PdfPCell cell21 = new PdfPCell(new Phrase(new Chunk("Receipt No", font8)));
                        cell21.Rowspan = 2;
                        table1.AddCell(cell21);

                        PdfPCell cell3v = new PdfPCell(new Phrase(new Chunk("Security Deposit Amount", font8)));
                        cell3v.HorizontalAlignment = 1;
                        cell3v.Colspan = 3;
                        table1.AddCell(cell3v);

                        PdfPCell cell311 = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                        cell311.Rowspan = 2;
                        table1.AddCell(cell311);


                        PdfPCell cell31c1 = new PdfPCell(new Phrase(new Chunk("Deposit", font8)));
                        cell31c1.Rowspan = 1;
                        table1.AddCell(cell31c1);



                        PdfPCell cell31cc1 = new PdfPCell(new Phrase(new Chunk("Refund", font8)));
                        cell31cc1.Rowspan = 1;
                        table1.AddCell(cell31cc1);


                        PdfPCell cell31x1 = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                        cell31x1.Rowspan = 1;
                        table1.AddCell(cell31x1);


                        doc.Add(table1);

                    }

                    PdfPTable table2 = new PdfPTable(6);
                    float[] colWidths2312 = { 30, 30, 40, 30, 30, 70 };
                    table2.SetWidths(colWidths2312);

                    PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table2.AddCell(cell4);

                    PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(dr["adv_recieptno"].ToString(), font7)));
                    table2.AddCell(cell5);
                    PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["deposit"].ToString(), font7)));
                    table2.AddCell(cell6);
                    totaldeposit = totaldeposit + Convert.ToInt32(dr["deposit"].ToString());
                  
                    PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(dr["retdepamount"].ToString(), font7)));
                    table2.AddCell(cell61);
                    totalrefund = totalrefund + Convert.ToInt32(dr["retdepamount"].ToString());
                    PdfPCell cell611 = new PdfPCell(new Phrase(new Chunk(dr["balance"].ToString(), font7)));
                    table2.AddCell(cell611);
                    totalbalance = totalbalance + Convert.ToInt32(dr["balance"].ToString());
                    PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk(dr["remark"].ToString(), font7)));
                    table2.AddCell(cell611d);


                    i++;
                    doc.Add(table2);
                }
                if (dt.Rows.Count > 0)
                {
                    PdfPTable table2f = new PdfPTable(6);

                    float[] colWidths2312 = { 30, 30, 40, 30, 30, 70 };
                    table2f.SetWidths(colWidths2312);
                    PdfPCell cell611ds = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611ds.Colspan = 1;
                    table2f.AddCell(cell611ds);

                    PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk("Total", font8)));
                    cell611d.Colspan = 1;
                    table2f.AddCell(cell611d);

                    PdfPCell cell6141ds = new PdfPCell(new Phrase(new Chunk(totaldeposit.ToString(), font8)));
                    cell6141ds.Colspan = 1;
                    table2f.AddCell(cell6141ds);

                    PdfPCell cell611d11 = new PdfPCell(new Phrase(new Chunk(totalrefund.ToString(), font8)));
                    cell611d11.Colspan = 1;
                    table2f.AddCell(cell611d11);

                    PdfPCell cell611d1 = new PdfPCell(new Phrase(new Chunk(totalbalance.ToString(), font8)));
                    cell611d1.Colspan = 1;
                    table2f.AddCell(cell611d1);
                    doc.Add(table2f);
                    PdfPCell cell611d1x = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611d1x.Colspan = 1;
                    table2f.AddCell(cell611d1x);

                    PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                    cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellfb.PaddingLeft = 20;
                    cellfb.Colspan = 6;
                    cellfb.MinimumHeight = 30;
                    cellfb.Border = 0;
                    table2f.AddCell(cellfb);

                    PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                    cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellf1b.PaddingLeft = 20;
                    cellf1b.Colspan = 6;
                    cellf1b.Border = 0;
                    table2f.AddCell(cellf1b);

                    PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                    cellh2.HorizontalAlignment = Element.ALIGN_MIDDLE;
                    cellh2.PaddingLeft = 20;
                    cellh2.Border = 0;
                    cellh2.Colspan = 6;
                    table2f.AddCell(cellh2);

                    doc.Add(table2f);

                }

                doc.Close();
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=Deposit Ledger";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);

            }

            catch
            {
              messagedisplay("problem found", "aa");
            } 
            conn.Close();

        }
        else
        {

            messagedisplay("Select a Date", "wa1");


        }


    }

    # endregion

    # region VacateNo
    public string CalculateVacateid()
    {
        string dayendd = Session["dayend"].ToString();
        
        OdbcCommand cmd2051 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmd2051.CommandType = CommandType.StoredProcedure;
        cmd2051.Parameters.AddWithValue("tblname", "t_roomvacate");
        cmd2051.Parameters.AddWithValue("attribute", "count(*) as count1");
        cmd2051.Parameters.AddWithValue("conditionv", "dayend='" + dayendd + "'  ");
        cmd2051.Transaction = odbTrans;
        OdbcDataAdapter dacnt2051 = new OdbcDataAdapter(cmd2051);
        DataTable dtt2051 = new DataTable();
        dacnt2051.Fill(dtt2051);

        int vacateno = 0;
        if (dtt2051.Rows.Count > 0)
        {
            if (Convert.IsDBNull(dtt2051.Rows[0]["count1"]) == false)
            {
                vacateno = Convert.ToInt32(dtt2051.Rows[0]["count1"]);
                vacateno = vacateno + 1;
            }
            else
            {
                vacateno = 1;

            }
        }
        else
        {
            vacateno = 1;

        }
        DateTime day1 = DateTime.Parse(dayendd.ToString());
        string day = day1.ToString("dd");
        string vacateno1 = vacateno + "/" + day;
        return vacateno1;


    }
    # endregion

    # region CareTaker Liability

    protected void lnkCareTakerLiability_Click(object sender, EventArgs e)
    {
        if ((txtFromDate.Text != "") && (txtToDate.Text != "") && (Convert.ToInt32(cmbBuildReport2.SelectedValue) != -1))
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }

            int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
            DataTable dttcaretaker = new DataTable();
            dttcaretaker.Columns.Clear();
            dttcaretaker.Columns.Add("date", System.Type.GetType("System.String"));
            dttcaretaker.Columns.Add("description", System.Type.GetType("System.String"));
            dttcaretaker.Columns.Add("reciept", System.Type.GetType("System.String"));
            dttcaretaker.Columns.Add("payment", System.Type.GetType("System.String"));
            dttcaretaker.Columns.Add("balance", System.Type.GetType("System.String"));
            int taskid = 0;
            string fromdate =objcls.yearmonthdate(txtFromDate.Text);
            string todate =objcls. yearmonthdate(txtToDate.Text);
            OdbcCommand cmd2 = new OdbcCommand("select task_id from m_sub_task where taskname='caretaker'", conn);
            OdbcDataReader ord2 = cmd2.ExecuteReader();
            string staffname = "";

            if (ord2.Read())
            {
                taskid = Convert.ToInt32(ord2["task_id"]);

                string sqlcomm = "select   vv.staff_id,staffname from  m_team_workplace mt,m_team_members vv,m_staff s  "
                + " where  mt.task_id=" + taskid + " and mt.workplace_id=" + Convert.ToInt32(cmbBuildReport2.SelectedValue) + "   and vv.team_id=mt.team_id  and s.staff_id=vv.staff_id";

               OdbcCommand cm2 = new OdbcCommand(sqlcomm, conn);
               OdbcDataReader or2 = cm2.ExecuteReader();

                if (or2.Read())
                {
                    staffname = or2["staffname"].ToString();

                }
            }

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            int total = 0;
            int allocid = Convert.ToInt32(Session["allocid"]);
            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string f2 = dts.ToString("dd/MM/yyyy");
            string dayclosed = dts.ToString("dd MMM yyyy");
            DateTime tim1 = DateTime.Now;
            string kk = tim1.ToString("yyyy/MM/dd");
            string yy = tim1.ToString("dd/MM/yyyy");
            yy = tim1.ToString("dd MMM  yyyy");
            try
            {
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "alloc_no,key_penality,damage_penality,tv.roomrent,tv.dayend,buildingname,bill_receiptno,roomno");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and inmate_abscond='1' and liability_by='1'   and mr.build_id='" + cmbBuildReport2.SelectedValue + "'   and msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id");
                DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
               
                int k = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    
                    DateTime dayend = DateTime.Parse(dt1.Rows[0]["dayend"].ToString());
                    string day = dayend.ToString("dd");
                    string bill = dt1.Rows[i]["bill_receiptno"].ToString() + "/" + day;
                    bill = dt1.Rows[i]["alloc_no"].ToString();
                    string build = "";
                    string building = dt1.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt1.Rows[i]["roomno"].ToString();


                    if (Convert.ToInt32(dt1.Rows[i]["key_penality"]) > 0)
                    {

                        dttcaretaker.Rows.Add();
                        dttcaretaker.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttcaretaker.Rows[k]["description"] = " Key lost charge on room  " + building + " Bill " + bill;
                        dttcaretaker.Rows[k]["reciept"] = dt1.Rows[i]["key_penality"].ToString();
                        dttcaretaker.Rows[k]["payment"] = "";
                        dttcaretaker.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt1.Rows[i]["key_penality"]);
                        k++;

                    }

                    if (Convert.ToInt32(dt1.Rows[i]["roomrent"]) > 0)
                    {

                        dttcaretaker.Rows.Add();
                        dttcaretaker.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttcaretaker.Rows[k]["description"] = "Overstay rent  on room " + building + " Bill " + bill;
                        dttcaretaker.Rows[k]["reciept"] = dt1.Rows[i]["roomrent"].ToString();
                        dttcaretaker.Rows[k]["payment"] = "";
                        dttcaretaker.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt1.Rows[i]["roomrent"]);
                        k++;
                    }
                    if (Convert.ToInt32(dt1.Rows[i]["damage_penality"]) > 0)
                    {
                                            
                        dttcaretaker.Rows.Add();
                        dttcaretaker.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttcaretaker.Rows[k]["description"] = "Damage penality on room  " + building + " Bill " + bill;
                        dttcaretaker.Rows[k]["reciept"] = dt1.Rows[i]["damage_penality"].ToString();
                        dttcaretaker.Rows[k]["payment"] = "";
                        dttcaretaker.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt1.Rows[i]["damage_penality"]);
                        k++;

                    }

                }


                DataTable dt = dttcaretaker;
                DateTime gh = DateTime.Now;
                string transtim = gh.ToString("dd-MM-yyyy HH-mm");
                string ch = "caretakerledger" + transtim.ToString() + ".pdf";

                string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;
                              
                Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 70);
                Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
                Font font7 = FontFactory.GetFont("ARIAL", 9);
                Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
                Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
                pdfPage page = new pdfPage();
                PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                wr.PageEvent = page;
             
                doc.Open();
                PdfPTable tablec = new PdfPTable(4);
                float[] colWidths23c = { 50, 50, 50, 50 };
                tablec.SetWidths(colWidths23c);

                page.strRptMode = "Receiptledger";
                PdfPCell cell = new PdfPCell(new Phrase("Care Taker Reciept Ledger", font12));
                cell.Colspan = 4;
                cell.MinimumHeight = 10;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
             
                tablec.AddCell(cell);

                PdfPCell cellc = new PdfPCell(new Phrase("Office name:", font9));
                cellc.Colspan = 1;
                cellc.Border = 0;
                cellc.HorizontalAlignment = 0;
                tablec.AddCell(cellc);
                PdfPCell cellv = new PdfPCell(new Phrase("Accommodation office", font9));
                cellv.Colspan = 1;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 0;
                tablec.AddCell(cellv);

                PdfPCell celld = new PdfPCell(new Phrase("Description:", font9));
                celld.Colspan = 1;
                celld.Border = 0;
                celld.HorizontalAlignment = 0;
                tablec.AddCell(celld);

                PdfPCell cellf = new PdfPCell(new Phrase("Caretaker Liability ledger", font9));
                cellf.Colspan = 1;
                cellf.Border = 0;
                cellf.HorizontalAlignment = 0;
                tablec.AddCell(cellf);

                PdfPCell cellbn = new PdfPCell(new Phrase("Building Name:", font9));
                cellbn.Colspan = 1;
                cellbn.Border = 0;
                cellbn.HorizontalAlignment = 0;
                tablec.AddCell(cellbn);

                PdfPCell cellnb = new PdfPCell(new Phrase(cmbBuildReport2.SelectedItem.ToString() + "-" + staffname, font9));
                cellnb.Colspan = 1;
                cellnb.Border = 0;
                cellnb.HorizontalAlignment = 0;
                tablec.AddCell(cellnb);

                PdfPCell cellm = new PdfPCell(new Phrase("Date:", font9));
                cellm.Colspan = 1;
                cellm.Border = 0;
                cellm.HorizontalAlignment = 0;
                tablec.AddCell(cellm);

                PdfPCell cellbnn = new PdfPCell(new Phrase(yy.ToString(), font9));
                cellbnn.Colspan = 1;
                cellbnn.Border = 0;
                cellbnn.HorizontalAlignment = 0;
                tablec.AddCell(cellbnn);
                doc.Add(tablec);
                PdfPTable table = new PdfPTable(6);
                float[] colWidths23 = { 20, 20, 80, 20, 30, 20 };
                table.SetWidths(colWidths23);

                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("No", font8)));

                cell1.Rowspan = 1;
                table.AddCell(cell1);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                cell2.Rowspan = 1;
                table.AddCell(cell2);

                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Description", font8)));
                cell3.Colspan =1;
                cell3.HorizontalAlignment = 1;
                table.AddCell(cell3);

                PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Amount liable", font8)));
                cell31.Rowspan = 1;
                table.AddCell(cell31);

                PdfPCell cell31c = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
                cell31c.Rowspan = 1;
                table.AddCell(cell31c);

                PdfPCell cell31cc = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                cell31cc.Rowspan = 1;
                table.AddCell(cell31cc);

                doc.Add(table);

                int ii = 0;
                int slno = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    slno = slno + 1;
                    if (ii > 35)
                    {
                        ii = 0;
                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(6);

                        float[] colWidths231 = { 20, 20, 80, 20, 30, 20 };
                        table1.SetWidths(colWidths23);
                        PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk("No", font8)));

                        cell11.Rowspan = 1;
                        table1.AddCell(cell11);

                        PdfPCell cell21 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                        cell21.Rowspan = 1;
                        table1.AddCell(cell21);

                        PdfPCell cell3v = new PdfPCell(new Phrase(new Chunk("Description", font8)));
                        cell3v.Colspan =1;
                        table1.AddCell(cell3v);

                        PdfPCell cell311 = new PdfPCell(new Phrase(new Chunk("Amount Liable", font8)));
                        cell311.Rowspan =1;
                        table1.AddCell(cell311);

                        PdfPCell cell31c1 = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
                        cell31c1.Rowspan = 1;
                        table1.AddCell(cell31c1);

                        PdfPCell cell31cc1 = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                        cell31cc1.Rowspan = 1;
                        table1.AddCell(cell31cc1);
                        doc.Add(table1);


                    }

                    PdfPTable table2 = new PdfPTable(6);

                    float[] colWidths2312 = { 20, 20, 80, 20, 30, 20 };
                    table2.SetWidths(colWidths2312);

                    PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table2.AddCell(cell4);
                    DateTime datee = DateTime.Parse(dr["date"].ToString());
                    string datee1 = datee.ToString("dd MMM");
                    
                    PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(datee1.ToString() , font7)));
                    table2.AddCell(cell5);
                    PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["description"].ToString(), font7)));
                    table2.AddCell(cell6);
                
                    PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk(dr["reciept"].ToString(), font7)));
                    table2.AddCell(cell611d);

                    PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(dr["payment"].ToString(), font7)));
                    table2.AddCell(cell61);

                    PdfPCell cell611 = new PdfPCell(new Phrase(new Chunk(dr["balance"].ToString(), font7)));
                    table2.AddCell(cell611);
                   

                    ii++;
                    doc.Add(table2);
                }
                if (dt.Rows.Count > 0)
                {
                    PdfPTable table2f = new PdfPTable(6);
                    float[] colWidths2312 = { 20, 20, 80, 20, 30, 20 };
                    table2f.SetWidths(colWidths2312);
                    PdfPCell cell611ds = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611ds.Colspan = 1;
                    table2f.AddCell(cell611ds);
                    PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611d.Colspan = 1;
                    table2f.AddCell(cell611d);
                    PdfPCell cell6141ds = new PdfPCell(new Phrase(new Chunk("Total", font8)));
                    cell6141ds.Colspan = 1;
                    table2f.AddCell(cell6141ds);

                    PdfPCell cell611d11 = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                    cell611d11.Colspan = 1;
                    table2f.AddCell(cell611d11);

                    PdfPCell cell611d1 = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611d1.Colspan = 1;
                    table2f.AddCell(cell611d1);
                    doc.Add(table2f);
                    PdfPCell cell611d1x = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                    cell611d1x.Colspan = 1;
                    table2f.AddCell(cell611d1x);

                    PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                    cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellfb.PaddingLeft = 20;
                    cellfb.Colspan = 6;
                    cellfb.MinimumHeight = 30;
                    cellfb.Border = 0;
                    table2f.AddCell(cellfb);

                    PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                    cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellf1b.PaddingLeft = 20;
                    cellf1b.Colspan = 6;
                    cellf1b.Border = 0;
                    table2f.AddCell(cellf1b);

                    PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                    cellh2.HorizontalAlignment = Element.ALIGN_MIDDLE;
                    cellh2.PaddingLeft = 20;
                    cellh2.Border = 0;
                    cellh2.Colspan = 6;
                    table2f.AddCell(cellh2);
                    doc.Add(table2f);

                }

                doc.Close();
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=Care taker report";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);

            }
            catch
            {
                messagedisplay("problem found","aa");
            } 
            conn.Close();

        }
        else
        {
            messagedisplay("Select From date and To date and select building", "warnm");

        }

    }
    # endregion
 
    # region Due Vacating Room Details
    protected void lnkDueVacatingMaxtime_Click(object sender, EventArgs e)
    {
        if ((cmbSelectBuilding.SelectedValue != "-1"))
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
         
            string date5 = DateTime.Now.ToString("yyyy-MM-dd");
            string date6 = DateTime.Now.ToString("dd  MMM");
            string c = "5 PM";
            DateTime datedd = DateTime.Parse(c);
            string date10 = datedd.ToString("HH:mm");
            string checkdate = date5 + " " + date10;
            OdbcCommand cc = new OdbcCommand("DROP view if exists tempnonvacate11", conn);
            cc.ExecuteNonQuery();

            string sqlview = "create view  tempnonvacate11 as  (SELECT  * from t_roomallocation ta   WHERE ta.roomstatus='2' "
            + " and date(exp_vecatedate)=curdate() and ADDTIME(exp_vecatedate,MAKETIME((SELECT graceperiod from t_policy_allocation "
            + " WHERE reqtype='Common' and rowstatus<>'2' and ((curdate() >= fromdate and  curdate()<=todate) or "
            + " (curdate()>=fromdate and todate='0000-00-00')) and waitingcriteria='Hours'),0,0))<'" + checkdate + "')";

            OdbcCommand cmdview = new OdbcCommand(sqlview, conn);
            cmdview.ExecuteNonQuery();

            try
            {
                
                string data = Session["dayend"].ToString();
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " tempnonvacate11 tt,m_room mr ,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "adv_recieptno,place, buildingname ,roomno ,swaminame , exp_vecatedate as vacatedate");
                cmd31.Parameters.AddWithValue("conditionv", "tt.room_id=mr.room_id and msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbSelectBuilding.SelectedValue) + "");

                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
              
                DateTime gh = DateTime.Now;
                string transtim = gh.ToString("dd-MM-yyyy HH-mm");
                string ch = "DueVacatingmaxtime" + transtim.ToString() + ".pdf";
                string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

                Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 60);
                Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
                Font font7 = FontFactory.GetFont("ARIAL", 9);
                Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
                Font font9 = FontFactory.GetFont("ARIAL", 10, 1);

                pdfPage page = new pdfPage();
                PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                wr.PageEvent = page;
                doc.Open();
                PdfPTable table = new PdfPTable(5);
                float[] colWidths23 = { 20, 20, 40, 30, 60 };
                table.SetWidths(colWidths23);
                page.strRptMode = "Duevacate";
                PdfPCell cell = new PdfPCell(new Phrase("Room Due for Vacating ", font12));
                cell.Colspan = 5;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
              
                table.AddCell(cell);

                PdfPCell cellv = new PdfPCell(new Phrase("Building Name: ", font9));
                cellv.Colspan = 2;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 1;
                table.AddCell(cellv);

                PdfPCell cellv1 = new PdfPCell(new Phrase(cmbSelectBuilding.SelectedItem.ToString(), font9));
                cellv1.Colspan = 1;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
                table.AddCell(cellv1);

                PdfPCell cellv2 = new PdfPCell(new Phrase("Due Time:", font9));
                cellv2.Colspan = 0;
                cellv2.Border = 0;
                cellv2.HorizontalAlignment = 1;
                table.AddCell(cellv2);

                PdfPCell cellv21 = new PdfPCell(new Phrase("5 PM on  "+  date6 , font9));
                cellv21.Colspan = 0;
                cellv21.HorizontalAlignment = 0;
                cellv21.Border = 0;
               
                table.AddCell(cellv21);

                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table.AddCell(cell1);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                table.AddCell(cell2);
                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Prop Checkout Time", font8)));
                table.AddCell(cell3);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk("Max Time", font8)));
                table.AddCell(cell4);

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                table.AddCell(cell5);

                doc.Add(table);
                int i = 0;

                int slno = 0;
                foreach (DataRow dr in dtt.Rows)
                {
                    slno = slno + 1;
                    if (i > 33)
                    {
                        
                        i = 0;
                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(5);
                        float[] colWidths231 = { 20, 20, 40, 30, 60 };
                        table1.SetWidths(colWidths231);

                        PdfPCell cell1n = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                        table1.AddCell(cell1n);

                        PdfPCell cell2n = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                        table1.AddCell(cell2n);

                        PdfPCell cell3n = new PdfPCell(new Phrase(new Chunk("Prop Checkout Time", font8)));
                        table1.AddCell(cell3n);

                        PdfPCell cell4n = new PdfPCell(new Phrase(new Chunk("Max Time", font8)));
                        table1.AddCell(cell4n);

                        PdfPCell cell5n = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                        table1.AddCell(cell5n);
                        doc.Add(table1);

                        
                    }

                    PdfPTable table3 = new PdfPTable(5);
                    #region commented

                    float[] colWidths23u = { 20, 20, 40, 30, 60 };
                    table3.SetWidths(colWidths23u);
                    PdfPCell cell9 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table3.AddCell(cell9);

                    PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString(), font7)));
                    table3.AddCell(cell10);
                    DateTime dated = DateTime.Parse(dr["vacatedate"].ToString());
                    string time1 = dated.ToString("hh:mm tt");

                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk(time1.ToString(), font7)));
                    table3.AddCell(cell11);

                    PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk("4 PM", font7)));
                    table3.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk("Extended Stay", font7)));
                    table3.AddCell(cell13);
                   
                    i++;
                    #endregion


                    doc.Add(table3);

                }
                PdfPTable table4 = new PdfPTable(5);
                PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellf.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf.PaddingLeft = 100;
                cellf.MinimumHeight = 20;
                cellf.Colspan = 5;
                cellf.Border = 0;
                table4.AddCell(cellf);

                PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1.PaddingLeft = 20;
                cellf1.Border = 0;
                cellf1.Colspan = 5;
                table4.AddCell(cellf1);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 5;
                table4.AddCell(cellh2);


                doc.Add(table4);


                doc.Close();
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=Due for vacating in max time report";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);

            }
            catch (Exception ex)
            {
               messagedisplay("problem found","aa");


            }

        }
        else
        {
            messagedisplay("Select Building to take report", "ww");

        }

    }
    # endregion

    # region Donor Liability Report
    protected void lnkDonorLiability_Click(object sender, EventArgs e)
    {


        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
            int allocid = Convert.ToInt32(Session["allocid"]);
            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string dater = dts.ToString("yyyy-MM-dd").ToString();
            string f2 = dts.ToString("dd/MM/yyyy");
            string dayclosed =objcls.yearmonthdate(txtDaycloseDate.Text);
            string day12 = dayclosed;
            DateTime dayclose1 = DateTime.Parse(dayclosed);
            dayclosed=dayclose1.ToString("dd MMM yyyy");
             DataTable dt = new DataTable();
            DateTime tim1 = DateTime.Now;
            string kk = tim1.ToString("yyyy/MM/dd");
            string yy = tim1.ToString("dd/MM/yyyy");
            yy = tim1.ToString("dd MMM  yyyy");
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "DonorLiability" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;


            try
            {   
            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                 wr.PageEvent = page;
                 doc.Open();
                 page.strRptMode = "donorliability";
                 PdfPTable table = new PdfPTable(8);
                 float[] colWidths23 = { 20, 20, 40, 30, 30, 20, 20, 40 };
                table.SetWidths(colWidths23);
                PdfPCell cell = new PdfPCell(new Phrase("Donor Liabilities register ", font12));
                cell.Colspan = 8;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                 table.AddCell(cell);


                if (Convert.ToInt32(cmbBuildReport2.SelectedValue) != -1)
                {

                    OdbcCommand cmd31 = new OdbcCommand();
                    cmd31.CommandType = CommandType.StoredProcedure;
                    cmd31.Parameters.AddWithValue("tblname", " t_roomvacate tv,m_room mr,m_sub_building msb,t_donorpass tt, m_donor md left join m_sub_district msd on md.district_id=msd.district_id left join m_sub_state mss on mss.state_id=md.state_id,t_roomallocation ta ");
                    cmd31.Parameters.AddWithValue("attribute", " place,districtname,statename,damage_penality,tv.roomrent,tv.dayend,buildingname,bill_receiptno,roomno,donor_name,swaminame,passno,alloc_type,actualvecdate,remark");
                    cmd31.Parameters.AddWithValue("conditionv", "tv.dayend='" + day12 + "'    and liability_by='2'   and mr.build_id='" + cmbBuildReport2.SelectedValue + "'   and msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and md.donor_id=ta.donor_id  and tt.pass_id=ta.pass_id ");
                    dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
            
                PdfPCell cellv = new PdfPCell(new Phrase("Building Name: ", font9));
                cellv.Colspan = 2;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 1;
                table.AddCell(cellv);


                PdfPCell cellv1 = new PdfPCell(new Phrase(cmbBuildReport2.SelectedItem.ToString(), font9));
                cellv1.Colspan = 2;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
               
                table.AddCell(cellv1);
                 
                 }

                 else 
                 {

                     OdbcCommand cmd311 = new OdbcCommand();
                     cmd311.CommandType = CommandType.StoredProcedure;
                     cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb,t_donorpass tt, m_donor md left join m_sub_district msd on md.district_id=msd.district_id left join m_sub_state mss on mss.state_id=md.state_id  ");
                     cmd311.Parameters.AddWithValue("attribute", "place,districtname,statename,damage_penality,tv.roomrent,tv.dayend,buildingname,bill_receiptno,roomno,donor_name,swaminame,passno,alloc_type,actualvecdate,remark");
                     cmd311.Parameters.AddWithValue("conditionv", "tv.dayend='" + day12 + "'    and liability_by='2'    and msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and md.donor_id=ta.donor_id  and tt.pass_id=ta.pass_id  order by mr.build_id");
                     dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);
           
               
                PdfPCell a = new PdfPCell(new Phrase(" All Building ", font9));
                a.Colspan = 4;
                a.Border = 0;
                a.HorizontalAlignment = 1;
                table.AddCell(a);
                 
                 }
                   
                PdfPCell cellv2 = new PdfPCell(new Phrase("Date:", font9));
                cellv2.Colspan =3;
                cellv2.Border = 0;
                cellv2.HorizontalAlignment = 2;
                table.AddCell(cellv2);

                PdfPCell cellv21 = new PdfPCell(new Phrase(txtTime.Text + " On " + dayclosed.ToString(), font9));
                cellv21.Colspan = 2;
                cellv21.HorizontalAlignment = 0;
                cellv21.Border = 0;
                table.AddCell(cellv21);

                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("No", font8)));
                table.AddCell(cell1);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Room no", font8)));
                table.AddCell(cell2);
                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Donor", font8)));
                table.AddCell(cell3);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk("Inmate", font8)));
                table.AddCell(cell4);

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk("Pass No", font8)));
                table.AddCell(cell5);

                PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                table.AddCell(cell6);

                PdfPCell cell7 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                table.AddCell(cell7);
                PdfPCell cell8 = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                table.AddCell(cell8);

                doc.Add(table);
                int i = 0;


                int slno = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    slno = slno + 1;
                    if (i > 33)
                    {


                        i = 0;

                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(8);
                        float[] colWidths231 = { 20, 20, 40, 30, 30, 20, 20, 40 };
                        table1.SetWidths(colWidths231);


                        PdfPCell cell1n = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                        table1.AddCell(cell1n);

                        PdfPCell cell2n = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                        table1.AddCell(cell2n);

                        PdfPCell cell3n = new PdfPCell(new Phrase(new Chunk("Donor", font8)));
                        table1.AddCell(cell3n);

                        PdfPCell cell4n = new PdfPCell(new Phrase(new Chunk("Inmate", font8)));
                        table1.AddCell(cell4n);

                        PdfPCell cell5n = new PdfPCell(new Phrase(new Chunk("Pass No", font8)));
                        table1.AddCell(cell5n);

                        PdfPCell cell6n = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                        table1.AddCell(cell6n);

                        PdfPCell cell7n = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                        table1.AddCell(cell7n);
                        PdfPCell cell8n = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                        table1.AddCell(cell8n);

                        doc.Add(table1);

                    }

                    PdfPTable table3 = new PdfPTable(8);
                   float[] colWidths23u = { 20, 20, 40, 30, 30, 20, 20, 40 };
                    table3.SetWidths(colWidths23u);
                    PdfPCell cell9 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table3.AddCell(cell9);

                    string build="";
                    string building=dr["buildingname"].ToString();
                   if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dr["roomno"].ToString();



                    PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk(building.ToString(), font7)));
                    table3.AddCell(cell10);
                
                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk(dr["donor_name"].ToString()+ "  "+dr["districtname"].ToString()+"  "+dr["statename"].ToString(), font7)));
                    table3.AddCell(cell11);

                    PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(dr["swaminame"].ToString()+"  "+dr["place"].ToString(), font7)));
                    table3.AddCell(cell12);

                    string passno=dr["passno"].ToString();
                    string alloctype=dr["alloc_type"].ToString();
                    if(alloctype=="Donor Free Allocation")
                    {
                        passno=passno+"/"+"Free";

                    }
                    else if(alloctype=="Donor Paid Allocation")
                    {

                        passno=passno+"/"+"Paid";

                    }
                    else if(alloctype=="Donor multiple pass")
                    {
                        passno=passno+"/"+"Multiple Pass";

                    }


                    PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk(passno.ToString(), font7)));
                    table3.AddCell(cell13);

                   DateTime dt5 = DateTime.Parse(dr["actualvecdate"].ToString());
                    string date1 = dt5.ToString("dd MMM");

                    PdfPCell cell15 = new PdfPCell(new Phrase(new Chunk(date1.ToString(), font7)));
                    table3.AddCell(cell15);

                    PdfPCell cell16 = new PdfPCell(new Phrase(new Chunk(dr["damage_penality"].ToString(), font7)));
                    table3.AddCell(cell16);
                    PdfPCell cell161 = new PdfPCell(new Phrase(new Chunk("", font7)));
                    table3.AddCell(cell161);
                    
                    i++;

                    doc.Add(table3);

                }
                PdfPTable table4 = new PdfPTable(8);
                PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                cellfb.PaddingLeft = 20;
                cellfb.Colspan = 8;
                cellfb.MinimumHeight = 30;
                cellfb.Border = 0;
                table4.AddCell(cellfb);

                PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1b.PaddingLeft = 20;
                cellf1b.Colspan = 8;
                cellf1b.Border = 0;
              
                table4.AddCell(cellf1b);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_MIDDLE;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 8;
                table4.AddCell(cellh2);
                doc.Add(table4);
                doc.Close();
               
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=Donor Liability";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);
                
            }

            catch
            {
                messagedisplay("problemfound", "aa");
            } conn.Close();



        }
    # endregion

    # region Session Insert
        public void CompSessions()
    {
        txtClientid.Text = Session["clientid"].ToString();
        txtPropCheckOut.Text = Session["propcheck"].ToString();
        txtAllocNo.Text = Session["allocno"].ToString();
        Session["compfromvacating"] = 0;
        txtAdRecieptNo.Text = Session["reciept"].ToString();
        txtClientid.Text = Session["clientid"].ToString();
        cmbBuilding.SelectedValue = Session["cmbbuildid"].ToString();
        txtRoomNo.Text = Session["roomno"].ToString();
        txtCustomerName.Text = Session["swaminame"].ToString();
        txtCustomerPlace.Text = Session["place"].ToString();
        txtDistrict.Text = Session["district"].ToString();
        txtAllocatedDate.Text = Session["alloctime"].ToString();
        txtAllocatedTime.Text = Session["alloctime"].ToString();
        txtVacatingDate.Text = Session["vacatedate"].ToString();
        txtVecatingTime.Text = Session["vacatetime"].ToString();
        txtDaysStayed.Text = Session["noofdays"].ToString();
        txtAdvanceAmount.Text = Session["advance"].ToString();
        txtGrossAmount.Text = Session["grossamount"].ToString();
        txtBalanceAmount.Text = Session["balance"].ToString();
        btnBalanceIndicator.Text = Session["indicatetext"].ToString();
       
       
        cmbaltbulilding.SelectedValue = Session["buildalternate"].ToString();
        try
        {
            cmbaltroom.SelectedItem.Text = Session["roomalter"].ToString();
        }
        catch { }
        txtAllocRecNo.Text = Session["allocrecno"].ToString();
        txtAllocNumber.Text = Session["alloctransno"].ToString();
        txtExtendDate.Text = Session["extendate"].ToString();
        txtExtendTime.Text = Session["extendtime"].ToString();
        txtNoofDays.Text = Session["noofunits"].ToString();
        txtDepositAlloc.Text = Session["deposit"].ToString();
        txtRentAlloc.Text = Session["rent"].ToString();
        txtAdvAmount.Text = Session["total"].ToString();
        CmbReason.SelectedValue = Session["reason"].ToString();
        cmbCheckOutMehtod.SelectedItem.Text = Session["checkout"].ToString();
        cmbCheckOutMehtod_SelectedIndexChanged(null, null);

        HiddenField1.Value =Session["hidden"].ToString();
        con3 =Convert.ToInt32(Session["con3"]);

        if (Session["x"].ToString() == "1")
        {
            txtKeynotReturnCharge.Visible = true;
            txtKeynotReturnCharge.Text = Session["keypenality"].ToString();
        }
        if (Session["y"].ToString() == "1")
        {
            txtRoomNotGoodCondition.Visible = true;
            txtRoomNotGoodCondition.Text = Session["roomdamage"].ToString();

        }
        
        int color = Convert.ToInt32(Session["color"]);
        if (color == 1)
        {
            btnBalanceIndicator.BackColor = System.Drawing.Color.Red;

        }
        else if (color == 0)
        {
             btnBalanceIndicator.BackColor = System.Drawing.Color.Green;
        }
        rdoRoomCondition.Text = Session["roomcond"].ToString();
        rdoComplaints.Text = Session["complaints"].ToString();
        rdoKeyReturn.Text = Session["keystatus"].ToString();
        txtrecieptno_TextChanged(null, null);
        if (txtClientid.Text != "" || txtAdRecieptNo.Text != "" || ((txtRoomNo.Text != "") && (cmbBuilding.SelectedValue != "-1")))
        {

        

        }
    }
        # endregion

    #region Check Out Method Combo box change
    protected void cmbCheckOutMehtod_SelectedIndexChanged(object sender, EventArgs e)
    {


        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        OdbcCommand cmdx = new OdbcCommand("SELECT NOW()", conn);
        DateTime actualvact = Convert.ToDateTime(cmdx.ExecuteScalar());


         if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
        {
            pnlalternate.Visible = false;
            btnCheckout.Text = "Checkout";
            AllocationRecieptLoad();
            AllocationNumberFind();
            pnlExtend.Visible = true;
            pnlExtend.GroupingText = "Overstay Details";
            txtExtendDate.Text = actualvact.ToString("dd-MM-yyyy");
            txtExtendTime.Text = actualvact.ToString("hh:mm tt");
            txtinmno.Enabled = true;

            if (txtClientid.Text != "" || txtAdRecieptNo.Text != "" || ((txtRoomNo.Text != "") && (cmbBuilding.SelectedValue != "-1")))
             {
                     
                 extend();
                
             }
            
        }
        else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();


            }

            # region Loading alternate building
            string strSql4 = "select  distinct msb.build_id,buildingname from m_room tr,m_sub_building msb ,m_room mr where tr.room_id=mr.room_id and mr.build_id=msb.build_id and mr.roomstatus='1'  and  mr.rowstatus!='2'";
            OdbcDataAdapter da = new OdbcDataAdapter(strSql4, conn);
            DataTable dtt1 = new DataTable();
            DataColumn colID = dtt1.Columns.Add("build_id", System.Type.GetType("System.Int32"));
            DataColumn colNo = dtt1.Columns.Add("buildingname", System.Type.GetType("System.String"));
            DataRow row = dtt1.NewRow();
            row["build_id"] = "-1";
            row["buildingname"] = "--Select--";
            dtt1.Rows.InsertAt(row, 0);
            da.Fill(dtt1);
            cmbaltbulilding.DataSource = dtt1;
            cmbaltbulilding.DataBind();


            # endregion

            pnlExtend.Visible = true;
            pnlExtend.GroupingText = "Alternate room";
            AllocationRecieptLoad();
            AllocationNumberFind();
            pnlalternate.Visible = true;
            btnCheckout.Text = "Realloc";
            txtinmno.Enabled = true;
            if (txtClientid.Text != "" || txtAdRecieptNo.Text != "" || ((txtRoomNo.Text != "") && (cmbBuilding.SelectedValue != "-1")))
            {
                DateTime datedt1 = DateTime.Parse(ViewState["propdat"].ToString());
                string dates11 = datedt1.ToString("dd-MM-yyyy");
                string times11 = datedt1.ToString("hh:mm tt");
                txtExtendDate.Text = dates11.ToString();
                txtExtendTime.Text = times11.ToString();
                txtinmno.Text = Session["inm"].ToString();
                SetFocus(txtinmno);
                extend();
            }

        }
        else if(cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
        {
            pnlExtend.Visible = false;
            pnlalternate.Visible = false;
            txtinmno.Enabled = false;

            if (txtClientid.Text != "" || txtAdRecieptNo.Text != "" || ((txtRoomNo.Text != "") && (cmbBuilding.SelectedValue != "-1")))
            {

                OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
                  DateTime datestring1 = Convert.ToDateTime(cmd.ExecuteScalar());

                ViewState["date"] = datestring1;
             
                txtVacatingDate.Text = datestring1.ToString("dd/MM/yyyy");

                txtVecatingTime.Text = datestring1.ToString("hh:mm tt");

                BalanceAmountCalculations();
                this.ScriptManager1.SetFocus(btnCheckout);

            }
    
        }
        else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Force Vacating")
        {
            txtinmno.Enabled = false;
            pnlExtend.Visible = false;
            pnlalternate.Visible = false;
            btnExecutive.Visible = true;
        }
        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
        {
            pnlalternate.Visible = false;
            btnCheckout.Text = "Realloc";
            AllocationRecieptLoad();
            AllocationNumberFind();
            pnlExtend.Visible = true;
            pnlExtend.GroupingText = "Extended Stay ";
            txtinmno.Enabled = true;

            if (txtClientid.Text != "" || txtAdRecieptNo.Text != "" || ((txtRoomNo.Text != "") && (cmbBuilding.SelectedValue != "-1")))
            {

                txtinmno.Text = Session["inm"].ToString();
                extend();
                SetFocus(txtinmno);

            }
        }
        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Inmates Add")
        {

            pnlalternate.Visible = false;
            btnCheckout.Text = "Realloc";
            AllocationRecieptLoad();
            AllocationNumberFind();
            pnlExtend.Visible = true;
            pnlExtend.GroupingText = "Inmate Add";
            txtinmno.Enabled = true;

            if (txtClientid.Text != "" || txtAdRecieptNo.Text != "" || ((txtRoomNo.Text != "") && (cmbBuilding.SelectedValue != "-1")))
            {
                txtinmno.Text = Session["inm"].ToString();
                extend();
                SetFocus(txtinmno);

            }

        }

    }
     # endregion

    # region Allocation Save
    public void AllocationSave()

    {
        try
        {

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();


            }

         


            #region room alloc max id selection
            int id = 0;
            try
            {
                OdbcCommand cmd90 = new OdbcCommand("CALL selectdata(?,?)", conn);
                cmd90.CommandType = CommandType.StoredProcedure;
                cmd90.Parameters.AddWithValue("tblname", "t_roomallocation");
                cmd90.Parameters.AddWithValue("attribute", "max(alloc_id)");
                OdbcDataAdapter dacnt90 = new OdbcDataAdapter(cmd90);
                DataTable dtt90 = new DataTable();
                dacnt90.Fill(dtt90);
                id = int.Parse(dtt90.Rows[0][0].ToString());
                id = id + 1;
            }
            catch
            {
                id = 1;
            }

            #endregion

            int rec1 = Convert.ToInt32(Session["receipt"]);

            # region Allocation Number calculation


            string dayendd = Session["dayend"].ToString();
               int allocno = 0;

              OdbcCommand cmdtrans = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmdtrans.CommandType = CommandType.StoredProcedure;
            cmdtrans.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmdtrans.Parameters.AddWithValue("attribute", "sum(nooftrans)");
            cmdtrans.Parameters.AddWithValue("conditionv", " date='" +dayendd + "' and ledger_id=" + 1 + "");
            OdbcDataAdapter datrans = new OdbcDataAdapter(cmdtrans);
            DataTable dttrans = new DataTable();
            datrans.Fill(dttrans);
            if (dttrans.Rows.Count > 0)
            {
             
              if (Convert.IsDBNull(dttrans.Rows[0]["sum(nooftrans)"]) == false)
              {
                  

                  allocno = int.Parse(dttrans.Rows[0]["sum(nooftrans)"].ToString());
                    allocno = allocno + 1;
                }
                else
                {
                    allocno = 1;

                }
            }
            else
            {
                allocno = 1;

            }
            DateTime day1 = DateTime.Parse(dayendd.ToString());
            string day = day1.ToString("dd");

            int day2 = Convert.ToInt32(day);
            string allocno1 = allocno + "-" + day;



            # endregion

            # region  Barcode commented

            #endregion


               string    barDateCode = "";
               string    barMonthCode = "";
               string    BarYearCode = "";
               string   barTransCode = "";
               string   barRomCode = "";
            string allocationNo = allocno.ToString();
            string barAllocNo = allocno.ToString();
            int roomid3 = 0;
            if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
            {
              roomid3=Convert.ToInt32(cmbaltroom.SelectedValue.ToString());
            }
            else
            {
                roomid3 = Convert.ToInt32(Session["roomid"]);

            }

            #region client id  GENERATE

            DateTime barMonth = DateTime.Now;
            string barMonths = barMonth.ToString("MM");
            string strSelect = "code";

            string strTable = "(select code from coding  where Number=" + day2 + ""
            + " union all"
            + " select code from coding  where Number=" + int.Parse(barMonths.ToString()) + ""
            + " union all"
            + " select code from coding where Number=" + int.Parse(Session["YearCode"].ToString()) + ""
            + " union all"
            + " select code from coding2 where Number=" + int.Parse(barAllocNo.ToString()) + ""
            + " union all"
            + " select code from coding2  where Number=" + roomid3  + ")tbl";
          
            OdbcCommand cmdbarcode = new OdbcCommand("CALL selectdata(?,?)", conn);
            cmdbarcode.CommandType = CommandType.StoredProcedure;
            cmdbarcode.Parameters.AddWithValue("tblname", strTable);
            cmdbarcode.Parameters.AddWithValue("attribute", strSelect);
            cmdbarcode.Transaction = odbTrans;
            OdbcDataAdapter dabarcode = new OdbcDataAdapter(cmdbarcode);
            DataTable dtbarcode = new DataTable();
            dabarcode.Fill(dtbarcode);
            if (dtbarcode.Rows.Count > 0)
            {
                barDateCode = "";
                barMonthCode = "";
                BarYearCode = "";
                barTransCode = "";
                barRomCode = "";

                barDateCode = dtbarcode.Rows[0]["code"].ToString();
                barMonthCode = dtbarcode.Rows[1]["code"].ToString();
                BarYearCode = dtbarcode.Rows[2]["code"].ToString();
                barTransCode = dtbarcode.Rows[3]["code"].ToString();
                barRomCode = dtbarcode.Rows[4]["code"].ToString();
            }
            string   barencrypt = barDateCode + barMonthCode + BarYearCode + barTransCode + barRomCode;
            Session["barcod"] = barencrypt.ToString();
            barencrypt = base64Encode(barencrypt.ToString());
            #endregion        

            OdbcCommand cmdss = new OdbcCommand("SELECT NOW()", conn);
            DateTime update = Convert.ToDateTime(cmdss.ExecuteScalar());

 
            string updatedate = update.ToString("yyyy/MM/dd") + ' ' + update.ToString("HH:mm:ss");
            int rec = 0;


            #region old/new reciept increment

            string pprintrec = "no";

            double normrecpt = 0;

            //if (chkOldReceipt.Checked == true)
            //{
            //    try
            //    {

            //        OdbcCommand cx = new OdbcCommand("select max(adv_recieptno) from t_roomallocation where  t_roomallocation.alloc_id = (SELECT MAX(alloc_id)  FROM t_roomallocation WHERE is_plainprint='" + "yes" + "' and counter_id=" + int.Parse(Session["counterid"].ToString()) + ")", conn);
            //        OdbcDataReader ox = cx.ExecuteReader();
            //        if (ox.Read())
            //        {
            //            rec = Convert.ToInt32(ox["adv_recieptno"]);
            //            rec = rec + 1;
            //        }
            //    }
            //    catch
            //    {

            //    }
            //    pprintrec = "yes";

            //}
            //else
            //{
                try
                {
                    string ST = @"select max(adv_recieptno) from t_roomallocation where is_plainprint='" + "no" + "' and counter_id=" + int.Parse(Session["counterid"].ToString()) + "";
                    OdbcCommand cx1 = new OdbcCommand("select max(adv_recieptno) from t_roomallocation where t_roomallocation.alloc_id = (SELECT MAX(alloc_id)  FROM t_roomallocation WHERE is_plainprint='" + "no" + "' and counter_id=" + int.Parse(Session["counterid"].ToString()) + ")", conn);
                    cx1.Transaction = odbtrans1;
                    OdbcDataReader ox1 = cx1.ExecuteReader();
                    if (ox1.Read())
                    {
                        rec = Convert.ToInt32(ox1["adv_recieptno"]);
                        rec = rec + 1;
                    }


                }
                catch
                {

                }

                pprintrec = "no";
            //}

            #endregion

          

            OdbcCommand cmdxa = new OdbcCommand("SELECT NOW()", conn);
            DateTime curYear = Convert.ToDateTime(cmdxa.ExecuteScalar());

            string date = curYear.ToString("yyyy-MM-dd") + ' ' + curYear.ToString("HH:mm:ss");
            int allocid = Convert.ToInt32(Session["allocid"]);
            cashierid = Convert.ToInt32(Session["cashierid"]);
            int counter = Convert.ToInt32(Session["counterid"]);

            userid = Convert.ToInt32(Session["userid"]);

            string allocdate = "";
            DateTime time11, time22;
            string time111 = "", time222 = "", vacatedate="";

            if (cmbCheckOutMehtod.SelectedItem.ToString() != "Normal")
            {
                 allocdate = objcls.yearmonthdate(txtVacatingDate.Text.ToString());

                 time11 = DateTime.Parse(txtVecatingTime.Text);
                 time111 = time11.ToString("HH:mm");
                allocdate = allocdate + " " + time111;

                 time22 = DateTime.Parse(txtExtendTime.Text);
                 time222 = time22.ToString("HH:mm");

                vacatedate = objcls.yearmonthdate(txtExtendDate.Text.ToString());
                vacatedate = vacatedate + " " + time222;
            }

            /////////////////////////////////////////////////----keynot returned-----///////////////////////2222222222222222222222222222222
              
            int otherch = 0;

            if (Session["normflag"].ToString() == "true")
            {
               if(cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
               {

                   OdbcCommand cmdxs = new OdbcCommand("select max(adv_recieptno)  AS 'REC' from t_roomallocation where  t_roomallocation.alloc_id = (SELECT MAX(alloc_id)  FROM t_roomallocation WHERE  is_plainprint='" + "no" + "' and counter_id=" + int.Parse(Session["counterid"].ToString()) + " )", conn);
                      
                        OdbcDataReader ox12 = cmdxs.ExecuteReader();
                    if (ox12.Read())
                    {
                        normrecpt = Convert.ToDouble(ox12["REC"]);
                        normrecpt = normrecpt + 1;
                    }

                        allocdate = objcls.yearmonthdate(txtVacatingDate.Text.ToString());

                        time11 = DateTime.Parse(txtVecatingTime.Text);
                         time111 = time11.ToString("HH:mm");
                        allocdate = allocdate + " " + time111;

                         time22 = DateTime.Parse(txtVecatingTime.Text);
                         time222 = time22.ToString("HH:mm");

                         vacatedate = objcls.yearmonthdate(txtVacatingDate.Text.ToString());
                        vacatedate = vacatedate + " " + time222;

                        txtAllocRecNo.Text = normrecpt.ToString();
                           txtNoofDays.Text = "0";
                       txtRentAlloc.Text = "0";
                       txtAdvAmount.Text = "0";
                       txtDepositAlloc.Text = "0";
                      otherch = Convert.ToInt32(txtKeynotReturnCharge.Text);
                      txtExtendDate.Text = "00-00-0000";
                      txtExtendTime.Text = "12:00 AM";

               }

            }

              OdbcCommand cmdxax = new OdbcCommand("SELECT NOW()", conn);
            DateTime datenow = Convert.ToDateTime(cmdxax.ExecuteScalar());
                      
            odbtrans1 = conn.BeginTransaction();

            SaveinCashierLiability();
           
            int allocprevid = Convert.ToInt32(Session["allocid"]);
            string customer = Session["customer"].ToString();

          

            string f22 = datenow.ToString("dd/MM/yyyy");
            string datetoday =objcls. yearmonthdate(f22);
            datetoday = datetoday + " " + datenow.ToString("HH:mm:ss");
            string dayend = Session["dayend"].ToString();

            DataTable dtt20511 = new DataTable();
            if (Session["normflag"].ToString() == "true")
            {
                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                {
                    OdbcCommand cmd20510 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmd20510.CommandType = CommandType.StoredProcedure;
                    cmd20510.Parameters.AddWithValue("tblname", "t_roomallocation");
                    cmd20510.Parameters.AddWithValue("attribute", "*");
                    cmd20510.Parameters.AddWithValue("conditionv", "  alloc_id=" + allocid + " ");
                    cmd20510.Transaction = odbtrans1;
                    OdbcDataAdapter dacnt20511 = new OdbcDataAdapter(cmd20510);
                     dtt20511 = new DataTable();
                    dacnt20511.Fill(dtt20511);
                }
            }
            else
            {
                OdbcCommand cmd20510 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd20510.CommandType = CommandType.StoredProcedure;
                cmd20510.Parameters.AddWithValue("tblname", "t_roomallocation");
                cmd20510.Parameters.AddWithValue("attribute", "*");
                cmd20510.Parameters.AddWithValue("conditionv", "  alloc_id=" + allocid + " and roomstatus='2' ");
                cmd20510.Transaction = odbtrans1;
                OdbcDataAdapter dacnt20511 = new OdbcDataAdapter(cmd20510);
                 dtt20511 = new DataTable();
                dacnt20511.Fill(dtt20511);

            }

            Session["allocdt"] = dtt20511;

            if (dtt20511.Rows.Count > 0)
            {
                Session["allocationdt"] = dtt20511;

                int roomid = 0;


                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {
                    roomid = Convert.ToInt32(cmbaltroom.SelectedValue);
                  
                }
                else
                {
                    roomid = Convert.ToInt32(dtt20511.Rows[0]["room_id"]);

                }


                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room" || cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay" || cmbCheckOutMehtod.SelectedItem.ToString() == "Inmates Add")
                {
                    allocdate = objcls.yearmonthdate(txtAllocatedDate.Text.ToString());

                    time11 = DateTime.Parse(txtAllocatedTime.Text);
                    time111 = time11.ToString("HH:mm");
                    allocdate = allocdate + " " + time111;

                }


                Session["transno"] = allocno1.ToString();

                OdbcCommand cmd3 = new OdbcCommand("CALL savedata(?,?)", conn);
                cmd3.CommandType = CommandType.StoredProcedure;
                cmd3.Parameters.AddWithValue("tblname", "t_roomallocation");


                string strsave1 = " " + id + ","
                                 + " '" + allocno1.ToString() + "',";
              
                if (Convert.IsDBNull(dtt20511.Rows[0]["reserve_id"]) == false)
                {
                    strsave1 = strsave1 + " '" + dtt20511.Rows[0]["reserve_id"] + "',";
                }
                else
                {
                    strsave1 = strsave1 + "null,";

                }

                strsave1 = strsave1 + "'" + dtt20511.Rows[0]["swaminame"].ToString() + "',";

                if (Convert.IsDBNull(dtt20511.Rows[0]["state_id"]) == false)
                {
                    strsave1 = strsave1 + " " + Convert.ToInt32(dtt20511.Rows[0]["state_id"]) + ",";
                }
                else

                    strsave1 = strsave1 + "null,";

                if (Convert.IsDBNull(dtt20511.Rows[0]["district_id"]) == false)
                {
                    strsave1 = strsave1 + "" + Convert.ToInt32(dtt20511.Rows[0]["district_id"]) + ",";


                }

                else
                    strsave1 = strsave1 + "null,";



                strsave1 = strsave1 + " '" + dtt20511.Rows[0]["place"].ToString() + "',"
                   + "'" + dtt20511.Rows[0]["std"].ToString() + "',"

                   + "'" + dtt20511.Rows[0]["phone"].ToString() + "',"
                   + "'" + dtt20511.Rows[0]["mobile"].ToString() + "',";



                if (Convert.IsDBNull(dtt20511.Rows[0]["idproof"]) == false)
                {
                    strsave1 = strsave1 + "'" + dtt20511.Rows[0]["idproof"].ToString() + "'," + "'" + dtt20511.Rows[0]["idproofno"].ToString() + "',";

                }
                else
                {
                    strsave1 = strsave1 + "null," + "null,";

                }

                
              //    /////////////////////////////////////////////////----keynot returned-----///////////////////////2222222222222222222222222222222
             
           
                strsave1 = strsave1 + "" + roomid + ","
                 + "" + txtinmno.Text + ","
                 + "'" + allocdate + "',"
                 + "'" + vacatedate + "',"
                 + "'" + barencrypt + "',"
                 + "'" + pprintrec + "',"
                 + "" + Convert.ToInt32(txtAllocRecNo.Text) + ","
                 + "" + Convert.ToInt32(txtNoofDays.Text) + ",";

                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                {
                    strsave1 = strsave1 + "'General Allocation',";

                }
                else
                {
                    strsave1 = strsave1 + "'" + dtt20511.Rows[0]["alloc_type"].ToString() + "',";
                }
                if ((Convert.IsDBNull(dtt20511.Rows[0]["pass_id"]) == false) && (cmbCheckOutMehtod.SelectedItem.ToString() != "Overstay"))
                {
                    strsave1 = strsave1 + "" + Convert.ToInt32(dtt20511.Rows[0]["pass_id"]) + ","
                    + "" + Convert.ToInt32(dtt20511.Rows[0]["donor_id"]) + ",";

                }
                else
                {
                    strsave1 = strsave1 + "null,null,";

                }


                strsave1 = strsave1 + "'" + dayend + "',"
                + "" + userid + ","
                + "" + Convert.ToInt32(txtRentAlloc.Text) + " ,"
                + "" + 2 + ","
                + "" + Convert.ToInt32(txtAdvAmount.Text) + ","
                + "" + Convert.ToInt32(txtDepositAlloc.Text) + ","
                + "" + Convert.ToInt32(dtt20511.Rows[0]["rescharge"]) + ","
                + "null, "
                + "" + otherch + ","
                + "" + Convert.ToInt32(txtAdvAmount.Text) + ","
                + "" + 0 + ","
                + "" + Convert.ToInt32(dtt20511.Rows[0]["season_id"]) + ","
                + "" + counter + ","
                + "" + userid + ","
                + "'" + datetoday + "',"
                + "" + allocid + ",";

                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {
                    strsave1 = strsave1 + "" + Convert.ToInt32(CmbReason.SelectedValue) + "";
                 
                }
                else
                {
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Inmates Add")
                    {
                        strsave1 = strsave1 + "196";
                    }
                    else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                    {
                        strsave1 = strsave1 + "194";
                    }
                    else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                    {
                        strsave1 = strsave1 + "195";
                    }
                    else
                    {
                        strsave1 = strsave1 + "null";
                    }
                }
                if (ViewState["payment_mode123"] == "")
                {
                    strsave1 = strsave1+"," + "null";


                }
                else
                {
                    //strsave1 = strsave1 + "," + payMode;
                    strsave1 = strsave1 + "," + ViewState["payment_mode123"].ToString();
                }

                cmd3.Parameters.AddWithValue("valu", strsave1);
                cmd3.Transaction = odbtrans1;
                cmd3.ExecuteNonQuery();


                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {

                    if (Session["customer"].ToString() == "Clubbing")
                    {


                        double  slot = 0, depochk=0;
                                      
                        OdbcCommand cmd991ui = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                        cmd991ui.CommandType = CommandType.StoredProcedure;
                        cmd991ui.Parameters.AddWithValue("tblname", "t_clubdetails");
                        cmd991ui.Parameters.AddWithValue("attribute", "CAST(checkindate AS CHAR(25))AS 'checkindate',CAST(checkoutdate AS CHAR(25))AS 'checkoutdate',alloc_type,TIMEDIFF(checkoutdate,checkindate),passno,rent,deposit,othercharge,alloc_type,reserve_id ");
                        cmd991ui.Parameters.AddWithValue("conditionv", "alloc_id ='" + Session["allocid"].ToString() + "'");
                        cmd991ui.Transaction = odbtrans1;
                        OdbcDataAdapter dat991ui = new OdbcDataAdapter(cmd991ui);
                        DataTable dt_stvx = new DataTable();
                        dat991ui.Fill(dt_stvx);

                        if (dt_stvx.Rows.Count > 0)
                        {
                            for (int i = 0; i < dt_stvx.Rows.Count; i++)
                            {
                                rentchk = 0; depochk = 0;
                                TimeSpan actperiod1x = TimeSpan.Parse(dt_stvx.Rows[i][3].ToString());
                                int rtime = 0;
                                rtime = Convert.ToInt32(actperiod1x.TotalHours);
                                if ((actperiod1x.Minutes > 0) && (actperiod1x.Minutes < 30))
                                {
                                    rtime++;
                                }


                                slot = slot + Convert.ToDouble(rtime);

                           
                                OdbcCommand cmdRR = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                                cmdRR.CommandType = CommandType.StoredProcedure;
                                cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                                cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
                                cmdRR.Parameters.AddWithValue("conditionv", " ('" + rtime + "' > m_rent.start_duration)  AND ('" + rtime + "' <= m_rent.end_duration ) AND m_room.room_id = '" + cmbaltroom.SelectedValue + "' AND  m_room.build_id = '" + cmbaltbulilding.SelectedValue + "'  AND  room_cat_id = m_rent.room_category  AND m_room.room_id = m_inmate.room_id AND ( '" + rtime + "' > m_inmate.start_duration)  AND ('" + rtime + "' <= m_inmate.end_duration ) ");
                                cmdRR.Transaction = odbtrans1;
                                OdbcDataAdapter dat9ui = new OdbcDataAdapter(cmdRR);
                                DataTable dtRR = new DataTable();
                                dat9ui.Fill(dtRR);


                                if (dtRR.Rows.Count > 0)
                                {

                                    rentchk = Convert.ToDouble(dtRR.Rows[0]["rent"].ToString());

                                    depochk = Convert.ToDouble(dtRR.Rows[0]["security_deposit"].ToString());
                                    
                                    if (dt_stvx.Rows[i][2].ToString() == "Donor Free Allocation")
                                    {
                                        rentchk = 0;
                                       
                                    }


                                    string resrvid = "null";
                                   
                                    string clubsave = "'" + id + "','0','" + dt_stvx.Rows[i]["checkindate"].ToString() + "','" + dt_stvx.Rows[i]["checkoutdate"].ToString() + "','" + rentchk + "','" + depochk + "','" + dt_stvx.Rows[i]["othercharge"].ToString() + "','" + dt_stvx.Rows[i]["alloc_type"].ToString() + "'," + resrvid + "";
                                    OdbcCommand cmd5xcv = new OdbcCommand("CALL savedata(?,?)", conn);
                                    cmd5xcv.CommandType = CommandType.StoredProcedure;
                                    cmd5xcv.Parameters.AddWithValue("tblname", "t_clubdetails (alloc_id,passno,checkindate,checkoutdate,rent,deposit,othercharge,alloc_type,reserve_id)");
                                    cmd5xcv.Parameters.AddWithValue("val", clubsave);
                                    cmd5xcv.Transaction = odbtrans1;
                                    cmd5xcv.ExecuteNonQuery();

                                }                    
                            }
                        
                        }

                    }

                }


                if (Session["inmate"].ToString() == "ok")
                {
                    double inmtot = Convert.ToDouble(txtinmdeposit.Text) + Convert.ToDouble(txtinmcharge.Text);

                    string stvc = @"INSERT INTO t_inmateallocation (alloc_id,extra_inmates,TIME,rate,inmatecharge,inmatedeposit,totalcharge,realloc_from) VALUES ('" + id + "','" + Session["count"].ToString() + "','" + Session["time"].ToString() + "','" + Session["inmrate"].ToString() + "','" + txtinmcharge.Text + "','" + txtinmdeposit.Text + "','" + inmtot + "','" + allocid + "')";
                    OdbcCommand cmnstvc = new OdbcCommand(stvc, conn);
                    cmnstvc.Transaction = odbtrans1;
                    cmnstvc.ExecuteNonQuery();

                }


                if (cmbCheckOutMehtod.SelectedItem.ToString() != "Inmates Add")
                {
                    OdbcCommand cmd30 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd30.CommandType = CommandType.StoredProcedure;
                    cmd30.Parameters.AddWithValue("tablename", "m_room");


                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay" || cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                    {
                        cmd30.Parameters.AddWithValue("valu", "roomstatus='1',updateddate='" + datetoday + "'");
                        cmd30.Parameters.AddWithValue("convariable", "build_id=" + Convert.ToInt32(cmbBuilding.SelectedValue) + " and roomno=" + int.Parse(txtRoomNo.Text) + "");


                    }
                    else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                    {
                        cmd30.Parameters.AddWithValue("valu", "roomstatus='4',updateddate='" + datetoday + "'");
                        cmd30.Parameters.AddWithValue("convariable", "build_id=" + Convert.ToInt32(cmbaltbulilding.SelectedValue) + " and roomno=" + Convert.ToInt32(cmbaltroom.SelectedItem.ToString()) + "");

                    }
                    else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                    {
                        cmd30.Parameters.AddWithValue("valu", "roomstatus='4',updateddate='" + datetoday + "'");
                        cmd30.Parameters.AddWithValue("convariable", "build_id=" + Convert.ToInt32(cmbBuilding.SelectedValue) + " and roomno=" + int.Parse(txtRoomNo.Text) + "");


                    }
                    cmd30.Transaction = odbtrans1;

                    cmd30.ExecuteNonQuery();

                }

                decimal bal = 0;
                depo = int.Parse(txtDepositAlloc.Text);
                depo = depo + int.Parse(txtinmdeposit.Text);

                OdbcCommand cmd991 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd991.CommandType = CommandType.StoredProcedure;
                cmd991.Parameters.AddWithValue("tblname", "t_security_deposit"); 
                cmd991.Parameters.AddWithValue("attribute", "balance");
                cmd991.Parameters.AddWithValue("conditionv", "deposit_id = (SELECT MAX(deposit_id) FROM t_security_deposit WHERE counter1 = '" + int.Parse(Session["counterid"].ToString()) + "')");
                cmd991.Transaction = odbtrans1;
                OdbcDataAdapter dat991 = new OdbcDataAdapter(cmd991);
                DataTable dacnt991 = new DataTable();
                dat991.Fill(dacnt991);

                if (dacnt991.Rows.Count > 0)
                {

                    bal = int.Parse(dacnt991.Rows[0]["balance"].ToString());

                }


                bal = bal + depo;
                string savdep = "'" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["userid"].ToString()) + "','" + dtt20511.Rows[0]["season_id"] + "','" + int.Parse(Session["malyyearid"].ToString()) + "','" + datetoday + "',1,'" + id + "','" + depo + "','" + bal + "'";

                OdbcCommand cmd57 = new OdbcCommand("CALL savedata(?,?)", conn);
                cmd57.CommandType = CommandType.StoredProcedure;
                cmd57.Parameters.AddWithValue("tblname", " t_security_deposit (counter1,counter2,USER,season,mal_year,trandate,trans_type,trans_no,amount,balance)");
                cmd57.Parameters.AddWithValue("val", savdep);
                cmd57.Transaction = odbtrans1;
                cmd57.ExecuteNonQuery();


                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                {
                    roomid = Convert.ToInt32(cmbaltroom.SelectedValue);

                    if (customer == "Donor multiple pass")
                    {
                        OdbcCommand cmdf = new OdbcCommand("select pass_id from t_roomalloc_multiplepass where alloc_id=" + allocprevid + "", conn);
                        cmdf.Transaction = odbtrans1;
                        OdbcDataReader orf = cmdf.ExecuteReader();
                        while (orf.Read())
                        {
                            OdbcCommand cmdpass = new OdbcCommand("insert into t_roomalloc_multiplepass values(" + id + "," + Convert.ToInt32(orf["pass_id"]) + ")", conn);
                            cmdpass.Transaction = odbtrans1;
                            cmdpass.ExecuteNonQuery();


                        }

                    }


                }
                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                {
                    int vacateid = 0;
                    OdbcCommand cmdvacate = new OdbcCommand("CALL selectdata(?,?)", conn);
                    cmdvacate.CommandType = CommandType.StoredProcedure;
                    cmdvacate.Parameters.AddWithValue("tblname", "t_roomvacate");
                    cmdvacate.Parameters.AddWithValue("attribute", "max(vacate_id)as vacate_id ");
                    cmdvacate.Transaction = odbtrans1;
                    OdbcDataAdapter dacntvacate = new OdbcDataAdapter(cmdvacate);
                    DataTable dttvacate = new DataTable();
                    dacntvacate.Fill(dttvacate);
                    if (Convert.IsDBNull(dttvacate.Rows[0]["vacate_id"]) == false)
                    {

                        vacateid = Convert.ToInt32(dttvacate.Rows[0]["vacate_id"]);
                        vacateid = vacateid + 1;

                    }
                    else
                    {
                        vacateid = 1;

                    }

                
                
                    OdbcCommand cm3 = new OdbcCommand("CALL savedata(?,?)", conn);
                    cm3.CommandType = CommandType.StoredProcedure;
                    cm3.Parameters.AddWithValue("tblname", "t_roomvacate");
                    Int32 grossamount = Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtDepositAlloc.Text);
                    
                        string sqlquery = "" + vacateid + ",'" + dayendd + "'," + id + "," + userid + ",null," + 0 + ",'" + "" + "'," + 0 + ", "
                        + " '" + datetoday + "'," + 0 + ",'" + 0 + "','" + 1 + "', '" + 0 + "',   '" + 1 + "', '" + 0 + "','" + 1 + "','" + 0 + "',"
                        + " '" + 0 + "'  , '0', " + Convert.ToInt32(txtRentAlloc.Text) + "," + Convert.ToInt32(txtDepositAlloc.Text) + "," + grossamount + "," + counter + ", "
                        + " " + userid + ",'" + datetoday + "' ,'Overstay','" + 0 + "','" + 0 + "','" + 0 + "'";
                        cm3.Parameters.AddWithValue("val", sqlquery);

                        cm3.Transaction = odbtrans1;
                        cm3.ExecuteNonQuery();
                        Session["edit"] = 0;

                      

                        OdbcCommand cm3d = new OdbcCommand("CALL savedata(?,?)", conn);
                        cm3d.CommandType = CommandType.StoredProcedure;
                        cm3d.Parameters.AddWithValue("tblname", "t_roomvacate");
                       
                        Int32 newvactid = vacateid + 1;
                        DateTime datepropc = DateTime.Parse(dtt20511.Rows[0]["exp_vecatedate"].ToString());
                        string propdatex = datepropc.ToString("yyyy-MM-dd HH:mm");

                        string sqlqueryw = "" + newvactid + ",'" + dayendd + "'," + allocid + "," + userid + ",null," + 0 + ",'" + "" + "'," + 0 + ", "
                        + " '" + propdatex.ToString() + "'," + 0 + ",'" + 0 + "','" + 1 + "', '" + 0 + "',   '" + 1 + "', '" + 0 + "','" + 1 + "','" + 0 + "',"
                        + " '" + 0 + "'  , '0', " + Convert.ToInt32(dtt20511.Rows[0]["roomrent"].ToString()) + "," + Convert.ToInt32(dtt20511.Rows[0]["deposit"].ToString()) + "," + Convert.ToInt32(dtt20511.Rows[0]["advance"].ToString()) + "," + counter + ", "
                        + " " + userid + ",'" + datetoday + "' ,null,'" + 0 + "','" + 0 + "','" + 0 + "'";
                        cm3d.Parameters.AddWithValue("val", sqlqueryw);
                        cm3d.Transaction = odbtrans1;
                        cm3d.ExecuteNonQuery();
                 

                    OdbcCommand cmd30x = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd30x.CommandType = CommandType.StoredProcedure;
                    cmd30x.Parameters.AddWithValue("tablename", "t_roomallocation");
                    cmd30x.Parameters.AddWithValue("valu", "roomstatus='1'");
                    cmd30x.Parameters.AddWithValue("convariable", "  alloc_id=" + allocid + " and roomstatus='2' ");
                    cmd30x.Transaction = odbtrans1;
                    cmd30x.ExecuteNonQuery();

                    OdbcCommand cmd30x1 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd30x1.CommandType = CommandType.StoredProcedure;
                    cmd30x1.Parameters.AddWithValue("tablename", "t_roomallocation");
                    cmd30x1.Parameters.AddWithValue("valu", "roomstatus='1'");
                    cmd30x1.Parameters.AddWithValue("convariable", "  alloc_id=" + id + " and roomstatus='2' ");
                    cmd30x1.Transaction = odbtrans1;
                    cmd30x1.ExecuteNonQuery();


                    # region Loading Season Deposit
                    OdbcCommand cmdseasond = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmdseasond.CommandType = CommandType.StoredProcedure;
                    cmdseasond.Parameters.AddWithValue("tblname", "t_settings");
                    cmdseasond.Parameters.AddWithValue("attribute", " mal_year,mal_year_id,cashier_id,year_code");
                    cmdseasond.Parameters.AddWithValue("conditionv", " end_eng_date>=curdate() and start_eng_date<=curdate() and is_current='1' ");
                    cmdseasond.Transaction = odbtrans1;
                    OdbcDataReader or3 = cmdseasond.ExecuteReader();
                    if (or3.Read())
                    {
                        malyear = Convert.ToInt32(or3["mal_year"]);
                        malyearid = Convert.ToInt32(or3["mal_year_id"]);
                        cashierid = Convert.ToInt32(or3["cashier_id"]);
                        Session["malyear"] = malyear;
                        Session["malyyearid"] = malyearid;
                        Session["cashierid"] = cashierid;
                        Session["yearcode"] = or3["year_code"];

                    }
                    DateTime cur2 = DateTime.Now;
                    int currentyear = cur2.Year;
                    OdbcCommand cmdseasonname = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmdseasonname.CommandType = CommandType.StoredProcedure;
                    cmdseasonname.Parameters.AddWithValue("tblname", "m_season ss,m_sub_season  sms");
                    cmdseasonname.Parameters.AddWithValue("attribute", "season_id,ss.season_sub_id");
                    cmdseasonname.Parameters.AddWithValue("conditionv", "(curdate()>=startdate and   curdate()<=enddate) and is_current='1'  and  ss.season_sub_id=sms.season_sub_id");

                    cmdseasonname.Transaction = odbtrans1;
                    OdbcDataAdapter dtt3911x = new OdbcDataAdapter(cmdseasonname);
                    DataTable dtt205 = new DataTable();
                    dtt3911x.Fill(dtt205);

                    int seasonid1 = 0;
                    int seasonsubid = 0;
                    if (dtt205.Rows.Count > 0)
                    {
                        seasonid1 = Convert.ToInt32(dtt205.Rows[0]["season_id"]);
                        seasonsubid = Convert.ToInt32(dtt205.Rows[0]["season_sub_id"]);
                        Session["season_subid"] = seasonsubid;
                        Session["currentseasonid"] = seasonid1;
                    }
                    OdbcCommand cmddeposit = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmddeposit.CommandType = CommandType.StoredProcedure;
                    cmddeposit.Parameters.AddWithValue("tblname", "t_seasondeposit");
                    cmddeposit.Parameters.AddWithValue("attribute", "totaldeposit");
                    cmddeposit.Parameters.AddWithValue("conditionv", "season_id =" + seasonid1 + " and mal_year_id=" + malyearid + "");
                    

                    cmddeposit.Transaction = odbtrans1;
                    OdbcDataAdapter dtt3911 = new OdbcDataAdapter(cmddeposit);
                    DataTable dtt391 = new DataTable();
                    dtt3911.Fill(dtt391);

                    int deposit = 0;
                   
                    int se = 0;
                    if (dtt391.Rows.Count > 0)
                    {
                         se = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
                         deposit = Convert.ToInt32(dtt20511.Rows[0]["deposit"].ToString());
                        se = se - deposit;

                    }

                    # endregion

                    OdbcCommand cmd30x1x = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd30x1x.CommandType = CommandType.StoredProcedure;
                    cmd30x1x.Parameters.AddWithValue("tablename", "t_seasondeposit");
                    cmd30x1x.Parameters.AddWithValue("valu", "totaldeposit=" + se + "");
                    cmd30x1x.Parameters.AddWithValue("convariable", "season_id =" + seasonid1 + " and mal_year_id=" + malyearid + "");
                    cmd30x1x.Transaction = odbtrans1;
                    cmd30x1x.ExecuteNonQuery();

                    depo = int.Parse(txtDepositAlloc.Text);

                   //OdbcCommand cmd9x91 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                   //cmd9x91.CommandType = CommandType.StoredProcedure;
                   //cmd9x91.Parameters.AddWithValue("tblname", "t_security_deposit");
                   //cmd9x91.Parameters.AddWithValue("attribute", "balance");
                   //cmd9x91.Parameters.AddWithValue("conditionv", "deposit_id = (SELECT MAX(deposit_id) FROM t_security_deposit WHERE counter1 = '" + int.Parse(Session["counterid"].ToString()) + "')");
                   //cmd9x91.Transaction = odbtrans1;
                   //OdbcDataAdapter dat9x91 = new OdbcDataAdapter(cmd9x91);
                   // DataTable dacnt9x91 = new DataTable();
                   // dat9x91.Fill(dacnt9x91);

                    if (dacnt991.Rows.Count > 0)
                    {

                        bal = int.Parse(dacnt991.Rows[0]["balance"].ToString());

                    }


                    bal = bal - depo;
                    savdep = "'" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["userid"].ToString()) + "','" + seasonid1 + "','" + int.Parse(Session["malyyearid"].ToString()) + "','" + datetoday + "',5,'" + vacateid + "',-'" + depo + "','" + bal + "'";

                    OdbcCommand cmd5cv7 = new OdbcCommand("CALL savedata(?,?)", conn);
                    cmd5cv7.CommandType = CommandType.StoredProcedure;
                    cmd5cv7.Parameters.AddWithValue("tblname", " t_security_deposit (counter1,counter2,USER,season,mal_year,trandate,trans_type,trans_no,amount,balance)");
                    cmd5cv7.Parameters.AddWithValue("val", savdep);
                    cmd5cv7.Transaction = odbtrans1;
                    cmd5cv7.ExecuteNonQuery();

                    bal = bal - deposit;
                    savdep = "'" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["userid"].ToString()) + "','" + seasonid1 + "','" + int.Parse(Session["malyyearid"].ToString()) + "','" + datetoday + "',5,'" + newvactid + "',-'" + deposit + "','" + bal + "'";

                    OdbcCommand cmd57cv = new OdbcCommand("CALL savedata(?,?)", conn);
                    cmd57cv.CommandType = CommandType.StoredProcedure;
                    cmd57cv.Parameters.AddWithValue("tblname", " t_security_deposit (counter1,counter2,USER,season,mal_year,trandate,trans_type,trans_no,amount,balance)");
                    cmd57cv.Parameters.AddWithValue("val", savdep);
                    cmd57cv.Transaction = odbtrans1;
                    cmd57cv.ExecuteNonQuery();


                }
                else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay" || cmbCheckOutMehtod.SelectedItem.ToString() == "Inmates Add")
                {

                    int vacateid = 0;
                    OdbcCommand cmdvacate = new OdbcCommand("CALL selectdata(?,?)", conn);
                    cmdvacate.CommandType = CommandType.StoredProcedure;
                    cmdvacate.Parameters.AddWithValue("tblname", "t_roomvacate");
                    cmdvacate.Parameters.AddWithValue("attribute", "max(vacate_id)as vacate_id ");
                    cmdvacate.Transaction = odbtrans1;
                    OdbcDataAdapter dacntvacate = new OdbcDataAdapter(cmdvacate);
                    DataTable dttvacate = new DataTable();
                    dacntvacate.Fill(dttvacate);
                    if (Convert.IsDBNull(dttvacate.Rows[0]["vacate_id"]) == false)
                    {

                        vacateid = Convert.ToInt32(dttvacate.Rows[0]["vacate_id"]);
                        vacateid = vacateid + 1;

                    }
                    else
                    {
                        vacateid = 1;

                    }


                    Session["edit"] = 0;


                    OdbcCommand cm3d = new OdbcCommand("CALL savedata(?,?)", conn);
                    cm3d.CommandType = CommandType.StoredProcedure;
                    cm3d.Parameters.AddWithValue("tblname", "t_roomvacate");

                    Int32 newvactid = vacateid;
                    DateTime datepropc = DateTime.Parse(dtt20511.Rows[0]["exp_vecatedate"].ToString());
                    string propdatex = datepropc.ToString("yyyy-MM-dd HH:mm");

                    string sqlqueryw = "" + newvactid + ",'" + dayendd + "'," + allocid + "," + userid + ",null," + 0 + ",'" + "" + "'," + 0 + ", "
                    + " '" + propdatex.ToString() + "'," + 0 + ",'" + 0 + "','" + 1 + "', '" + 0 + "',   '" + 1 + "', '" + 0 + "','" + 1 + "','" + 0 + "',"
                    + " '" + 0 + "'  , '0', " + Convert.ToInt32(dtt20511.Rows[0]["roomrent"].ToString()) + "," + Convert.ToInt32(dtt20511.Rows[0]["deposit"].ToString()) + "," + Convert.ToInt32(dtt20511.Rows[0]["advance"].ToString()) + "," + counter + ", "
                    + " " + userid + ",'" + datetoday + "' ,null,'" + 0 + "','" + 0 + "','" + 0 + "'";
                    cm3d.Parameters.AddWithValue("val", sqlqueryw);
                    cm3d.Transaction = odbtrans1;
                    cm3d.ExecuteNonQuery();


                    OdbcCommand cmd30x = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd30x.CommandType = CommandType.StoredProcedure;
                    cmd30x.Parameters.AddWithValue("tablename", "t_roomallocation");
                    cmd30x.Parameters.AddWithValue("valu", "roomstatus='1'");
                    cmd30x.Parameters.AddWithValue("convariable", "  alloc_id=" + allocid + " and roomstatus='2' ");
                    cmd30x.Transaction = odbtrans1;
                    cmd30x.ExecuteNonQuery();


                    # region Loading Season Deposit
                    OdbcCommand cmdseasond = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmdseasond.CommandType = CommandType.StoredProcedure;
                    cmdseasond.Parameters.AddWithValue("tblname", "t_settings");
                    cmdseasond.Parameters.AddWithValue("attribute", " mal_year,mal_year_id,cashier_id,year_code");
                    cmdseasond.Parameters.AddWithValue("conditionv", " end_eng_date>=curdate() and start_eng_date<=curdate() and is_current='1' ");
                    cmdseasond.Transaction = odbtrans1;
                    OdbcDataReader or3 = cmdseasond.ExecuteReader();
                    if (or3.Read())
                    {
                        malyear = Convert.ToInt32(or3["mal_year"]);
                        malyearid = Convert.ToInt32(or3["mal_year_id"]);
                        cashierid = Convert.ToInt32(or3["cashier_id"]);
                        Session["malyear"] = malyear;
                        Session["malyyearid"] = malyearid;
                        Session["cashierid"] = cashierid;
                        Session["yearcode"] = or3["year_code"];

                    }
                    DateTime cur2 = DateTime.Now;
                    int currentyear = cur2.Year;
                    OdbcCommand cmdseasonname = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmdseasonname.CommandType = CommandType.StoredProcedure;
                    cmdseasonname.Parameters.AddWithValue("tblname", "m_season ss,m_sub_season  sms");
                    cmdseasonname.Parameters.AddWithValue("attribute", "season_id,ss.season_sub_id");
                    cmdseasonname.Parameters.AddWithValue("conditionv", "(curdate()>=startdate and   curdate()<=enddate) and is_current='1'  and  ss.season_sub_id=sms.season_sub_id");

                    cmdseasonname.Transaction = odbtrans1;
                    OdbcDataAdapter dtt3911x = new OdbcDataAdapter(cmdseasonname);
                    DataTable dtt205 = new DataTable();
                    dtt3911x.Fill(dtt205);

                    int seasonid1 = 0;
                    int seasonsubid = 0;
                    if (dtt205.Rows.Count > 0)
                    {
                        seasonid1 = Convert.ToInt32(dtt205.Rows[0]["season_id"]);
                        seasonsubid = Convert.ToInt32(dtt205.Rows[0]["season_sub_id"]);
                        Session["season_subid"] = seasonsubid;
                        Session["currentseasonid"] = seasonid1;
                    }
                    OdbcCommand cmddeposit = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmddeposit.CommandType = CommandType.StoredProcedure;
                    cmddeposit.Parameters.AddWithValue("tblname", "t_seasondeposit");
                    cmddeposit.Parameters.AddWithValue("attribute", "totaldeposit");
                    cmddeposit.Parameters.AddWithValue("conditionv", "season_id =" + seasonid1 + " and mal_year_id=" + malyearid + "");


                    cmddeposit.Transaction = odbtrans1;
                    OdbcDataAdapter dtt3911 = new OdbcDataAdapter(cmddeposit);
                    DataTable dtt391 = new DataTable();
                    dtt3911.Fill(dtt391);

                    int deposit = 0;
                    int se = 0;
                    if (dtt391.Rows.Count > 0)
                    {
                        se = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
                         deposit = Convert.ToInt32(dtt20511.Rows[0]["deposit"].ToString());
                        se = se - deposit;

                    }

                    # endregion

                    OdbcCommand cmd30x1x = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd30x1x.CommandType = CommandType.StoredProcedure;
                    cmd30x1x.Parameters.AddWithValue("tablename", "t_seasondeposit");
                    cmd30x1x.Parameters.AddWithValue("valu", "totaldeposit=" + se + "");
                    cmd30x1x.Parameters.AddWithValue("convariable", "season_id =" + seasonid1 + " and mal_year_id=" + malyearid + "");
                    cmd30x1x.Transaction = odbtrans1;
                    cmd30x1x.ExecuteNonQuery();


                    OdbcCommand cmd9y91 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmd9y91.CommandType = CommandType.StoredProcedure;
                    cmd9y91.Parameters.AddWithValue("tblname", "t_security_deposit");
                    cmd9y91.Parameters.AddWithValue("attribute", "balance");
                    cmd9y91.Parameters.AddWithValue("conditionv", "deposit_id = (SELECT MAX(deposit_id) FROM t_security_deposit WHERE counter1 = '" + int.Parse(Session["counterid"].ToString()) + "')");
                    cmd9y91.Transaction = odbtrans1;
                    OdbcDataAdapter dat9y91 = new OdbcDataAdapter(cmd9y91);
                    DataTable dacnt9y91 = new DataTable();
                    dat9y91.Fill(dacnt9y91);

                    if (dacnt991.Rows.Count > 0)
                    {

                        bal = int.Parse(dacnt991.Rows[0]["balance"].ToString());

                    }


                    bal = bal - deposit;
                    savdep = "'" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["counterid"].ToString()) + "','" + int.Parse(Session["userid"].ToString()) + "','" + seasonid1 + "','" + int.Parse(Session["malyyearid"].ToString()) + "','" + datetoday + "',5,'" + newvactid + "',-'" + deposit + "','" + bal + "'";

                    OdbcCommand cmd5xc7 = new OdbcCommand("CALL savedata(?,?)", conn);
                    cmd5xc7.CommandType = CommandType.StoredProcedure;
                    cmd5xc7.Parameters.AddWithValue("tblname", " t_security_deposit (counter1,counter2,USER,season,mal_year,trandate,trans_type,trans_no,amount,balance)");
                    cmd5xc7.Parameters.AddWithValue("val", savdep);
                    cmd5xc7.Transaction = odbtrans1;
                    cmd5xc7.ExecuteNonQuery();


                }
                 else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                {

                      int vacateid = 0;
                    OdbcCommand cmdvacate = new OdbcCommand("CALL selectdata(?,?)", conn);
                    cmdvacate.CommandType = CommandType.StoredProcedure;
                    cmdvacate.Parameters.AddWithValue("tblname", "t_roomvacate");
                    cmdvacate.Parameters.AddWithValue("attribute", "max(vacate_id)as vacate_id ");
                    cmdvacate.Transaction = odbtrans1;
                    OdbcDataAdapter dacntvacate = new OdbcDataAdapter(cmdvacate);
                    DataTable dttvacate = new DataTable();
                    dacntvacate.Fill(dttvacate);
                    if (Convert.IsDBNull(dttvacate.Rows[0]["vacate_id"]) == false)
                    {

                        vacateid = Convert.ToInt32(dttvacate.Rows[0]["vacate_id"]);
                        vacateid = vacateid + 1;

                    }
                    else
                    {
                        vacateid = 1;

                    }

                
                
                    OdbcCommand cm3 = new OdbcCommand("CALL savedata(?,?)", conn);
                    cm3.CommandType = CommandType.StoredProcedure;
                    cm3.Parameters.AddWithValue("tblname", "t_roomvacate");
                    Int32 grossamount = Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtDepositAlloc.Text);
                    
                        string sqlquery = "" + vacateid + ",'" + dayendd + "'," + id + "," + userid + ",null," + 0 + ",'" + "" + "'," + 0 + ", "
                        + " '" + datetoday + "'," + 0 + ",'" + 0 + "','" + 1 + "', '" + 0 + "',   '" + 1 + "', '" + 0 + "','" + 1 + "','" + 0 + "',"
                        + " '" + 0 + "'  , '0', " + Convert.ToInt32(txtRentAlloc.Text) + "," + Convert.ToInt32(txtDepositAlloc.Text) + "," + grossamount + "," + counter + ", "
                        + " " + userid + ",'" + datetoday + "' ,'Overstay','" + 0 + "','" + 0 + "','" + 0 + "'";
                        cm3.Parameters.AddWithValue("val", sqlquery);

                        cm3.Transaction = odbtrans1;
                        cm3.ExecuteNonQuery();
                        Session["edit"] = 0;

                   
                    OdbcCommand cmd30x1 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
                    cmd30x1.CommandType = CommandType.StoredProcedure;
                    cmd30x1.Parameters.AddWithValue("tablename", "t_roomallocation");
                    cmd30x1.Parameters.AddWithValue("valu", "roomstatus='1'");
                    cmd30x1.Parameters.AddWithValue("convariable", "  alloc_id=" + id + " and roomstatus='2' ");
                    cmd30x1.Transaction = odbtrans1;
                    cmd30x1.ExecuteNonQuery();

                }

            }

            odbtrans1.Commit();
          
            AllocationNumberFind();

            CalulatingCounterLiability();
            SeaonDepositLoad();

            if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
            {

                lblHead.Text = "Tsunami-ARMS Confirmation";
                messagedisplay("Reallocated Successfully", "reallocxtend");
            }
            else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
            {
                lblHead.Text = "Tsunami-ARMS Confirmation";
                messagedisplay("Reallocated Successfully", "realloc");
            }

            else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
            {
                lblHead.Text = "Tsunami-ARMS Confirmation";
                messagedisplay("Reallocated Successfully", "reallocxtend");
            }
            else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
            {
                lblHead.Text = "Tsunami-ARMS Confirmation";
                messagedisplay("Reallocated & checkout Successfull", "reallocxtend");
            }
            else if(cmbCheckOutMehtod.SelectedItem.ToString() == "Inmates Add")
            {
                lblHead.Text = "Tsunami-ARMS Confirmation";
                messagedisplay("Reallocated Successfully", "reallocxtend");
            }
        }
        catch
        {
            odbtrans1.Rollback();
            messagedisplay("problem in allocation save", "hhh");

        }

    }


    # endregion

    # region Extend Time change

    protected void txtExtendTime_TextChanged(object sender, EventArgs e)
    {

        string propdate = objcls.yearmonthdate(txtVacatingDate.Text);
        DateTime time = DateTime.Parse(txtVecatingTime.Text);
        string time1 = time.ToString("HH:mm");
        propdate = propdate + " " + time1;
        DateTime vacatedate = DateTime.Parse(propdate);


        string extenddate = objcls.yearmonthdate(txtExtendDate.Text);
        DateTime extime = DateTime.Parse(txtExtendTime.Text);
        string extime1 = extime.ToString("HH:mm");
        extenddate = extenddate + " " + extime1;
        DateTime extenddate1 = DateTime.Parse(extenddate);
        TimeSpan diff = vacatedate - extenddate1;
        if ((diff.Days >= 0) && (diff.Hours >= 0))
        {
            txtDepositAlloc.Text = "";
            txtRentAlloc.Text = "";
            txtAdvAmount.Text = "";
            messagedisplay("Extend date is less than Proposed checkout date", "ll");
            return;

        }


        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
        {
            roomreservecheck();

            if (Convert.ToString(Session["rescheck"]) != "0")
            {

                messagedisplay("Room is reserved in this time please edit the time ", "xx");
                return;
            }


        }
        else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")

        {

               string str1 =objcls.yearmonthdate(txtVacatingDate.Text.ToString());
            
                DateTime dt = DateTime.Parse(str1);
                str1 = dt.ToString("yyyy-MM-dd");


                string str2 =objcls.yearmonthdate(txtExtendDate.Text.ToString());
              
                DateTime dt1 = DateTime.Parse(str2);
                str2 = dt1.ToString("yyyy-MM-dd");
                DateTime vec_time1 = DateTime.Parse(txtVecatingTime.Text);
                string v_r1 = vec_time1.ToString("HH:mm");
                string m_r1 = str1 + " " + v_r1;

                vec_time1 = DateTime.Parse(txtExtendTime.Text);
                v_r1 = vec_time1.ToString("HH:mm");
                string m_r2 = str2 + " " + v_r1;


                DateTime m_r3 = DateTime.Parse(v_r1);

                v_r1 = m_r3.AddMinutes(-1).ToString("HH:mm");

                m_r2 = str2 + " " + v_r1;


                if (conn.State == ConnectionState.Closed)
                {
                    conn.ConnectionString = strConnection;
                    conn.Open();
                }
                OdbcCommand cbv12 = new OdbcCommand("select * from t_roomreservation where status_reserve ='" + "0" + "'  and  room_id="+Convert.ToInt32( Session["roomid"])+"     and  ('" + m_r1.ToString() + "' between reservedate and expvacdate or '" + m_r2.ToString() + "' between reservedate and expvacdate or reservedate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  or expvacdate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  )", conn);
                OdbcDataReader obv12 = cbv12.ExecuteReader();
                if (obv12.Read())
                {
                    Session["rescheck"] = obv12[0].ToString();

                }
                else
                {
                    Session["rescheck"] = "0";
                }


                if (Convert.ToString(Session["rescheck"]) != "0")
                {

                    messagedisplay("Room is reserved in this time please edit the time ", "xx");
                    return;
                }


                conn.Close();

            
        }
        else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
        {
           

            string str1 = objcls.yearmonthdate(txtVacatingDate.Text.ToString());
            DateTime dt = DateTime.Parse(str1);
            str1 = dt.ToString("yyyy-MM-dd");


            string str2 = objcls.yearmonthdate(txtExtendDate.Text.ToString());

            DateTime dt1 = DateTime.Parse(str2);
            str2 = dt1.ToString("yyyy-MM-dd");
            DateTime vec_time1 = DateTime.Parse(txtVecatingTime.Text);
            string v_r1 = vec_time1.ToString("HH:mm");
            string m_r1 = str1 + " " + v_r1;

            vec_time1 = DateTime.Parse(txtExtendTime.Text);
            v_r1 = vec_time1.ToString("HH:mm");
            string m_r2 = str2 + " " + v_r1;
            DateTime m_r3 = DateTime.Parse(v_r1);
            v_r1 = m_r3.AddMinutes(-1).ToString("HH:mm");
            m_r2 = str2 + " " + v_r1;

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            OdbcCommand cbv12 = new OdbcCommand("select reserve_id from t_roomreservation where status_reserve ='" + "0" + "'  and  room_id=" + Convert.ToInt32(Session["roomid"]) + "     and  ('" + m_r1.ToString() + "' between reservedate and expvacdate or '" + m_r2.ToString() + "' between reservedate and expvacdate or reservedate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  or expvacdate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  )", conn);
            OdbcDataReader obv12 = cbv12.ExecuteReader();
            if (obv12.Read())
            {
                Session["rescheck"] = obv12[0].ToString();

            }
            else
            {
                Session["rescheck"] = "0";
            }


            if (Convert.ToString(Session["rescheck"]) != "0")
            {

                messagedisplay("Room is reserved in this time please edit the time ", "xx");
                return;
            }

        }

        try
        {



            ExtendTImeChange();
        }
        catch { }

    }
    # endregion

    # region Number of Days Calculation

    public void NumberOfDaysCalculation(string checkindate,string chekcoutdate,string checkouttime,int graceperiod)
    {
        seasonid = Convert.ToInt32(Session["season_subid"]);
        int totaldifference;
        DateTime datedt = DateTime.Parse(checkindate);
        DateTime datedt1 = datedt;
        string datedt111 = datedt1.ToString("MM-dd-yyyy");

        DateTime date3 = DateTime.Parse(datedt1.ToString());
        string timeallocat = datedt1.ToString("hh:mm tt");
        DateTime timeallot1 = DateTime.Parse(timeallocat.ToString());
        datedt = datedt.AddHours(graceperiod);

        string dates11 = datedt.ToString("MM-dd-yyyy");
        string  times11 = datedt.ToString("hh:mm tt");
        DateTime tim2 = DateTime.Parse(checkouttime);
      
        
        DateTime tim1 = DateTime.Parse(times11.ToString());
        string f4 = tim1.ToString();
        string f5 = tim2.ToString();
        TimeSpan TimeDifference = tim2 - tim1;
        int  timedifference = TimeDifference.Hours;
        int chk = 0,vac=0;
        
        
        ////////////////////////////////////////////////////////////////////2222222222222222*******************************
        if (rbgrace.Checked == true)
        {
            string gracetime = @"SELECT gracetime FROM t_policy_allocation WHERE (CURDATE()
                             BETWEEN fromdate AND todate ) AND reqtype = '" + Session["customer"].ToString() + "'";
            DataTable dt_gracetime = objcls.DtTbl(gracetime);
            double totalMinutes = TimeDifference.TotalMinutes;
            if (totalMinutes > Convert.ToDouble(dt_gracetime.Rows[0][0].ToString()))
            {
                //proceed with operation.execoveride right cannot be imposed 
            }
            else
            {
                timedifference = 0;
                chk = 1;
            }
        }

        DateTime pdat = Convert.ToDateTime(ViewState["propdat"]);
         propdat = pdat;
        DateTime propvacate = propdat;
        TimeSpan totalhr = propvacate - DateTime.Parse(checkindate);
        allocmin = Convert.ToDouble( totalhr.TotalHours);
        ViewState["allocmin"] = Convert.ToString(allocmin);


        propvacate = propvacate.AddHours(graceperiod);
        string ctime = Convert.ToString(ViewState["date"]);
        DateTime couttime =  Convert.ToDateTime(ctime);
        TimeSpan vacate = couttime - propvacate;
        vacattime = Convert.ToInt32( vacate.TotalHours);
      


        if (rbgrace.Checked == true)
        {
            string gracetime = @"SELECT gracetime FROM t_policy_allocation WHERE (CURDATE()
                             BETWEEN fromdate AND todate ) AND reqtype = '" + Session["customer"].ToString() + "'";
            DataTable dt_gracetime = objcls.DtTbl(gracetime);
            double totalvactMinutes = vacate.TotalMinutes;
            if (totalvactMinutes > Convert.ToDouble(dt_gracetime.Rows[0][0].ToString()))
            {
                //proceed with operation.execoveride right cannot be imposed 
            }
            else
            {
                vacattime = 0;
                vac = 1;
            }
        }

        if (vac == 0)
        {
            if (vacate.Minutes > 0)
            {
                vacattime++;

            }
        }

        ////////////////////////////////////////////////////////////////////2222222222222222*******************************

        if (chk == 0)
        {
            if (TimeDifference.Minutes > 0)
            {

                timedifference++;
            }
        }



     

        string sss =objcls.yearmonthdate(chekcoutdate);
        DateTime date1 = DateTime.Parse(sss);
        DateTime date2 = DateTime.Parse(datedt.ToString());
        string dd1 = date1.ToShortDateString();
        string dd2 = date2.ToShortDateString();
        date1 = DateTime.Parse(dd1.ToString());
        date2 = DateTime.Parse(dd2.ToString());

       TimeSpan datedifference = date1 - date2;
       TimeSpan datedifference1 = date1 - date3;
       int day1 = datedifference1.Days;
       int day = datedifference.Days;
        if (day1 < 0)
        {
            day1 = 0;
        }
        if (day < 0)
        {
            day = 0;
            timedifference = 0;
        }

        int daydacross = day1;
        int kkk = day;
        day = 24 * day;
        totaldifference = day + timedifference;
        DateTime date5 = DateTime.Now;
        string f2 = date5.ToString("yyyy/MM/dd");
        try
        {           // calculating measuring units


            OdbcCommand cmdbill = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmdbill.CommandType = CommandType.StoredProcedure;
            cmdbill.Parameters.AddWithValue("tblname", "t_policy_billservice AS policy,t_policy_billservice_seasons bs,m_sub_service_measureunit AS mes,m_sub_service_bill AS service,t_policy_alloctime AS renttime");
            cmdbill.Parameters.AddWithValue("attribute", "DISTINCT season_sub_id,policy.service_unit_id,minunit,mes.unitname,renttime.defaulthours,renttime.exthours");
            cmdbill.Parameters.AddWithValue("conditionv", "mes.service_unit_id = policy.service_unit_id AND renttime.bill_policy_id = policy.bill_policy_id AND policy.bill_service_id = 1 AND bs.bill_policy_id = policy.bill_policy_id AND (CURDATE()BETWEEN policy.fromdate AND policy.todate) OR (CURDATE() >= policy.fromdate AND policy.todate = '0000-00-00') AND policy.rowstatus <> 2");

            OdbcDataAdapter dacntbill = new OdbcDataAdapter(cmdbill);
            DataTable dttbill = new DataTable();
            dacntbill.Fill(dttbill);
            int data1 = 0, flag1 = 0;
            if (dttbill.Rows.Count > 0)
            {
                for (int i = 0; i < dttbill.Rows.Count; i++)
                {

                    data1 = 1;
                    int seaid = Convert.ToInt32(dttbill.Rows[i]["season_sub_id"]);
                    if (seaid == seasonid)
                    {
                                           
                        measureunit = Convert.ToInt32(dttbill.Rows[i]["service_unit_id"]);
                        minunit = dttbill.Rows[i]["defaulthours"].ToString();
                        extunit = dttbill.Rows[i]["exthours"].ToString(); 
                        flag1 = 1;
                        break;

                    }
                    if (flag1 == 1)
                    {
                        break;
                    }


                }

            }
            if (data1 == 0)
            {
              //  messagedisplay("No policy Set for Measurement unit", "warn22");
                return;

            }

            if (flag1 == 0)
            {
             //   messagedisplay("No policy set for Measurement units", "warn22");
               return;
            }

        }
        catch { }

           int althr;
           if ((cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room") && (cmbaltbulilding.SelectedValue != "-1") && (cmbaltroom.SelectedValue != "-1"))
        {
            string chkouttym = ViewState["alloctime"].ToString();
            alloctime = Convert.ToDateTime(chkouttym);
            TimeSpan alttym = Convert.ToDateTime(ViewState["date"]) - alloctime;
            althr = alttym.Hours;
            totaldifference = totaldifference + althr;

        }



        if (measureunit == 3)
        {
        //////////////////////////////////////////////////////////////////////
            
            int unit ;
        if (paytype != 0)
        {
            unit = paytype;
        }
        else
        {
            unit = int.Parse(minunit.ToString());
        }
////////////////////////////////////////////////////////////////////////////////////////////////

            totalday = totaldifference / unit;

            extime = totaldifference;

            int Rem = totaldifference % unit;
            if (Rem != 0)
            {
                totalday++;
            }

        }

        else if (measureunit == 2)
        {
            int unit = int.Parse(minunit.ToString());
            unit = unit * 24;
            totalday = totaldifference / unit;

            int Rem = totaldifference % unit;
            if (Rem != 0)
                totalday++;


        }


        else if (measureunit == 5)
        {
            int hour;
            DateTime t1 = DateTime.Parse(minunit.ToString());
            DateTime timet = DateTime.Parse(minunit.ToString());
            t1 = t1.AddHours(graceperiod);
            TimeSpan diff = tim2 - t1;
            int k = diff.Hours;
            int s = diff.Minutes;
            int s1 = 0;
            if (k == 0)
            {
                s1 = diff.Minutes;
            }
           
            totalday = daydacross;
            TimeSpan di = timet - timeallot1;
            hour = di.Hours;
            if (timet > timeallot1)
            {
                if (hour == 0)
                {
                    hour++;

                }
            }

            if (k == 0)
            {
                if (s > 0)
                {
                    k++;

                }

            }

            if((totalday>=1)&&(k<=0)&&(hour>=1))
            {

                totalday = totalday + 1;
            }
            
            else if((totalday>=0)&&(k>=1)&&(hour>=1))
            {
                totalday = totalday + 2;

            }

            else if ((totalday >= 0) && (hour <= 0) && (k >= 1))
            {
                totalday = totalday + 1;

            }
            else
            {
      
            }
            if (totalday == 0)
            {
                totalday = 1;
            }


        }
      
    }
    # endregion

    # region ExtendDate changed
    protected void txtExtendDate_TextChanged(object sender, EventArgs e)
    {
       

        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
            {

                string strx1 = txtPropCheckOut.Text;
               
                string strx2 = txtExtendDate.Text + " " + txtExtendTime.Text;
               
                string ssvb = @"SELECT CASE WHEN  DATE_ADD(STR_TO_DATE('" + strx1 + "','%d/%m/%Y %l:%i %p'),INTERVAL '" + graceperiod + "' HOUR ) >=  STR_TO_DATE('" + strx2 + "','%d-%m-%Y %l:%i %p') THEN 'OK' ELSE 'Not' END AS 'CHK'";
                DataTable DTSS1x = objcls.DtTbl(ssvb);

                if (DTSS1x.Rows[0][0].ToString() == "OK")
                {
                    ViewState["auction"] = "checkoutdate";
                    messagedisplay("Vacate time less than allocated time. Overstay/Extended stay not possible not possible", "ll");

                    lblrent.Visible = false;
                    txtRentAlloc.Text = "0";
                    txtDepositAlloc.Text = "0";
                    txtAdvAmount.Text = "0";
                    txtNoofDays.Text = "0";

                    this.ScriptManager1.SetFocus(btnOk);
                    return;
                }

                string str1 =objcls.yearmonthdate(txtVacatingDate.Text.ToString());
                DateTime dt = DateTime.Parse(str1);
                str1 = dt.ToString("yyyy-MM-dd");


                string str2 =objcls.yearmonthdate(txtExtendDate.Text.ToString());
              
                DateTime dt1 = DateTime.Parse(str2);
                str2 = dt1.ToString("yyyy-MM-dd");
                DateTime vec_time1 = DateTime.Parse(txtVecatingTime.Text);
                string v_r1 = vec_time1.ToString("HH:mm");
                string m_r1 = str1 + " " + v_r1;

                vec_time1 = DateTime.Parse(txtExtendTime.Text);
                v_r1 = vec_time1.ToString("HH:mm");
                string m_r2 = str2 + " " + v_r1;
                DateTime m_r3 = DateTime.Parse(v_r1);
                v_r1 = m_r3.AddMinutes(-1).ToString("HH:mm");
                m_r2 = str2 + " " + v_r1;

                if (conn.State == ConnectionState.Closed)
                {
                    conn.ConnectionString = strConnection;
                    conn.Open();
                }
                OdbcCommand cbv12 = new OdbcCommand("select reserve_id from t_roomreservation where status_reserve ='" + "0" + "'  and  room_id="+Convert.ToInt32( Session["roomid"])+"     and  ('" + m_r1.ToString() + "' between reservedate and expvacdate or '" + m_r2.ToString() + "' between reservedate and expvacdate or reservedate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  or expvacdate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  )", conn);
                OdbcDataReader obv12 = cbv12.ExecuteReader();
                if (obv12.Read())
                {
                    Session["rescheck"] = obv12[0].ToString();

                }
                else
                {
                    Session["rescheck"] = "0";
                }


                if (Convert.ToString(Session["rescheck"]) != "0")
                {

                    messagedisplay("Room is reserved in this time please edit the time ", "xx");
                    return;
                }


            }

            if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
            {
                roomreservecheck();

                if (Convert.ToString(Session["rescheck"]) != "0")
                {

                    messagedisplay("Room is reserved in this time please edit the time ", "xx");
                    return;
                }
            }
            else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
            {
                string propdate = objcls.yearmonthdate(txtVacatingDate.Text);
                DateTime time = DateTime.Parse(txtVecatingTime.Text);
                string time1 = time.ToString("HH:mm");
                propdate = propdate + " " + time1;
                DateTime vacatedate = DateTime.Parse(propdate);


                string extenddate = objcls.yearmonthdate(txtExtendDate.Text);
                DateTime extime = DateTime.Parse(txtExtendTime.Text);
                string extime1 = extime.ToString("HH:mm");
                extenddate = extenddate + " " + extime1;
                DateTime extenddate1 = DateTime.Parse(extenddate);
                TimeSpan diff = vacatedate - extenddate1;
                if ((diff.Days >= 0) && (diff.Hours >= 0))
                {
                    txtDepositAlloc.Text = "";
                    txtRentAlloc.Text = "";
                    txtAdvAmount.Text = "";
                    messagedisplay("Extend date is less than Proposed checkout date", "ll");
                    return;

                }



                string str1 = objcls.yearmonthdate(txtVacatingDate.Text.ToString());
                DateTime dt = DateTime.Parse(str1);
                str1 = dt.ToString("yyyy-MM-dd");


                string str2 = objcls.yearmonthdate(txtExtendDate.Text.ToString());

                DateTime dt1 = DateTime.Parse(str2);
                str2 = dt1.ToString("yyyy-MM-dd");
                DateTime vec_time1 = DateTime.Parse(txtVecatingTime.Text);
                string v_r1 = vec_time1.ToString("HH:mm");
                string m_r1 = str1 + " " + v_r1;

                vec_time1 = DateTime.Parse(txtExtendTime.Text);
                v_r1 = vec_time1.ToString("HH:mm");
                string m_r2 = str2 + " " + v_r1;
                DateTime m_r3 = DateTime.Parse(v_r1);
                v_r1 = m_r3.AddMinutes(-1).ToString("HH:mm");
                m_r2 = str2 + " " + v_r1;

                if (conn.State == ConnectionState.Closed)
                {
                    conn.ConnectionString = strConnection;
                    conn.Open();
                }
                OdbcCommand cbv12 = new OdbcCommand("select reserve_id from t_roomreservation where status_reserve ='" + "0" + "'  and  room_id=" + Convert.ToInt32(Session["roomid"]) + "     and  ('" + m_r1.ToString() + "' between reservedate and expvacdate or '" + m_r2.ToString() + "' between reservedate and expvacdate or reservedate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  or expvacdate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  )", conn);
                OdbcDataReader obv12 = cbv12.ExecuteReader();
                if (obv12.Read())
                {
                    Session["rescheck"] = obv12[0].ToString();

                }
                else
                {
                    Session["rescheck"] = "0";
                }


                if (Convert.ToString(Session["rescheck"]) != "0")
                {

                    messagedisplay("Room is reserved in this time please edit the time ", "xx");
                    return;
                }

            }

            try
            {
                ExtendTImeChange();
            }
            catch { }
           

        
    }
    # endregion

    # region Building Select index change
    protected void cmbBuilding_SelectedIndexChanged2(object sender, EventArgs e)
    {
        string idselect = cmbBuilding.SelectedValue;
        string checkoutmethod = cmbCheckOutMehtod.SelectedItem.ToString();
        clear();
        cmbBuilding.SelectedValue = idselect;
        cmbCheckOutMehtod.SelectedItem.Text = checkoutmethod.ToString();
        cmbCheckOutMehtod_SelectedIndexChanged(null, null);
        this.ScriptManager1.SetFocus(txtRoomNo);

    }
    #endregion

    protected void dtgRoomVacateDetails_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    # region Saving liability,Deposit

    public void SaveinCashierLiability()
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }

          OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
          cmd.Transaction = odbtrans1;
           DateTime datenow = Convert.ToDateTime(cmd.ExecuteScalar());
      
        string f22 = datenow.ToString("dd/MM/yyyy");
        string datetoday =objcls.yearmonthdate(f22);
        datetoday = datetoday + " " + datenow.ToString("HH:mm:ss");
        pnlYesNo2.Visible = false;
        userid = Convert.ToInt32(Session["userid"]);
        cashierid = Convert.ToInt32(Session["cashierid"]);
        string dayendd = Session["dayend"].ToString();

        ViewState["action"] = "NILL";
      
    
        int counter = Convert.ToInt32(Session["counterid"]);
        int rent=Convert.ToInt32(txtRentAlloc.Text);
        int transid = 0;
        int inmaterate = 0;
        inmaterate = Convert.ToInt32(txtinmcharge.Text);

        OdbcCommand cmn = new OdbcCommand("select amount,nooftrans from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counter + " and cash_caretake_id=" + cashierid + " and ledger_id='1'", conn);
        cmn.Transaction = odbtrans1;
        OdbcDataReader orn = cmn.ExecuteReader();
        if (orn.Read())
        {

            int amount = Convert.ToInt32(orn["amount"]);
            int nooftrans = Convert.ToInt32(orn["nooftrans"]);
            nooftrans = nooftrans + 1;
            amount = amount + rent + inmaterate;
            OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd3.CommandType = CommandType.StoredProcedure;
            cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
            cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "' ,nooftrans="+nooftrans+"");
            cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counter + " and ledger_id='1'");
            cmd3.Transaction = odbtrans1;
            cmd3.ExecuteNonQuery();

        }
        else
        {

            OdbcCommand cmd48 = new OdbcCommand("CALL selectdata(?,?)", conn);
            cmd48.CommandType = CommandType.StoredProcedure;
            cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
            cmd48.Transaction = odbtrans1;
            OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmd48);
            DataTable dtt48 = new DataTable();
            dacnt48.Fill(dtt48);
            if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
            {

                transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                transid = transid + 1;

            }
            else
            {
                transid = 1;

            }

            OdbcCommand cmdliability = new OdbcCommand("CALL savedata(?,?)", conn);
            cmdliability.CommandType = CommandType.StoredProcedure;
            cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmdliability.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counter + ",'1'," + 1 + "," + rent + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
            cmdliability.Transaction = odbtrans1;
            cmdliability.ExecuteNonQuery();

        }


            malyear = Convert.ToInt32(Session["malyear"]);
            malyearid = Convert.ToInt32(Session["malyyearid"]);
           int ledgerdeposit=0;
       
       OdbcCommand cmdledger = new OdbcCommand("select ledger_id from  m_sub_budghead_ledger where ledgername='Security Deposit'", conn);
       cmdledger.Transaction = odbtrans1;
        OdbcDataReader orledger = cmdledger.ExecuteReader();
        if (orledger.Read())
        {
            ledgerdeposit = Convert.ToInt32(orledger["ledger_id"]);

        }
      
        DateTime cur2 = DateTime.Now;
        int currentyear = cur2.Year;
        string curseason2id = Convert.ToString(Session["currentseasonid"]);
        int depo = Convert.ToInt32(Session["deposit"]);
        OdbcCommand cmd391 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmd391.CommandType = CommandType.StoredProcedure;
        cmd391.Parameters.AddWithValue("tblname", "t_seasondeposit");
        cmd391.Parameters.AddWithValue("attribute", "totaldeposit");
        cmd391.Parameters.AddWithValue("conditionv", "season_id =" +curseason2id + " and mal_year_id=" + malyearid  + "");
        cmd391.Transaction = odbtrans1;
        
        OdbcDataAdapter dacnt391 = new OdbcDataAdapter(cmd391);
        DataTable dtt391 = new DataTable();
        dacnt391.Fill(dtt391);
        int seasondeposit = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
        seasondeposit = seasondeposit + Convert.ToInt32(txtDepositAlloc.Text) + Convert.ToInt32(txtinmdeposit.Text);

        txtDeposit.Text = seasondeposit.ToString();
      
        OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
        cmd826.CommandType = CommandType.StoredProcedure;
        cmd826.Parameters.AddWithValue("tablename", "t_seasondeposit");
        cmd826.Parameters.AddWithValue("valu", "totaldeposit=" + seasondeposit + "");
        cmd826.Parameters.AddWithValue("convariable", "season_id=" + curseason2id + " and mal_year_id=" + malyearid + "");
        cmd826.Transaction = odbtrans1;
        
        cmd826.ExecuteNonQuery();

        dep = Convert.ToInt32(txtDepositAlloc.Text);
        dep = dep + Convert.ToInt32(txtinmdeposit.Text);

        OdbcCommand cmns = new OdbcCommand("select amount from t_daily_transaction where date='" + dayendd + "' and counter_id=" + counter + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledgerdeposit + "", conn);
        cmns.Transaction = odbtrans1;
        OdbcDataReader orns = cmns.ExecuteReader();
        if (orns.Read())
        {

            int amount = Convert.ToInt32(orns["amount"]);
            amount = amount + dep;
            OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd3.CommandType = CommandType.StoredProcedure;
            cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
            cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
            cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + "  and date='" + dayendd + "' and  counter_id=" + counter + " and ledger_id=" + ledgerdeposit + "");
            cmd3.Transaction = odbtrans1;
            cmd3.ExecuteNonQuery();
        }
        else
        {
            OdbcCommand cmd481 = new OdbcCommand("CALL selectdata(?,?)", conn);
            cmd481.CommandType = CommandType.StoredProcedure;
            cmd481.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmd481.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
            cmd481.Transaction = odbtrans1;
            OdbcDataAdapter dacnt481 = new OdbcDataAdapter(cmd481);
            DataTable dtt481 = new DataTable();
            dacnt481.Fill(dtt481);
            if (Convert.IsDBNull(dtt481.Rows[0]["trans_id"]) == false)
            {

                transid = Convert.ToInt32(dtt481.Rows[0]["trans_id"]);
                transid = transid + 1;

            }
            else
            {
                transid = 1;

            }

            int depotot = Convert.ToInt32(txtDepositAlloc.Text) + Convert.ToInt32(txtinmdeposit.Text);
            OdbcCommand cmddeposit = new OdbcCommand("CALL savedata(?,?)", conn);
            cmddeposit.CommandType = CommandType.StoredProcedure;
            cmddeposit.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmddeposit.Parameters.AddWithValue("val", "" + transid + ",'0', " + cashierid + "," + counter + ",'0'," + ledgerdeposit + "," + depotot + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
            cmddeposit.Transaction = odbTrans;
            cmddeposit.Transaction = odbtrans1;
            cmddeposit.ExecuteNonQuery();

            
        }

    }
    # endregion

    # region Alternate Building Selected Index Change

    protected void cmbaltbulilding_SelectedIndexChanged(object sender, EventArgs e)
    {
         if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();

        }
         int flag = 0;
        int ren = 0,inmrate=0;
          
         DateTime aldate = Convert.ToDateTime(Convert.ToString(ViewState["alloctime"].ToString()));
                    DateTime actualvact =  Convert.ToDateTime(Convert.ToString(ViewState["propdat"].ToString()));
                    TimeSpan actperiod = actualvact - aldate;
                    int alttime = 0;
                    alttime  = Convert.ToInt32(actperiod.TotalHours);
                    if ((actperiod.Minutes > 0) && (actperiod.Minutes < 30))
                    {
                        alttime++;
                    }

    
                    if (Session["customer"].ToString() == "Clubbing")
                    {
                        Session["customer"] = "General Allocation";
                        flag = 1;
                    }
                 
                    OdbcCommand cmdRR = new OdbcCommand();
                    cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                    cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate");
                    cmdRR.Parameters.AddWithValue("conditionv", " ('" + alttime + "' > m_rent.start_duration)  AND ('" + alttime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category AND m_rent.reservation_type = (SELECT id FROM p_type_of_user WHERE TYPE = '" + Session["customer"].ToString() + "')  AND m_room.room_id = m_inmate.room_id AND ( '" + alttime + "' > m_inmate.start_duration)  AND ('" + alttime + "' <= m_inmate.end_duration ) ");

                    DataTable dtRR = new DataTable();
                    dtRR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRR);
                    if (dtRR.Rows.Count > 0)
                    {
                        ren = Convert.ToInt32(dtRR.Rows[0]["rent"].ToString());
                        inmrate = Convert.ToInt32(dtRR.Rows[0]["rate"].ToString());
                    }

                    string qryx = " AND  rt.rent >= " + ren + " AND im.rate >= '" + inmrate + "' GROUP BY mr.room_id";

       
        CheckAllocationPolicy();
        int xtrabill = 0;
        if (Session["customer"].ToString() == "Donor Free Allocation")
        {
            string qry = @"SELECT extra_billing FROM p_alter_room_allocation WHERE CURDATE() BETWEEN from_date AND to_date  AND type_of_allocation = (SELECT id FROM p_type_of_user WHERE TYPE = 'Donor Free Allocation')";
            OdbcCommand cmdRRcvb = new OdbcCommand();
            cmdRRcvb.Parameters.AddWithValue("tblname", " p_alter_room_allocation");
            cmdRRcvb.Parameters.AddWithValue("attribute", "extra_billing");
            cmdRRcvb.Parameters.AddWithValue("conditionv", "CURDATE() BETWEEN from_date AND to_date  AND type_of_allocation = (SELECT id FROM p_type_of_user WHERE TYPE = 'Donor Free Allocation') ");

            DataTable dtRRcvb = new DataTable();
            dtRRcvb = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRRcvb);
            if (dtRRcvb.Rows.Count > 0)
            {
                xtrabill = Convert.ToInt32(dtRRcvb.Rows[0]["extra_billing"].ToString());

            }

            if (xtrabill == 1)
            {
                qryx = " GROUP BY mr.room_id";
            }
            else
            {
                qryx = "AND  rt.rent <= " + ren + " GROUP BY mr.room_id";
            }
        
        }

        if (Session["customer"].ToString() == "Clubbing")
        {
            qryx = "AND  rt.rent <= " + ren + " GROUP BY mr.room_id";

        }


          int hk = int.Parse(Session["hprs"].ToString());
          if (hk == 1)
          {

              string strSql4 = "SELECT  mr.roomno,mr.room_id FROM  m_sub_room_category rc, m_sub_building msb ,m_room mr ,m_rent rt,m_inmate im WHERE  mr.build_id=msb.build_id AND mr.roomstatus='1'  AND  mr.rowstatus!='2' AND rc.room_cat_id=mr.room_cat_id AND rt.room_category = mr.room_cat_id  AND ( '" + alttime + "' > rt.start_duration)  AND ('" + alttime + "' <= rt.end_duration )   AND mr.build_id='" + Convert.ToInt32(cmbaltbulilding.SelectedValue) + "'    AND (  '" + alttime + "' > im.start_duration)  AND ( '" + alttime + "' <= im.end_duration ) " + qryx;
              OdbcDataAdapter da = new OdbcDataAdapter(strSql4, conn);
              DataTable dtt1 = new DataTable();
              DataColumn colID = dtt1.Columns.Add("room_id", System.Type.GetType("System.Int32"));
              DataColumn colNo = dtt1.Columns.Add("roomno", System.Type.GetType("System.String"));
              DataRow row = dtt1.NewRow();
              row["room_id"] = "-1";
              row["roomno"] = "--Select--";
              dtt1.Rows.InsertAt(row, 0);
              da.Fill(dtt1);
              cmbaltroom.DataSource = dtt1;
              cmbaltroom.DataBind();
          }
          else
          {
              // loading room no's....................

              string strSql4 = "SELECT  mr.roomno,mr.room_id,im.noofinmates FROM  m_sub_room_category rc, m_sub_building msb ,m_room mr ,m_rent rt,m_inmate im  WHERE  mr.build_id=msb.build_id AND mr.roomstatus='1'  AND  mr.rowstatus!='2' AND rc.room_cat_id=mr.room_cat_id AND rt.room_category = mr.room_cat_id  AND ( '" + alttime + "' > rt.start_duration)  AND ('" + alttime + "' <= rt.end_duration ) AND mr.build_id='" + Convert.ToInt32(cmbaltbulilding.SelectedValue) + "' AND (  '" + alttime + "' > im.start_duration)  AND ( '" + alttime + "' <= im.end_duration ) " + qryx;

              OdbcDataAdapter da = new OdbcDataAdapter(strSql4, conn);
              DataTable dtt1 = new DataTable();
              DataColumn colID = dtt1.Columns.Add("room_id", System.Type.GetType("System.Int32"));
              DataColumn colNo = dtt1.Columns.Add("roomno", System.Type.GetType("System.String"));
              DataRow row = dtt1.NewRow();
              row["room_id"] = "-1";
              row["roomno"] = "--Select--";
              dtt1.Rows.InsertAt(row, 0);
              da.Fill(dtt1);
              cmbaltroom.DataSource = dtt1;
              cmbaltroom.DataBind();

          }
          
        int formid=0;
        OdbcCommand cmd = new OdbcCommand("select form_id  from m_sub_form where formname='roomallocation' ", conn);
        OdbcDataReader or=cmd.ExecuteReader();
        if(or.Read())
        {
            formid=Convert.ToInt32(or["form_id"]);

        }
     
        OdbcCommand cmd1 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmd1.CommandType = CommandType.StoredProcedure;
        cmd1.Parameters.AddWithValue("tblname", "m_sub_reason");
        cmd1.Parameters.AddWithValue("attribute", "reason_id,reason");
        cmd1.Parameters.AddWithValue("conditionv", "form_id=" + formid + " and m_sub_reason.rowstatus!='2'");
        OdbcDataAdapter da1 = new OdbcDataAdapter(cmd1);
        DataTable dtt12 = new DataTable();
         da1.Fill(dtt12);
        DataRow row1 = dtt12.NewRow();
        row1["reason_id"] = "-1";
        row1["reason"] = "--Select--";
        dtt12.Rows.InsertAt(row1, 0);
        CmbReason.DataSource = dtt12;
        CmbReason.DataBind();

        if (flag == 1)
        {

            Session["customer"] = "Clubbing";
        }
       
      
    }
    # endregion
          
    # region Alternate Room No Change

    protected void cmbaltroom_SelectedIndexChanged(object sender, EventArgs e)
     {
////////////////////display default inmates according to building name////////////////////////////////////////
         OdbcCommand cmd = new OdbcCommand();
         cmd.Parameters.AddWithValue("tblname", "m_inmate");
         cmd.Parameters.AddWithValue("attribute", "noofinmates");
         cmd.Parameters.AddWithValue("conditionv", "room_id=" + cmbaltroom.SelectedValue + " AND build_id=" + cmbaltbulilding.SelectedValue + " GROUP BY room_id");
         //string inmates = @"SELECT  noofinmates FROM m_inmate WHERE room_id="+cmbaltroom.SelectedValue+" AND build_id="+cmbaltbulilding.SelectedValue+" GROUP BY room_id";
         DataTable dt_inmates = new DataTable();
        dt_inmates=objcls.SpDtTbl("CALL selectcond(?,?,?)",cmd);
         
        if (dt_inmates.Rows.Count > 0)
         {
             int oldimno = Convert.ToInt32(Session["inm"].ToString());
             int defaut = Convert.ToInt32(dt_inmates.Rows[0][0].ToString());
             if (defaut < oldimno)
             {
                 txtinmno.Text = Convert.ToString(oldimno);
             }
             else
             {
                 txtinmno.Text = Convert.ToString(defaut);
             }
           
             //txtinmno.Text = dt_inmates.Rows[0][0].ToString()
         }
         else
         {
             txtinmno.Text = "";
         }
        if (cmbaltbulilding.SelectedValue != "-1")
        {
           
              roomreservecheck();

            if( (Session["rescheck"].ToString() )== "0")
            {
                ExtendTImeChange();
            }
            else
            {
                messagedisplay("The Selected Room is reserved please select another room", "waa1");

            }
        
        }
        else
        {
            messagedisplay("Select a building", "waa");
        }
    }
    # endregion

    # region Allocation Print
    public void AllocationPrint()
    {
       
        #region new print

        //if (chkOldReceipt.Checked == false)
        //{

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            int rent1 = Convert.ToInt32(Session["rent1"]);
            int deposit1 = Convert.ToInt32(Session["deposit1"]);
            Document doc = new Document(iTextSharp.text.PageSize.A4.Rotate(), 57, 0, 127, 0);
            string advrec = "reallocAdvacereceipt" + txtAdRecieptNo.Text.ToString() + ".pdf";
            pdfFilePath = Server.MapPath(".") + "/pdf/" + advrec;

            FontFactory.Register("C:\\WINDOWS\\Fonts\\Arial.ttf");

            Font font10 = FontFactory.GetFont("Arial", 10, 1);
            Font font6 = FontFactory.GetFont("Arial", 8, 1);
            Font font7 = FontFactory.GetFont("Arial", 6, 1);
            Font font9 = FontFactory.GetFont("Arial", 7, 1);
            Font font5 = FontFactory.GetFont("Arial", 9, 1);

            Font font10L = FontFactory.GetFont("Arial", 10, 0);
            Font font11 = FontFactory.GetFont("Arial", 11, 1);
            Font font11L = FontFactory.GetFont("Arial", 11, 0);

            double deposum = 0;
            double securit = 0;
            


            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));

            doc.Open();

            DataTable dtalloc = (DataTable)Session["allocdt"];
            string building = "", roomno = "";
            string one = "";
            string two = "";
            string three = "";
            string four = "";
            string five = "";
            string six = "";
            string seven = "";
            string eight = "";
            string nine = "";
            string ten = "";
            string temp = "";

            string x = "";
            string s1 = "Rent:";
            int recieptno = Convert.ToInt32(Session["reciept"]);
            PdfPTable table = new PdfPTable(14);

            float[] headers = { 20, 33, 45, 40, 55, 20, 58, 23, 38, 38, 34, 45, 40, 40 };
            table.SetWidths(headers);
            table.WidthPercentage = 100;


            for (int i = 1; i < 25; i++)
            {
                if (i == 1)
                {
                    #region i equal 1
                    PdfPCell cell98f = new PdfPCell(new Phrase("", font10));
                    cell98f.Border = 0;
                    cell98f.Colspan = 14;
                    cell98f.FixedHeight = 10;
                    table.AddCell(cell98f);
                    #endregion
                }
                if (i == 2)
                {
                    #region i equal 2
                    OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
                    DateTime PcurDate = Convert.ToDateTime(cmd.ExecuteScalar());
                    string date = PcurDate.ToString("dd-MM-yyyy");
                    string rec = Session["transno"].ToString();


                    PdfPCell cellv = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cellv.Border = 0;
                    cellv.FixedHeight = 0;
                    table.AddCell(cellv);

                    PdfPCell cellvv = new PdfPCell(new Phrase(new Chunk(date, font10)));
                    cellvv.Border = 0;
                    cellvv.Colspan = 2;
                    cellvv.FixedHeight = 0;
                    table.AddCell(cellvv);

                    PdfPCell celldd = new PdfPCell(new Phrase(new Chunk("", font10)));
                    celldd.Border = 0;
                    celldd.Colspan = 3;
                    celldd.FixedHeight = 0;
                    table.AddCell(celldd);

                    PdfPCell celld = new PdfPCell(new Phrase(new Chunk(rec, font10)));
                    celld.Border = 0;
                    celld.FixedHeight = 0;
                    table.AddCell(celld);

                    PdfPCell cellps = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cellps.Border = 0;
                    cellps.Colspan = 2;
                    cellps.FixedHeight = 0;
                    table.AddCell(cellps);

                    PdfPCell cellww = new PdfPCell(new Phrase(new Chunk(date, font10)));
                    cellww.Border = 0;
                    cellww.Colspan = 2;
                    cellww.FixedHeight = 0;
                    table.AddCell(cellww);

                    PdfPCell cellqq = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cellqq.Border = 0;
                    cellqq.FixedHeight = 0;
                    table.AddCell(cellqq);

                    PdfPCell cellhh = new PdfPCell(new Phrase(new Chunk(rec, font10)));
                    cellhh.Border = 0;
                    cellhh.Colspan = 2;
                    cellhh.FixedHeight = 0;
                    table.AddCell(cellhh);

                    #endregion
                }
                if (i == 3)
                {
                    #region i equal 3
                    PdfPCell cell98fg = new PdfPCell(new Phrase("", font10));
                    cell98fg.Border = 0;
                    cell98fg.Colspan = 14;
                    cell98fg.FixedHeight = 0;
                    table.AddCell(cell98fg);
                    #endregion
                }
                else if (i == 4)
                {
                    #region i equal 4

                    one = txtCustomerName.Text.ToString() + ", " + txtDistrict.Text.ToString();
                    if (txtCustomerPlace.Text.ToString() != "")
                    {
                        one = txtCustomerName.Text.ToString() + "," + txtCustomerPlace.Text.ToString();

                    }
                    else
                    {
                        one = txtCustomerName.Text.ToString();
                    }

                    PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell1.Border = 0;
                    cell1.FixedHeight = 24;
                    table.AddCell(cell1);

                    PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk(one, font11L)));
                    cell2.Border = 0;
                    cell2.Colspan = 6;
                    cell2.FixedHeight = 24;
                    table.AddCell(cell2);

                    PdfPCell cellp = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cellp.Border = 0;
                    cellp.FixedHeight = 24;
                    table.AddCell(cellp);

                    PdfPCell cell8 = new PdfPCell(new Phrase(new Chunk(one, font11L)));
                    cell8.Border = 0;
                    cell8.Colspan = 6;
                    cell8.FixedHeight = 24;
                    table.AddCell(cell8);

                    #endregion
                }
                else if (i == 5)
                {
                    #region i equal 5

                    int buildid = 0;

                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                    {
                        roomno = cmbaltroom.SelectedItem.ToString();
                        building = cmbaltbulilding.SelectedItem.ToString();
                        one = roomno + "-" + building;
                        buildid = Convert.ToInt32(cmbaltbulilding.SelectedValue.ToString());
                    }
                    else
                    {
                        roomno = txtRoomNo.Text.ToString();
                        building = cmbBuilding.SelectedItem.ToString();
                        one = roomno.ToString() + "-" + building.ToString();
                        buildid = Convert.ToInt32(cmbBuilding.SelectedValue.ToString());

                    }
                    try
                    {

                        //-------------------------------------------------location------------------------------------------------
                        //set font, make loation, building name, room no, swaminame.... bold.... :P
                        OdbcCommand cmdS1 = new OdbcCommand();
                        cmdS1.Parameters.AddWithValue("tblname", "m_sub_building");
                        cmdS1.Parameters.AddWithValue("attribute", "location");
                        cmdS1.Parameters.AddWithValue("conditionv", "build_id = " + buildid + " ");
                        OdbcDataReader drS = objcls.SpGetReader("CALL selectcond(?,?,?)", cmdS1);
                        //---------------------------------------------------------------------------------------------------------
                        if (drS.Read())
                        {
                            four = drS["location"].ToString();
                        }
                    }
                    catch
                    {
                        four = "";
                    }






                    five = txtNoofDays.Text.ToString();
                    ten = txtNoofDays.Text.ToString();
                    PdfPCell cell34 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell34.Border = 0;
                    cell34.FixedHeight = 22;
                    table.AddCell(cell34);

                    PdfPCell cell35 = new PdfPCell(new Phrase(new Chunk("" + one + "-" + four + "", font11)));
                    cell35.Border = 0;
                    cell35.Colspan = 5;
                    cell35.FixedHeight = 22;
                    table.AddCell(cell35);

                    PdfPCell cell22 = new PdfPCell(new Phrase(new Chunk(five, font10)));
                    cell22.Border = 0;
                    cell22.FixedHeight = 22;
                    table.AddCell(cell22);

                    PdfPCell cell8 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell8.Border = 0;
                    cell8.FixedHeight = 22;
                    table.AddCell(cell8);

                    PdfPCell cell23 = new PdfPCell(new Phrase(new Chunk(one + "-" + four, font11)));
                    cell23.Border = 0;
                    cell23.Colspan = 5;
                    cell23.FixedHeight = 22;
                    table.AddCell(cell23);



                    PdfPCell cell25 = new PdfPCell(new Phrase(new Chunk(five, font10)));
                    cell25.Border = 0;
                    cell25.FixedHeight = 22;
                    table.AddCell(cell25);

                    #endregion
                }
                else if (i == 6)
                {
                    #region i equal 6
                    string propcheckout = txtPropCheckOut.Text.ToString();

                    string[] stringpropsplit = propcheckout.Split(' ');

                    DateTime dd = DateTime.Parse(objcls.yearmonthdate(stringpropsplit[0].ToString()) + " " + stringpropsplit[1].ToString() + " " + stringpropsplit[2].ToString());


                    five = dd.ToString("hh:mm tt") + " ON " + dd.ToString("dd-MMM");

                    OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
                    DateTime PcurDate = Convert.ToDateTime(cmd.ExecuteScalar());

                    one = PcurDate.ToString("hh:mm tt") + " ON " + PcurDate.ToString("dd-MMM");
                    string xavi = "";
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
                    {
                        xavi = "(PCT :" + five + ")";
                    }

                    PdfPCell cell30 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell30.Border = 0;
                    cell30.FixedHeight = 23;
                    table.AddCell(cell30);

                    PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk(five, font10)));
                    cell31.Border = 0;
                    cell31.Colspan = 6;
                    cell31.FixedHeight = 23;
                    table.AddCell(cell31);


                    PdfPCell cell26 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell26.Border = 0;
                    cell26.FixedHeight = 23;
                    table.AddCell(cell26);

                    PdfPCell cell27 = new PdfPCell(new Phrase(new Chunk(one + xavi, font10)));
                    cell27.Border = 0;
                    cell27.Colspan = 5;
                    cell27.FixedHeight = 23;
                    table.AddCell(cell27);

                    PdfPCell cell28 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell28.Border = 0;
                    cell28.FixedHeight = 23;
                    table.AddCell(cell28);



                    #endregion
                }
                else if (i == 7)
                {
                    #region i equal 7



                    string customer = Session["customer"].ToString();

                    x = cmbCheckOutMehtod.SelectedItem.ToString();

                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay" || cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                    {
                        x = cmbCheckOutMehtod.SelectedItem.ToString();
                        if (txtNoofDays.Text == "1")
                        {

                            two = txtRentAlloc.Text.ToString();
                            //three=Session["newdue"].ToString();
                        }
                        else
                        {
                            deposum = Convert.ToDouble(txtRentAlloc.Text) + Convert.ToDouble(txtDepositAlloc.Text) + Convert.ToDouble(txtinmcharge.Text);
                            //two = "Total="+deposum;
                            two = txtRentAlloc.Text.ToString() + " (SD)" + txtDepositAlloc.Text+"        " +"Total:" + deposum;

                            //three=Session["newdue"].ToString();
                        }

                    }

                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                    {
                        x = "Alternate Room";
                        three = Session["due"].ToString();
                        if (customer == "Donor Free Allocation")
                        {

                            if (txtNoofDays.Text == "1")
                            {


                                two = "Free Pass";
                            }
                            else
                            {
                                int n = Convert.ToInt32(txtNoofDays.Text);
                                n = n - 1;

                                two = "1 Free Stay and " + n.ToString() + " @ " + rent1.ToString() + " =" + txtRentAlloc.Text.ToString();

                            }

                        }

                        else if (customer == "Donor Paid Allocation")
                        {
                            two = txtNoofDays.Text.ToString() + " @ " + rent1.ToString() + " =" + txtRentAlloc.Text.ToString();

                        }
                        else if (customer == " Donor multiple pass")
                        {
                            int free = Convert.ToInt32(Session["free"]);

                            int n1 = Convert.ToInt32(txtNoofDays.Text);

                            n1 = n1 - free;

                            two = free + " Free stay and " + n1.ToString() + " @ " + rent1.ToString() + "=" + txtRentAlloc.Text.ToString();


                        }
                        else if (txtNoofDays.Text == "1")
                        {
                            two = txtRentAlloc.Text.ToString();

                        }
                        else
                        {

                            two = txtRentAlloc.Text.ToString();

                        }





                    }
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                    {
                        two = "0";
                    }



                    string keyret = "";
                    if (Session["flag"].ToString() == "true")
                    {
                        keyret = "Keylost charge =" + txtKeynotReturnCharge.Text;


                    }
                    if (Session["normflag"].ToString() == "true")
                    {
                        keyret = "Keylost charge =" + txtKeynotReturnCharge.Text;
                    }

                    PdfPCell cell40 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell40.Border = 0;
                    cell40.Colspan = 1;
                    cell40.FixedHeight = 17;
                    table.AddCell(cell40);

                   //PdfPCell cell40x = new PdfPCell(new Phrase(new Chunk("Rent =" + two, font10)));
                   
                    PdfPCell cell40x = new PdfPCell(new Phrase(new Chunk(s1+two, font10)));

                    cell40x.Border = 0;
                    cell40x.Colspan =2;
                    cell40x.FixedHeight =23;
                    table.AddCell(cell40x);

                    PdfPCell cell41 = new PdfPCell(new Phrase(new Chunk(keyret, font11)));
                    cell41.Border = 0;
                    cell41.FixedHeight = 17;
                    cell41.Colspan = 3;
                    table.AddCell(cell41);

                    PdfPCell cell423 = new PdfPCell(new Phrase(new Chunk("", font11L)));
                    cell423.Border = 0;
                    cell423.FixedHeight = 17;
                    cell423.Colspan = 1;
                    cell423.FixedHeight = 17;
                    table.AddCell(cell423);




                    PdfPCell cell42 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell42.Border = 0;
                    cell42.Colspan = 1;
                    cell42.FixedHeight = 17;
                    table.AddCell(cell42);

                    PdfPCell cell40xy = new PdfPCell(new Phrase(new Chunk(s1 +two, font10)));
                    cell40xy.Border = 0;
                    cell40xy.Colspan =3;
                    cell40xy.FixedHeight = 23;
                    table.AddCell(cell40xy);

                    PdfPCell cell43 = new PdfPCell(new Phrase(new Chunk(keyret, font11)));
                    cell43.Border = 0;
                    cell43.Colspan = 3;
                    cell43.FixedHeight = 17;
                    table.AddCell(cell43);


                    PdfPCell cell435 = new PdfPCell(new Phrase(new Chunk("", font11L)));
                    cell435.Border = 0;
                    cell435.Colspan = 1;
                    cell435.FixedHeight = 17;
                    table.AddCell(cell435);




                    #endregion
                }
                else if (i == 8)
                {
                    #region i equal 8



                    DateTime vec = DateTime.Parse(objcls.yearmonthdate(txtVacatingDate.Text.ToString()));



                    two = "Inmate Rate =" + Convert.ToInt32(txtinmcharge.Text);

                    if (Session["flag"].ToString() == "true")
                    {



                        two = "Rate =" + (Convert.ToInt32(txtRentAlloc.Text) + Convert.ToInt32(txtKeynotReturnCharge.Text)).ToString();

                    }

                    if (Session["normflag"].ToString() == "true")
                    {
                        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                        {
                            two = "Rate =" + txtKeynotReturnCharge.Text;
                            five = txtVecatingTime.Text + " ON " + vec.ToString("dd-MMM");
                        }

                    }
                    else
                    {
                        DateTime d1c = DateTime.Parse(objcls.yearmonthdate(txtExtendDate.Text.ToString()));
                        five = txtExtendTime.Text + " ON " + d1c.ToString("dd-MMM");
                    }

                    PdfPCell cell40 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell40.Border = 0;
                    cell40.Colspan = 2;
                    cell40.FixedHeight = 17;
                    table.AddCell(cell40);

                    PdfPCell cell41 = new PdfPCell(new Phrase(new Chunk("" + two, font11)));
                    cell41.Border = 0;
                    cell41.FixedHeight = 17;
                    cell41.Colspan = 3;
                    table.AddCell(cell41);

                    PdfPCell cell423 = new PdfPCell(new Phrase(new Chunk(five, font11L)));
                    cell423.Border = 0;
                    cell423.FixedHeight = 17;
                    cell423.Colspan = 2;
                    cell423.FixedHeight = 17;
                    table.AddCell(cell423);


                    ////////////////////////////inmate charge/////////////////////////

                    PdfPCell cell42 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell42.Border = 0;
                    cell42.Colspan = 2;
                    cell42.FixedHeight = 17;
                    table.AddCell(cell42);

                    PdfPCell cell43 = new PdfPCell(new Phrase(new Chunk("" + two, font11)));
                    cell43.Border = 0;
                    cell43.Colspan = 3;
                    cell43.FixedHeight = 17;
                    table.AddCell(cell43);


                    PdfPCell cell435 = new PdfPCell(new Phrase(new Chunk(five, font11L)));
                    cell435.Border = 0;
                    cell435.Colspan = 2;
                    cell435.FixedHeight = 17;
                    table.AddCell(cell435);



                    #endregion
                }
                else if (i == 9)
                {
                    #region i equal 9


                    //////////////////////amounts in words////////////////////////////////////////////

                    NumberToEnglish n = new NumberToEnglish();
                    string s = objcls.NumberToTextWithLakhs(Int64.Parse(txtRentAlloc.Text.ToString()) + Int64.Parse(txtinmcharge.Text)+Int64.Parse(txtDepositAlloc.Text));

                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                    {
                        s = objcls.NumberToTextWithLakhs(Int64.Parse(txtRentAlloc.Text) + Int64.Parse(txtinmcharge.Text));

                    }

                    if (Session["flag"].ToString() == "true")
                    {

                        s = objcls.NumberToTextWithLakhs(Int64.Parse(txtRentAlloc.Text.ToString()) + Int64.Parse(txtKeynotReturnCharge.Text.ToString()));


                    }
                    
                    if (Session["normflag"].ToString() == "true")
                    {
                        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                        {
                            s = objcls.NumberToTextWithLakhs(Int64.Parse(txtKeynotReturnCharge.Text.ToString()));

                        }
                    }



                    two = s + " Only";

                    PdfPCell cell45 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell45.Border = 0;
                    cell45.FixedHeight = 20;
                    table.AddCell(cell45);

                    PdfPCell cell46 = new PdfPCell(new Phrase(new Chunk("   " + two, font10)));
                    cell46.Border = 0;
                    cell46.Colspan = 4;
                    cell46.FixedHeight = 20;
                    table.AddCell(cell46);



                    PdfPCell cell47 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell47.Border = 0;
                    cell47.Colspan = 3;
                    cell47.FixedHeight = 20;
                    table.AddCell(cell47);


                    PdfPCell cell48 = new PdfPCell(new Phrase(new Chunk(two, font10)));
                    cell48.Border = 0;
                    cell48.Colspan = 4;
                    cell48.FixedHeight = 20;
                    table.AddCell(cell48);


                    PdfPCell cell49 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell49.Border = 0;
                    cell49.Colspan = 2;
                    cell49.FixedHeight = 20;
                    table.AddCell(cell49);


                    #endregion
                }
                else if (i == 11)
                {
                    #region 2

                    string barc = Session["barcod"].ToString();

                    PdfPCell cellb = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cellb.Border = 0;
                    cellb.Colspan = 11;
                    cellb.FixedHeight = 20;
                    table.AddCell(cellb);



                    PdfPCell baarc = new PdfPCell(new Phrase(new Chunk()));
                    baarc.Border = 0;
                    baarc.Colspan = 3;
                    baarc.FixedHeight = 25;
                    System.Drawing.Image myimage = Code128Rendering.MakeBarcodeImage(barc.ToString(), 2, true);
                    iTextSharp.text.Image bcode = iTextSharp.text.Image.GetInstance(myimage, BaseColor.YELLOW);
                    baarc.Image = bcode;
                    table.AddCell(baarc);



                    #endregion

                }
                else if (i == 12)
                {
                    #region i equal 12


                    int tym = Convert.ToInt32(txtNoofDays.Text);
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                    {
                        tym = Convert.ToInt32(txtNoofDays.Text) - Convert.ToInt32(txtDaysStayed.Text);
                    }
                    PdfPCell cell98 = new PdfPCell(new Phrase("", font10));
                    cell98.Border = 0;
                    cell98.Colspan = 9;
                    cell98.FixedHeight = 20;
                    table.AddCell(cell98);

                    PdfPCell cell98y = new PdfPCell(new Phrase("Extra amount charged for " + tym.ToString() + " hrs.", font10));
                    cell98y.Border = 0;
                    cell98y.Colspan = 5;
                    cell98y.FixedHeight = 20;
                    table.AddCell(cell98y);


                    #endregion
                }
                else if (i == 13)
                {
                    #region i equal 13


                    OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
                    DateTime PcurDate = Convert.ToDateTime(cmd.ExecuteScalar());

                    one = PcurDate.ToString("dd-MM-yyyy");


                    four = Session["transno"].ToString();


                    PdfPCell cell50 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell50.Border = 0;
                    cell50.FixedHeight = 23;
                    table.AddCell(cell50);

                    PdfPCell cell51 = new PdfPCell(new Phrase(new Chunk(one, font10)));
                    cell51.Border = 0;
                    cell51.Colspan = 2;
                    cell51.FixedHeight = 23;
                    table.AddCell(cell51);

                    PdfPCell cell52 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell52.Border = 0;
                    cell52.Colspan = 2;
                    cell52.FixedHeight = 23;
                    table.AddCell(cell52);

                    PdfPCell cell53 = new PdfPCell(new Phrase(new Chunk(four, font10)));
                    cell53.Border = 0;
                    cell53.FixedHeight = 23;
                    table.AddCell(cell53);

                    PdfPCell cell54 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell54.Border = 0;
                    cell54.Colspan = 2;
                    cell54.FixedHeight = 23;
                    table.AddCell(cell54);

                    PdfPCell cell55 = new PdfPCell(new Phrase(new Chunk(one, font10)));
                    cell55.Border = 0;
                    cell55.Colspan = 2;
                    cell55.FixedHeight = 23;
                    table.AddCell(cell55);

                    PdfPCell cell56 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell56.Border = 0;
                    cell56.Colspan = 2;
                    cell56.FixedHeight = 23;
                    table.AddCell(cell56);

                    PdfPCell cell57 = new PdfPCell(new Phrase(new Chunk(four, font10)));
                    cell57.Border = 0;
                    cell57.Colspan = 2;
                    cell57.FixedHeight = 23;
                    table.AddCell(cell57);

                    #endregion
                }
                else if (i == 14)
                {
                    #region i equal 14

                    one = txtCustomerName.Text.ToString();
                    four = roomno + "-" + building;

                    PdfPCell cell58 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell58.Border = 0;
                    cell58.FixedHeight = 18;
                    table.AddCell(cell58);

                    PdfPCell cell59 = new PdfPCell(new Phrase(new Chunk(one, font10)));
                    cell59.Border = 0;
                    cell59.Colspan = 3;
                    cell59.FixedHeight = 18;
                    table.AddCell(cell59);

                    PdfPCell cell60 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell60.Border = 0;
                    cell60.FixedHeight = 18;
                    table.AddCell(cell60);

                    PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(four, font6)));
                    cell61.Border = 0;
                    cell61.Colspan = 2;
                    cell61.FixedHeight = 18;
                    table.AddCell(cell61);

                    PdfPCell cell62 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell62.Border = 0;
                    cell62.Colspan = 7;
                    cell62.FixedHeight = 18;
                    table.AddCell(cell62);

                    #endregion
                }
                else if (i == 15)
                {
                    #region i equal 15




                    DateTime v1 = DateTime.Parse(objcls.yearmonthdate(txtVacatingDate.Text.ToString()));

                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                    {
                        securit = Convert.ToDouble(txtDepositAlloc.Text) + Convert.ToDouble(Session["old"].ToString());
                        five = Session["old"].ToString() + "+" + txtDepositAlloc.Text + "(Sec)=" + securit;

                    }
                    else
                    {

                        deposum = Convert.ToDouble(txtDepositAlloc.Text) + Convert.ToDouble(txtinmdeposit.Text);
                      
                        five = txtDepositAlloc.Text.ToString() + "+" + txtinmdeposit.Text + "(Inm)" + deposum;
                    }
                    six = txtCustomerName.Text.ToString();
                    nine = roomno + "-" + building;
                                       
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                    {
                        three = txtVecatingTime.Text + " ON " + v1.ToString("dd-MMM");
                        five = "0";
                    }
                    else
                    {
                        DateTime d1 = DateTime.Parse(objcls.yearmonthdate(txtExtendDate.Text.ToString()));
                        three = txtExtendTime.Text + " ON " + d1.ToString("dd-MMM");
                    }


                    PdfPCell cell63 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell63.Border = 0;
                    cell63.FixedHeight = 18;
                    table.AddCell(cell63);

                    PdfPCell cell64 = new PdfPCell(new Phrase(new Chunk("   " + one, font10)));
                    cell64.Border = 0;
                    cell64.FixedHeight = 18;
                    table.AddCell(cell64);


                    PdfPCell cell66 = new PdfPCell(new Phrase(new Chunk(three, font6)));
                    cell66.Border = 0;
                    cell66.Colspan = 2;
                    cell66.HorizontalAlignment = 2;

                    cell66.FixedHeight = 18;
                    table.AddCell(cell66);
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    PdfPCell cell67 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell67.Border = 0;
                    cell67.Colspan = 2;
                    cell67.FixedHeight = 18;
                    table.AddCell(cell67);

                    PdfPCell cell68 = new PdfPCell(new Phrase(new Chunk(five, font10)));
                    cell68.Border = 0;
                    cell68.Colspan = 2;
                    cell68.FixedHeight = 18;
                    table.AddCell(cell68);

                    PdfPCell cell69 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell69.Border = 0;
                    cell69.FixedHeight = 18;
                    table.AddCell(cell69);

                    PdfPCell cell70 = new PdfPCell(new Phrase(new Chunk(six, font10)));
                    cell70.Border = 0;
                    cell70.Colspan = 3;
                    cell70.FixedHeight = 18;
                    table.AddCell(cell70);

                    PdfPCell cell71 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell71.Border = 0;
                    cell71.FixedHeight = 18;
                    table.AddCell(cell71);

                    PdfPCell cell72 = new PdfPCell(new Phrase(new Chunk(nine, font6)));
                    cell72.Border = 0;
                    cell72.Colspan = 2;
                    cell72.FixedHeight = 18;
                    table.AddCell(cell72);


                    #endregion
                }
                else if (i == 16)
                {
                    #region i equal 16

                    string propcheckout = txtPropCheckOut.Text.ToString();

                    string[] stringpropsplit = propcheckout.Split(' ');

                    DateTime dd = DateTime.Parse(objcls.yearmonthdate(stringpropsplit[0].ToString()) + " " + stringpropsplit[1].ToString() + " " + stringpropsplit[2].ToString());


                    OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
                    DateTime PcurDate = Convert.ToDateTime(cmd.ExecuteScalar());
                    six = PcurDate.ToString("hh:mm tt");


                    DateTime v1 = DateTime.Parse(objcls.yearmonthdate(txtVacatingDate.Text.ToString()));


                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                    {
                        eight = txtVecatingTime.Text + " ON " + v1.ToString("dd-MMM");
                        ten = "0";
                    }
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                    {
                        DateTime d11 = DateTime.Parse(objcls.yearmonthdate(txtExtendDate.Text.ToString()));
                        eight = txtExtendTime.Text + " ON " + d11.ToString("dd-MMM");
                        ten = Session["old"].ToString() + "+" + txtDepositAlloc.Text + "(Sec)=" + securit;
                    }
                    else
                    {
                        DateTime d11 = DateTime.Parse(objcls.yearmonthdate(txtExtendDate.Text.ToString()));
                        eight = txtExtendTime.Text + " ON " + d11.ToString("dd-MMM");
                        //ten = Session["old"].ToString() + "+" + txtDepositAlloc.Text + "(Sec)=" + securit;
                        ten = txtDepositAlloc.Text.ToString() + "+" + txtinmdeposit.Text + "(Inm)" + deposum;

                    }

                    PdfPCell cell73 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell73.Border = 0;
                    cell73.Colspan = 3;
                    cell73.FixedHeight = 20;
                    table.AddCell(cell73);

                    PdfPCell cell74 = new PdfPCell(new Phrase(new Chunk(ten, font10)));
                    cell74.Border = 0;
                    cell74.FixedHeight = 20;
                    table.AddCell(cell74);

                    PdfPCell cell74p = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell74p.Border = 0;
                    cell74p.Colspan = 4;
                    cell74p.FixedHeight = 20;
                    table.AddCell(cell74p);

                    PdfPCell cell75 = new PdfPCell(new Phrase(new Chunk("" + six, font10)));
                    cell75.Border = 0;
                    cell75.FixedHeight = 20;
                    table.AddCell(cell75);

                    PdfPCell cell76 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell76.Border = 0;
                    cell76.FixedHeight = 20;
                    table.AddCell(cell76);

                    PdfPCell cell77 = new PdfPCell(new Phrase(new Chunk(eight, font6)));
                    cell77.Border = 0;
                    cell77.FixedHeight = 20;
                    cell77.Colspan = 1;
                    table.AddCell(cell77);

                    PdfPCell cell78 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell78.Border = 0;
                    cell78.Colspan = 2;
                    cell78.FixedHeight = 20;
                    table.AddCell(cell78);

                    PdfPCell cell79 = new PdfPCell(new Phrase(new Chunk(ten, font10)));
                    cell79.Border = 0;
                    cell79.FixedHeight = 20;
                    table.AddCell(cell79);

                    #endregion
                }
                else if (i == 17)
                {
                    #region i equal 17
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                    {
                        eight = Session["old"].ToString() + "+" + txtDepositAlloc.Text + "(Sec)=" + securit;
                        NumberToEnglish n = new NumberToEnglish();
                        string s = n.changeNumericToWords(int.Parse(securit.ToString()));
                        three = s + " Only";
                    }
                    else
                    {

                        // eight = Session["old"].ToString() + "+" + txtDepositAlloc.Text + "(Sec)=" + securit;
                        eight = txtDepositAlloc.Text.ToString() + "+" + txtinmdeposit.Text + "(Inm)" + deposum;
                        NumberToEnglish n = new NumberToEnglish();
                        string s = n.changeNumericToWords(int.Parse(deposum.ToString()));
                        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                        {
                            s = "0";
                        }
                        three = s + " Only";
                    }


                    PdfPCell cell80 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell80.Border = 0;
                    cell80.FixedHeight = 20;
                    table.AddCell(cell80);

                    PdfPCell cell81 = new PdfPCell(new Phrase(new Chunk(three, font10)));
                    cell81.Border = 0;
                    cell81.Colspan = 4;
                    cell81.FixedHeight = 20;
                    table.AddCell(cell81);

                    PdfPCell cell82 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell82.Border = 0;
                    cell82.Colspan = 5;
                    cell82.FixedHeight = 20;
                    table.AddCell(cell82);

                    PdfPCell cell83 = new PdfPCell(new Phrase(new Chunk(eight, font10)));
                    cell83.Border = 0;
                    cell83.Colspan = 5;
                    cell83.FixedHeight = 20;
                    table.AddCell(cell83);

                    PdfPCell cell84 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell84.Border = 0;
                    cell84.Colspan = 3;
                    cell84.FixedHeight = 20;
                    table.AddCell(cell84);

                    #endregion
                }
                else if (i == 18)
                {
                    #region i equal 18
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
                    {
                        NumberToEnglish n = new NumberToEnglish();
                        string s = n.changeNumericToWords(int.Parse(securit.ToString()));
                        eight = s + " Only";
                    }
                    else
                    { 
                        NumberToEnglish n = new NumberToEnglish();
                        string s = n.changeNumericToWords(int.Parse(deposum.ToString()));
                        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                        {
                            s = "0";
                        }
                        eight = s + " Only";
                    }


                    PdfPCell cell85 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell85.Border = 0;
                    cell85.Colspan = 8;
                    cell85.FixedHeight = 20;
                    table.AddCell(cell85);

                    PdfPCell cell86 = new PdfPCell(new Phrase(new Chunk(eight, font10)));
                    cell86.Border = 0;
                    cell86.Colspan = 5;
                    cell86.FixedHeight = 20;
                    table.AddCell(cell86);

                    PdfPCell cell87 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell87.Border = 0;
                    cell87.Colspan = 2;
                    cell87.FixedHeight = 20;
                    table.AddCell(cell87);

                    #endregion
                }
                else if (i == 19)
                {
                    #region i equal 19
                    PdfPCell cell9821 = new PdfPCell(new Phrase("", font10));
                    cell9821.Border = 0;
                    cell9821.Colspan = 14;
                    cell9821.FixedHeight = 15;
                    table.AddCell(cell9821);
                    #endregion
                }
                else if (i == 20)
                {

                    #region i equal 20
                                        
                    if (x == "Alternate Room")
                    {
                        one = x + "due Rec no" + txtAdRecieptNo.Text + " on Building " + txtRoomNo.Text + "-" + cmbBuilding.SelectedItem.ToString();

                    }
                    else
                    {
                        one = x + "due Rec no " + txtAdRecieptNo.Text.ToString();

                    }



                    PdfPCell cell851 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell851.Border = 0;
                    cell851.FixedHeight = 20;
                    table.AddCell(cell851);

                    PdfPCell cell852 = new PdfPCell(new Phrase(new Chunk(one, font10)));
                    cell852.Border = 0;
                    cell852.Colspan =7;
                    cell852.FixedHeight = 20;
                    table.AddCell(cell852);

                    PdfPCell cell853 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell853.Border = 0;
                    cell853.Colspan = 5;
                    cell853.FixedHeight = 20;
                    table.AddCell(cell853);

                    #endregion
                }

                else if (i == 21)
                {
                    #region i equal 21
                    PdfPCell cell982 = new PdfPCell(new Phrase("", font10));
                    cell982.Border = 0;
                    cell982.Colspan = 14;
                    cell982.FixedHeight = 0;
                    table.AddCell(cell982);
                    #endregion
                }
                else if (i == 22)
                {
                    #region i equal 22

                    OdbcCommand cmd = new OdbcCommand("SELECT NOW()", conn);
                    DateTime PcurDate = Convert.ToDateTime(cmd.ExecuteScalar());
                    six = PcurDate.ToString("dd-MM-yyyy");



                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
                    {
                        roomno = cmbaltroom.SelectedItem.ToString();

                        string buildg = "";
                        string buildingg = cmbaltbulilding.SelectedItem.ToString();
                        if (buildingg.Contains("(") == true)
                        {
                            string[] buildS1g, buildS2g; ;
                            buildS1g = buildingg.Split('(');
                            buildg = buildS1g[1];
                            buildS2g = buildg.Split(')');
                            buildg = buildS2g[0];
                            buildingg = buildg;
                        }
                        else if (buildingg.Contains("Cottage") == true)
                        {
                            buildingg = buildingg.Replace("Cottage", "Cot");
                        }


                        ten = roomno + "-" + buildingg;
                    }
                    else
                    {
                        roomno = txtRoomNo.Text.ToString();

                        string buildg = "";
                        string buildingg = cmbBuilding.SelectedItem.ToString();
                        if (buildingg.Contains("(") == true)
                        {
                            string[] buildS1g, buildS2g; ;
                            buildS1g = buildingg.Split('(');
                            buildg = buildS1g[1];
                            buildS2g = buildg.Split(')');
                            buildg = buildS2g[0];
                            buildingg = buildg;
                        }
                        else if (buildingg.Contains("Cottage") == true)
                        {
                            buildingg = buildingg.Replace("Cottage", "Cot");
                        }


                        ten = roomno.ToString() + "-" + buildingg.ToString();

                    }



                    eight = Session["transno"].ToString();


                    PdfPCell cell88 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell88.Border = 0;
                    cell88.Colspan = 8;
                    cell88.FixedHeight = 18;
                    table.AddCell(cell88);

                    PdfPCell cell89 = new PdfPCell(new Phrase(new Chunk(six, font10)));
                    cell89.Border = 0;
                    cell89.Colspan = 2;
                    cell89.FixedHeight = 18;
                    table.AddCell(cell89);


                    PdfPCell cell90 = new PdfPCell(new Phrase(new Chunk("" + eight, font10)));
                    cell90.Border = 0;
                    cell90.Colspan = 2;
                    cell90.FixedHeight = 18;
                    table.AddCell(cell90);



                    PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(ten, font10)));
                    cell92.Border = 0;
                    cell92.Colspan = 2;
                    cell92.FixedHeight = 18;
                    table.AddCell(cell92);

                    #endregion
                }

                else if (i == 23)
                {
                    #region i equal 23

                    six = txtCustomerName.Text.ToString();
                    ten = txtNoofDays.Text.ToString();
                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                    {
                        ten = "0";
                    }

                    PdfPCell cell93 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell93.Border = 0;
                    cell93.Colspan = 7;
                    cell93.FixedHeight = 16;
                    table.AddCell(cell93);

                    PdfPCell cell94 = new PdfPCell(new Phrase(new Chunk("Name: " + six, font5)));
                    cell94.Border = 0;
                    cell94.Colspan = 4;
                    cell94.FixedHeight = 16;
                    table.AddCell(cell94);


                    PdfPCell cell96 = new PdfPCell(new Phrase(new Chunk("No of hours: " + ten, font5)));
                    cell96.Border = 0;
                    cell96.Colspan = 3;
                    cell96.FixedHeight = 16;
                    table.AddCell(cell96);


                    #endregion
                }
                else if (i == 24)
                {
                    #region i equal 24


                    DateTime v1 = DateTime.Parse(objcls.yearmonthdate(txtVacatingDate.Text.ToString()));



                    temp = txtNoofDays.Text.ToString();

                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Normal")
                    {
                        ten = txtVecatingTime.Text + " ON " + v1.ToString("dd-MMM");
                        temp = "0";
                    }
                    else
                    {
                        DateTime d12 = DateTime.Parse(objcls.yearmonthdate(txtExtendDate.Text.ToString()));
                        ten = txtExtendTime.Text + " ON " + d12.ToString("dd-MMM");
                    }
                    PdfPCell cell98 = new PdfPCell(new Phrase(new Chunk("", font10)));
                    cell98.Border = 0;
                    cell98.Colspan = 7;
                    cell98.FixedHeight = 16;
                    table.AddCell(cell98);

                    PdfPCell cell99 = new PdfPCell(new Phrase(new Chunk("No of Inm: " + txtinmno.Text, font5)));
                    cell99.Border = 0;
                    cell99.Colspan = 3;
                    cell99.FixedHeight = 16;
                    table.AddCell(cell99);



                    PdfPCell cell101 = new PdfPCell(new Phrase(new Chunk("Check Out: " + ten, font10)));
                    cell101.Border = 0;
                    cell101.Colspan = 4;
                    cell101.FixedHeight = 16;
                    table.AddCell(cell101);



                    #endregion
                }
                else
                {
                    #region general

                    PdfPCell cell98 = new PdfPCell(new Phrase("", font10));
                    cell98.Border = 0;
                    cell98.Colspan = 14;
                    cell98.FixedHeight = 18;
                    table.AddCell(cell98);

                    #endregion

                }


                one = two = three = four = five = six = seven = eight = nine = ten = temp = "";
            }

            doc.Add(table);


            doc.Close();

            AllocationRecieptIncrement();


            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + advrec + "";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);

        //}
        #endregion
        //else if (chkOldReceipt.Checked == true)
        //{
        //    #region old print

        //    int rr = int.Parse(txtAllocRecNo.Text.ToString());

        //    string recc = rr.ToString();
        //    recc = "Oldreciept" + recc + ".pdf";
        //    int rent1 = Convert.ToInt32(Session["rent1"]);
        //    int deposit1 = Convert.ToInt32(Session["deposit1"]);

        //    Document doc = new Document(iTextSharp.text.PageSize.LETTER, -60, 3, 59, 50);
        //    pdfFilePath = Server.MapPath(".") + "/pdf/" + recc;


        //    FontFactory.Register("C:\\WINDOWS\\Fonts\\Arial.ttf");
        //    Font font8 = FontFactory.GetFont("Arial", 10);
        //    Font font8B = FontFactory.GetFont("Arial", 10, 1);

        //    PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
        //    doc.Open();

        //    PdfPTable table = new PdfPTable(5);
        //    table.TotalWidth = 600f;
        //    table.LockedWidth = true;
        //    DataTable dtalloc = (DataTable)Session["allocdt"];

        //    #region MyRegion

        //    for (int iii = 0; iii < 2; iii++)
        //    {
        //        for (int ii = 0; ii < 27; ii++)
        //        {
        //            PdfPCell cell = new PdfPCell(new Phrase(""));
        //            cell.Border = 0;
        //            cell.Colspan = 5;
        //            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
        //            table.AddCell(cell);
        //        }

        //        for (int jj = -1; jj <= 8; jj++)
        //        {
        //            if (jj == -1)
        //            {
        //                #region curdate
        //                OdbcCommand cmd46 = new OdbcCommand();//"CALL selectcond(?,?,?)", con);
        //                cmd46.CommandType = CommandType.StoredProcedure;
        //                cmd46.Parameters.AddWithValue("tblname", "t_dayclosing");
        //                cmd46.Parameters.AddWithValue("attribute", "closedate_start");
        //                cmd46.Parameters.AddWithValue("conditionv", "daystatus='open'");
        //                DataTable dtt46 = new DataTable();
        //                dtt46 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd46);

        //                DateTime sa = DateTime.Parse(dtt46.Rows[0][0].ToString());

        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell10.Border = 0;
        //                cell10.Colspan = 2;
        //                table.AddCell(cell10);

        //                PdfPCell cell101 = new PdfPCell(new Phrase(new Chunk("Rpt No: " + Session["transno"].ToString(), font8)));
        //                cell101.Border = 0;
        //                cell101.HorizontalAlignment = 2;
        //                table.AddCell(cell101);

        //                PdfPCell cell102 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell102.Border = 0;
        //                table.AddCell(cell102);

        //                PdfPCell cell14 = new PdfPCell(new Phrase(new Chunk(sa.ToString("dd/MM/yyyy"), font8)));
        //                cell14.Border = 0;
        //                table.AddCell(cell14);
        //                #endregion
        //            }
        //            if (jj == 0)
        //            {
        //                #region swami name
        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell10.Border = 0;
        //                cell10.Colspan = 2;
        //                table.AddCell(cell10);

        //                PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(txtCustomerName.Text, font8)));
        //                cell12.Border = 0;
        //                cell12.Colspan = 2;
        //                table.AddCell(cell12);

        //                PdfPCell cell14 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell14.Border = 0;
        //                table.AddCell(cell14);
        //                #endregion
        //            }
        //            else if (jj == 1)
        //            {
        //                #region place & State & District
        //                string dis, plac;
        //                plac = txtCustomerPlace.Text;
        //                string prin = plac;
        //                if (txtDistrict.Text != "")
        //                {
        //                    dis = txtDistrict.Text;
        //                    prin = prin + ", " + dis;
        //                }


        //                prin = prin + ".";

        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell10.Border = 0;
        //                cell10.Colspan = 2;
        //                table.AddCell(cell10);

        //                PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(prin, font8)));
        //                cell12.Border = 0;
        //                cell12.Colspan = 3;
        //                table.AddCell(cell12);

        //                #endregion
        //            }
        //            else if (jj == 2)
        //            {
        //                #region Building & Room & Location
        //                string bg = "", rm = "";

        //                try
        //                {
        //                    //-------------------------------------------------location------------------------------------------------
        //                    //set font, make loation, building name, room no, swaminame.... bold.... :P
        //                    OdbcCommand cmdS1 = new OdbcCommand();
        //                    cmdS1.Parameters.AddWithValue("tblname", "m_sub_building");
        //                    cmdS1.Parameters.AddWithValue("attribute", "location");
        //                    if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
        //                    {
        //                        cmdS1.Parameters.AddWithValue("conditionv", "build_id = " + cmbaltbulilding.SelectedValue.ToString() + " ");
        //                        bg = cmbaltbulilding.SelectedItem.ToString();
        //                        rm = cmbaltroom.SelectedItem.ToString();

        //                    }
        //                    else
        //                    {
        //                        cmdS1.Parameters.AddWithValue("conditionv", "build_id = " + cmbBuilding.SelectedValue.ToString() + " ");

        //                        bg = cmbBuilding.SelectedItem.ToString();
        //                        rm = txtRoomNo.Text;
        //                    }
        //                    OdbcDataReader drS = objcls.SpGetReader("CALL selectcond(?,?,?)", cmdS1);
        //                    //---------------------------------------------------------------------------------------------------------
        //                    if (drS.Read())
        //                    {
        //                        loc = drS["location"].ToString();
        //                    }
        //                }
        //                catch
        //                {
        //                    loc = "";
        //                }



        //                bg = objcls.ConvertNewlineToSpaces(bg);

        //                prin = bg + " - " + rm + "      Loc: " + loc;
        //                string prin3 = bg + " - " + rm;

        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell10.Border = 0;
        //                cell10.Colspan = 2;
        //                table.AddCell(cell10);

        //                if (iii == 0)
        //                {
        //                    PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(prin, font8B)));
        //                    cell12.Border = 0;
        //                    cell12.Colspan = 3;
        //                    table.AddCell(cell12);
        //                }
        //                else
        //                {
        //                    PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(prin3, font8B)));
        //                    cell12.Border = 0;
        //                    cell12.Colspan = 3;
        //                    table.AddCell(cell12);
        //                }


        //                #endregion
        //            }
        //            else if (jj == 3)
        //            {
        //                #region Check in Details & Barcode
        //                string cid, cint;
        //                string hh = objcls.yearmonthdate(txtVacatingDate.Text);
        //                DateTime str11 = DateTime.Parse(hh);
        //                string str111 = str11.ToString("dd-MM-yyyy");
        //                cid = str111.ToString();
        //                cint = txtVecatingTime.Text.ToString();
        //                prin = cid + " , " + cint;

        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell10.Border = 0;
        //                cell10.Colspan = 2;
        //                table.AddCell(cell10);

        //                PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(prin, font8)));
        //                cell12.Border = 0;
        //                table.AddCell(cell12);

        //                if (iii == 0)
        //                {
        //                    string barc = Session["barcod"].ToString();
        //                    PdfPCell baarc = new PdfPCell(new Phrase(new Chunk()));
        //                    baarc.Border = 0;
        //                    baarc.Colspan = 2;
        //                    baarc.Rowspan = 2;
        //                    baarc.FixedHeight = 25;
        //                    baarc.HorizontalAlignment = 1;
        //                    System.Drawing.Image myimage = Code128Rendering.MakeBarcodeImage(barc.ToString(), 2, true);
        //                    iTextSharp.text.Image bcode = iTextSharp.text.Image.GetInstance(myimage, BaseColor.YELLOW);
        //                    baarc.Image = bcode;
        //                    table.AddCell(baarc);
        //                }
        //                else
        //                {
        //                    PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                    cell13.Border = 0;
        //                    cell13.Colspan = 2;
        //                    table.AddCell(cell13);
        //                }


        //                #endregion
        //            }
        //            else if (jj == 4)
        //            {
        //                #region Check out Details
        //                string cod, cot;
        //                string dtt = objcls.yearmonthdate(txtExtendDate.Text);
        //                DateTime str22 = DateTime.Parse(dtt);
        //                string str222 = str22.ToString("dd-MM-yyyy");
        //                cod = str222.ToString();
        //                cot = txtExtendTime.Text.ToString();
        //                prin = cod + " , " + cot;

        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell10.Border = 0;
        //                cell10.Colspan = 2;
        //                table.AddCell(cell10);


        //                PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk(prin, font8)));
        //                cell12.Border = 0;
        //                table.AddCell(cell12);

        //                if (iii == 0)
        //                {

        //                }
        //                else
        //                {

        //                    PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                    cell13.Border = 0;
        //                    cell13.Colspan = 2;
        //                    table.AddCell(cell13);
        //                }


        //                #endregion
        //            }
        //            else if (jj == 5)
        //            {
        //                #region Room Rent
        //                string prin4 = txtRentAlloc.Text;
        //                string two = "";

        //                string customer = Session["customer"].ToString();


        //                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
        //                {

        //                    if (txtNoofDays.Text == "1")
        //                    {
        //                        two = txtRentAlloc.Text.ToString();
        //                    }
        //                    else
        //                    {


        //                        two = txtNoofDays.Text.ToString() + " @ " + rent1 + " =" + txtRentAlloc.Text.ToString();

        //                    }

        //                }

        //                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
        //                {




        //                    if (customer == "Donor Free Allocation")
        //                    {

        //                        if (txtNoofDays.Text == "1")
        //                        {


        //                            two = "Free Pass";
        //                        }
        //                        else
        //                        {
        //                            int n = Convert.ToInt32(txtNoofDays.Text);
        //                            n = n - 1;

        //                            two = "1 Free Stay and " + n.ToString() + " @ " + rent1.ToString() + " =" + txtRentAlloc.Text.ToString();

        //                        }

        //                    }

        //                    else if (customer == "Donor Paid Allocation")
        //                    {
        //                        two = txtNoofDays.Text.ToString() + " @ " + rent1.ToString() + " =" + txtRentAlloc.Text.ToString();

        //                    }
        //                    else if (customer == " Donor multiple pass")
        //                    {
        //                        int free = Convert.ToInt32(Session["free"]);

        //                        int n1 = Convert.ToInt32(txtNoofDays.Text);

        //                        n1 = n1 - free;

        //                        two = free + " Free stay and " + n1.ToString() + " @ " + rent1.ToString() + "=" + txtRentAlloc.Text.ToString();


        //                    }
        //                    else if (txtNoofDays.Text == "1")
        //                    {
        //                        two = txtRentAlloc.Text;

        //                    }
        //                    else
        //                    {
        //                        two = txtNoofDays.Text + " @ " + rent1.ToString() + "=" + txtRentAlloc.Text;

        //                    }





        //                }



        //                PdfPCell cell102 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell102.Border = 0;
        //                cell102.Colspan = 5;
        //                table.AddCell(cell102);

        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk(two.ToString(), font8)));
        //                cell10.Border = 0;
        //                cell10.Colspan = 4;
        //                cell10.HorizontalAlignment = 2;
        //                table.AddCell(cell10);

        //                PdfPCell cell14 = new PdfPCell(new Phrase(new Chunk(prin4, font8B)));
        //                cell14.Border = 0;
        //                cell14.HorizontalAlignment = 1;
        //                cell14.VerticalAlignment = 2;
        //                table.AddCell(cell14);
        //                #endregion
        //            }
        //            else if (jj == 6)
        //            {
        //                #region Deposit
        //                string prin4 = txtDepositAlloc.Text;

        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell10.Border = 0;
        //                cell10.Colspan = 4;
        //                table.AddCell(cell10);


        //                PdfPCell cell14 = new PdfPCell(new Phrase(new Chunk(prin4, font8B)));
        //                cell14.Border = 0;
        //                cell14.HorizontalAlignment = 1;
        //                cell14.VerticalAlignment = 2;
        //                table.AddCell(cell14);
        //                #endregion
        //            }
        //            else if (jj == 7)
        //            {
        //                #region No if inmates


        //                PdfPCell cell101 = new PdfPCell(new Phrase(new Chunk("", font8)));
        //                cell101.Border = 0;
        //                cell101.Colspan = 1;
        //                table.AddCell(cell101);

        //                PdfPCell cell10111 = new PdfPCell(new Phrase(new Chunk(txtDepositAlloc.Text.ToString(), font8)));
        //                cell10111.Border = 0;
        //                cell10111.Colspan = 1;
        //                cell10111.HorizontalAlignment = 1;
        //                table.AddCell(cell10111);


        //                PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk("No of Inmates :" + txtinmno.Text, font8)));
        //                cell10.Border = 0;
        //                cell10.HorizontalAlignment = 1;
        //                cell10.Colspan = 1;
        //                table.AddCell(cell10);

        //                PdfPCell cell101n = new PdfPCell(new Phrase(new Chunk("Total", font8)));
        //                cell101n.Border = 0;
        //                cell101n.HorizontalAlignment = 2;
        //                table.AddCell(cell101n);

        //                PdfPCell cell102n = new PdfPCell(new Phrase(new Chunk(txtAdvAmount.Text.ToString(), font8B)));
        //                cell102n.Border = 0;
        //                cell102n.HorizontalAlignment = 1;
        //                table.AddCell(cell102n);

        //                #endregion
        //            }
        //            else if (jj == 8)
        //            {
        //                string one = "";

        //                if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
        //                {
        //                    one = "Alt Room" + " on Rec no " + txtAdRecieptNo.Text + " on Building " + txtRoomNo.Text + "-" + cmbBuilding.SelectedItem.ToString();

        //                }
        //                else
        //                {
        //                    one = "Overstay" + " on Rec no " + txtAdRecieptNo.Text.ToString();

        //                }

        //                PdfPCell cell101 = new PdfPCell(new Phrase(new Chunk(one.ToString(), font8)));
        //                cell101.Border = 0;
        //                cell101.HorizontalAlignment = 1;
        //                cell101.Colspan = 5;
        //                table.AddCell(cell101);


        //            }


        //        }

        //        for (int ii = 0; ii <= 20; ii++)
        //        {
        //            string pp;
        //            if (ii == 20)
        //            {
        //                pp = "";
        //            }
        //            else
        //            {
        //                pp = "";
        //            }
        //            PdfPCell cell = new PdfPCell(new Phrase(pp));
        //            cell.Border = 0;
        //            cell.Colspan = 5;
        //            cell.HorizontalAlignment = 1;
        //            table.AddCell(cell);
        //        }

        //        for (int ii = 0; ii <= 85; ii++)
        //        {
        //            PdfPCell cell = new PdfPCell(new Phrase(""));
        //            cell.Border = 0;
        //            cell.Colspan = 5;
        //            cell.HorizontalAlignment = 1;
        //            table.AddCell(cell);
        //        }
        //    }
        //    #endregion

        //    doc.Add(table);
        //    doc.Close();
        //    AllocationRecieptIncrement();
        //    Random r = new Random();
        //    string PopUpWindowPage = "print.aspx?reportname=" + recc + "&Title=AdvancedReceipt";
        //    string Script = "";
        //    Script += "<script id='PopupWindow'>";
        //    Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
        //    Script += "confirmWin.Setfocus()</script>";
        //    if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
        //        Page.RegisterClientScriptBlock("PopupWindow", Script);
        //    #endregion
        //}

    }
    # endregion

    # region Extend Time /Date Change
    public void ExtendTImeChange()
    
    {
       
        double rentchkold = 0;
        double depochkold = 0, noinmateold = 0, noinmate = 0, inmdepoold = 0;

        double inmchkold = 0, inmchk = 0, inmdepo = 0;
        double oldinm = 0, inmrate = 0, inmdepochk = 0, inmdepochkold = 0,  newinmrate = 0;

        double newinmdepo = 0;
        double oldimtot = 0, newimtot = 0, inmatecount = 0, xtrainm = 0, oldinmdepotot = 0, inmdepnewtot = 0;

        string dd =objcls.yearmonthdate(txtVacatingDate.Text.ToString());
        DateTime date1 = DateTime.Parse(dd);
        string dt2 = date1.ToString("dd-MM-yyyy").ToString();
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        string date2 = date1.ToString("MM-dd-yyyy").ToString();
        DateTime dt = DateTime.Parse(txtVecatingTime.Text);
        string time1 = dt.ToString("HH:mm:ss").ToString();
        string checkindate = dt2 + " " + time1;
        int rent1 = 0;
        int deposit1 = 0;
        int totalrent = 0;
        int paidrent = Convert.ToInt32(Session["roomrent"]);
        int curseasonid = Convert.ToInt32(Session["currentseasonid"]);
        int slnoo = Convert.ToInt32(Session["allocid"]);
        int malyear = Convert.ToInt32(Session["malyear"]);
        int malyearid = Convert.ToInt32(Session["malyyearid"]);
        int donorpassno = 0;

        try
        {
            donorpassno = Convert.ToInt32(Session["passid"]);

        }
        catch { }


        try
        {
            donorid = Convert.ToInt32(Session["donorid"]);
        }
        catch { }

        txtNoofDays.Text = totalday.ToString();

        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }




        # region Calculate Grace Period
        int flag0 = 0, data = 0;
        seasonid = Convert.ToInt32(Session["season_subid"]);
        OdbcCommand cmdselectpolicy = new OdbcCommand();
        cmdselectpolicy.CommandType = CommandType.StoredProcedure;
        cmdselectpolicy.Parameters.AddWithValue("tblname", "t_policy_allocation ta ,t_policy_allocation_seasons tps");
        cmdselectpolicy.Parameters.AddWithValue("attribute", "season_sub_id,noofunits");
        cmdselectpolicy.Parameters.AddWithValue("conditionv", " reqtype='Common'and ta.rowstatus<>'2' and ((curdate()>=fromdate and  curdate()<=todate) or (curdate()>=fromdate and todate='0000-00-00'))and waitingcriteria='Hours' and (ta.alloc_policy_id=tps.alloc_policy_id )and tps.season_sub_id=" + seasonid + "");
        DataTable dtt391 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdselectpolicy);


        if (dtt391.Rows.Count > 0)
        {
            for (int i = 0; i < dtt391.Rows.Count; i++)
            {

                data = 1;
                int seaid = Convert.ToInt32(dtt391.Rows[i]["season_sub_id"]);
                if (seaid == seasonid)
                {
                    graceperiod = int.Parse(dtt391.Rows[i]["noofunits"].ToString());
                    flag0 = 1;
                    break;
                }

                if (flag0 == 1)
                    break;

            }

        }
        if (data == 0)
        {
            messagedisplay("No policy Set for Grace Period ", "warn22");
            return;

        }

        if (flag0 == 0)
        {
            messagedisplay("No policy Set for Grace Period ", "warn22");

            return;
        }
        # endregion

        string ad = txtPropCheckOut.Text;
        string vacatx = ad.Replace('/', '-');
        string ab = txtAllocatedDate.Text + " " + txtAllocatedTime.Text;
        string aldatex1 = ab.Replace('/', '-');
        //string vacatx = txtPropCheckOut.Text;
       //string aldatex1 = txtAllocatedDate.Text + " " + txtAllocatedTime.Text;
        String SSq = "SELECT TIMEDIFF(STR_TO_DATE('" + aldatex1 + "','%d-%m-%Y %l:%i %p'), STR_TO_DATE('" + vacatx + "','%d-%m-%Y %l:%i %p'))";
        DataTable DTSSq = objcls.DtTbl(SSq);
        TimeSpan totperiod = TimeSpan.Parse(DTSSq.Rows[0][0].ToString());

        int tottime = 0;
        tottime = Convert.ToInt32(totperiod.TotalHours);
        if ((totperiod.Minutes > 0) && (totperiod.Minutes < 30))
        {
            tottime++;
        }

        ////////////////old rent************************************
      
        OdbcCommand cmdRRx = new OdbcCommand();
        cmdRRx.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
        cmdRRx.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
        cmdRRx.Parameters.AddWithValue("conditionv", " ('" + tottime + "' > m_rent.start_duration)  AND ('" + tottime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category AND m_room.room_id = m_inmate.room_id AND ( '" + tottime + "' > m_inmate.start_duration)  AND ('" + tottime + "' <= m_inmate.end_duration ) ");

        DataTable dtRRx = new DataTable();
        dtRRx = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRRx);
        if (dtRRx.Rows.Count > 0)
        {
            oldrent = Convert.ToDouble(dtRRx.Rows[0]["rent"].ToString());
            inmchkold = Convert.ToDouble(dtRRx.Rows[0]["rate"].ToString());
            //noinmateold = Convert.ToDouble(dtRRx.Rows[0]["noofinmates"].ToString());
            inmdepoold = Convert.ToDouble(dtRRx.Rows[0]["deposit"].ToString());

        }


        int rentextra = 0;
        string cus = "";
        #region alternate room
        if (cmbCheckOutMehtod.SelectedItem.ToString() == "Alternate Room")
        {
            string customer = Session["customer"].ToString();
            int roomid = Convert.ToInt32(cmbaltroom.SelectedValue);
            cus = customer.ToString();

            string at = txtPropCheckOut.Text;
            string checkoutx = at.Replace('/', '-');
            string[] checkoutSplit = checkoutx.Split(' ');


            string checkinx = txtAllocatedTime.Text;

            string[] checkinSplit = checkinx.Split(' ');


            DateTime tim1 = DateTime.Parse(objcls.yearmonthdate(checkoutSplit[0].ToString()) + " " + checkoutSplit[1].ToString() + " " + checkoutSplit[2].ToString());
            DateTime tim2 = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text) + " " + checkinSplit[0].ToString() + " " + checkinSplit[1].ToString());

            string f4 = tim1.ToString();
            string f5 = tim2.ToString();

            TimeSpan TimeDifference = tim1 - tim2;
            td = Convert.ToInt32(TimeDifference.TotalHours);

            string yindate = objcls.yearmonthdate(txtAllocatedDate.Text);
           

            string youtdate = objcls.yearmonthdate(checkoutSplit[0].ToString());
            

            DateTime date1x = DateTime.Parse(yindate);
            DateTime date2x = DateTime.Parse(youtdate);

            TimeSpan datedifferencex = date2x - date1x;
            ddx = datedifferencex.Days;
            tc = ddx;
            ddx = 24 * ddx;
            n = ddx + td;


            DateTime dateCheckin = DateTime.Parse(objcls.yearmonthdate(txtAllocatedDate.Text.ToString()) + " " + txtAllocatedTime.Text);
            string[] checkoutSplitx = txtPropCheckOut.Text.Split(' ');
            DateTime datecheckout = DateTime.Parse(objcls.yearmonthdate(checkoutSplitx[0].ToString()) + " " + checkoutSplitx[1].ToString() + " " + checkoutSplitx[2].ToString());
            int ddx1, tc1, n1, td1;
            TimeSpan datediffx = datecheckout - dateCheckin;
            td1 = datediffx.Hours;
            ddx1 = datediffx.Days;
            tc1 = ddx1;
            ddx1 = 24 * ddx1;
            n1 = ddx1 + td1;


            if (customer == "Donor Paid Allocation")
            {

                OdbcCommand cmdR = new OdbcCommand();
                cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security");
                cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbaltbulilding.SelectedValue + " and room.room_id='" + cmbaltroom.SelectedValue + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                DataTable dtR = new DataTable();
                dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);

                if (dtR.Rows.Count > 0)
                {

                    rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                    deposit1 = Convert.ToInt32(dtR.Rows[0]["security"]);

                    OdbcCommand cm444x = new OdbcCommand("select rc.rent from m_room mr,m_sub_room_category rc where build_id=" + cmbBuilding.SelectedValue + " and  roomno=" + txtRoomNo.Text + "  and rc.room_cat_id=mr.room_cat_id", conn);

                    int rentaddx = Convert.ToInt32(cm444x.ExecuteScalar());
                    if (rent1 > rentaddx)
                    {

                        rentextra = rent1 - rentaddx;
                    }
                    else
                    {
                        rentextra = 0;
                    }

                    totalday = 1;
                    txtNoofDays.Text = totalday.ToString();




                    // deposit1 = rent1;
                    Session["rent1"] = rent1;
                    Session["deposit1"] = deposit1;


                }


            }

            if (customer == "Donor Free Allocation")
            {

                OdbcCommand cm4 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cm4.CommandType = CommandType.StoredProcedure;
                cm4.Parameters.AddWithValue("tblname", "t_donorpass,m_room");
                cm4.Parameters.AddWithValue("attribute", " passtype,t_donorpass.room_id");
                cm4.Parameters.AddWithValue("conditionv", "t_donorpass.donor_id=" + donorid + " and season_id=" + curseasonid + " and mal_year_id=" + malyearid + "  and m_room.room_id=t_donorpass.room_id and t_donorpass.pass_id=" + donorpassno + " ");
                OdbcDataReader om5 = cm4.ExecuteReader();
                if (om5.Read())
                {
                    if (Convert.ToInt32(om5["passtype"]) == 0)
                    {

                        if ((roomid != Convert.ToInt32(om5["room_id"])))
                        {
                            OdbcCommand cm444 = new OdbcCommand("select rc.rent from m_room mr,m_sub_room_category rc where room_id=" + Convert.ToInt32(om5["room_id"]) + "  and rc.room_cat_id=mr.room_cat_id", conn);

                            int rentadd = Convert.ToInt32(cm444.ExecuteScalar());
                            if (rent1 > rentadd)
                            {

                                rentextra = rent1 - rentadd;
                            }
                            else
                                rentextra = 0;

                        }

                        if (totalday >= 1)
                        {
                            totalday = totalday - 1;
                        }
                    }

                }

            }


            else if (customer == "Donor multiple pass")
            { //check for number of free pass
                int count1 = 0;


                OdbcCommand cz = new OdbcCommand("select count(*) as count from t_donorpass td,t_roomalloc_multiplepass ta  where ta.alloc_id=" + slnoo + " and ta.pass_id=td.pass_id and td.passtype='0'", conn);
                OdbcDataReader oz = cz.ExecuteReader();
                if (oz.Read())
                {
                    count1 = Convert.ToInt32(oz["count"]);

                    Session["free"] = count1;
                    if (totalday >= 1)
                    {
                        totalday = totalday - count1;
                    }
                    if (totalday < 0)
                    {
                        totalday = 0;

                    }

                }
                OdbcCommand cm4 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cm4.CommandType = CommandType.StoredProcedure;
                cm4.Parameters.AddWithValue("tblname", "t_donorpass,m_room");
                cm4.Parameters.AddWithValue("attribute", " passtype,t_donorpass.room_id");
                cm4.Parameters.AddWithValue("conditionv", "t_donorpass.donor_id=" + donorid + " and season_id=" + curseasonid + " and mal_year_id=" + malyearid + "  and m_room.room_id=t_donorpass.room_id and m_room.room_id=t_donorpass.room_id  ");
                OdbcDataReader om5 = cm4.ExecuteReader();
                if (om5.Read())
                {
                    if (roomid != Convert.ToInt32(om5["room_id"]))
                    {
                        OdbcCommand cm444 = new OdbcCommand("select rc.rent from m_room mr,m_sub_room_category rc where room_id=" + Convert.ToInt32(om5["room_id"]) + "  and rc.room_cat_id=mr.room_cat_id", conn);

                        int rentadd = Convert.ToInt32(cm444.ExecuteScalar());

                        if (rent1 > rentadd)
                        {

                            rentextra = rent1 - rentadd;
                        }
                        else
                            rentextra = 0;

                    }

                }

                rentextra = rentextra * count1;

            }

            totalrent = totalday * rent1;

            if (customer == "Donor Free Allocation")
            {

                totalrent = totalrent + rentextra;
            }

            else if (customer == "Donor multiple pass")
            {
                totalrent = totalrent + rentextra;
                
            }

            if (totalrent >= paidrent && paidrent != 0)
            {
                totalrent = totalrent - paidrent;


            }
            else
            {
                totalrent = 0;

            }



            if (customer == "General Allocation")
            {

                OdbcCommand cmdR = new OdbcCommand();
                cmdR.Parameters.AddWithValue("tblname", "m_room as room,m_sub_room_category as cat");
                cmdR.Parameters.AddWithValue("attribute", "cat.rent,cat.security,cat.rent,cat.rent_1");
                cmdR.Parameters.AddWithValue("conditionv", "room.build_id=" + cmbaltbulilding.SelectedValue + " and room.room_id='" + cmbaltroom.SelectedValue + "' and room.rowstatus<>" + 2 + " and room.room_cat_id=cat.room_cat_id");
                DataTable dtR = new DataTable();
                dtR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR);

                if (n1 <= 12)
                {



                    if (dtR.Rows.Count > 0)
                    {

                        rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                        deposit1 = Convert.ToInt32(dtR.Rows[0]["rent"]);
                        deposit1 = rent1;
                        Session["rent1"] = rent1;
                        Session["deposit1"] = deposit1;

                        lblrent.Visible = true;

                    }


                }
                else if (n1 > 12)
                {

                    if (dtR.Rows.Count > 0)
                    {

                        rent1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]);

                        deposit1 = Convert.ToInt32(dtR.Rows[0]["rent_1"]);
                        deposit1 = rent1;
                        Session["rent1"] = rent1;
                        Session["deposit1"] = deposit1;


                    }


                }

                if (td > 16)
                {
                    rent1 = Convert.ToInt32(dtR.Rows[0]["rent"]);

                    deposit1 = Convert.ToInt32(dtR.Rows[0]["rent"]);
                    deposit1 = rent1;
                    Session["rent1"] = rent1;
                    Session["deposit1"] = deposit1;
                    deposit1 = deposit1 * totalday;
                    lblrent.Visible = true;


                }



            }

            //////////////////////////////////***************new alternate***************//////////////////////////////
            string cintime = tim2.ToString("dd-MM-yyyy hh:mm:ss tt");
            string couttime = tim1.ToString("dd-MM-yyyy hh:mm:ss tt");
           
            string ae = txtPropCheckOut.Text;
            string vacat = ae.Replace('/', '-');
            string az = txtAllocatedDate.Text + " " + txtAllocatedTime.Text;
            string aldate1 = az.Replace('/', '-');

           
            String SS = "SELECT TIMEDIFF(STR_TO_DATE('" + aldate1 + "','%d-%m-%Y %l:%i %p'), STR_TO_DATE('" + vacat + "','%d-%m-%Y %l:%i %p')),REPLACE('" + checkoutSplit[0].ToString() + "','/','-') as 'Date'";
            DataTable DTSS = objcls.DtTbl(SS);
            TimeSpan actperiod = TimeSpan.Parse(DTSS.Rows[0][0].ToString());

            
            int overtime = 0;
            overtime = Convert.ToInt32(actperiod.TotalHours);
            if ((actperiod.Minutes > 0) && (actperiod.Minutes < 30))
            {
                overtime++;
            }

          
            txtExtendDate.Text = DTSS.Rows[0][1].ToString();
            txtExtendTime.Text = checkoutSplit[1].ToString() + " " + checkoutSplit[2].ToString();
            double depochk = 0;
           
            if (Session["customer"].ToString() == "Clubbing")
            {
                string clubold = @"SELECT roomrent FROM t_roomallocation WHERE alloc_id ='" + Session["allocid"].ToString() + "'";
                DataTable dt_cold = objcls.DtTbl(clubold);
                if (dt_cold.Rows.Count > 0)
                {
                    rentchkold = Convert.ToDouble(dt_cold.Rows[0][0].ToString());
                }


                string cluboldinm = @"   SELECT inmatecharge,inmatedeposit FROM t_inmateallocation WHERE alloc_id ='" + Session["allocid"].ToString() + "'";
                DataTable dt_coldinm = objcls.DtTbl(cluboldinm);

                if (dt_coldinm.Rows.Count > 0)
                {
                    oldinm = Convert.ToDouble(dt_coldinm.Rows[0][0].ToString());
                }

                    

                    ///////////

                int allo_id = 0;
                 allo_id = Convert.ToInt32(Session["allocid"].ToString());

                    while (allo_id != 0)
                    {
                        int reallocid = 0;
                        OdbcCommand cmdselect = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                        cmdselect.CommandType = CommandType.StoredProcedure;
                        cmdselect.Parameters.AddWithValue("tblname", "t_roomallocation");
                        cmdselect.Parameters.AddWithValue("attribute", "*");
                        cmdselect.Parameters.AddWithValue("conditionv", "alloc_id=" + allo_id + "");


                        OdbcDataReader or = cmdselect.ExecuteReader();
                        // adding previous paid rent with the next allocation rent in alternate allocation vacating

                        if (or.Read())
                        {

                            if ((Convert.IsDBNull(or["realloc_from"]) == false))
                            {

                                reallocid = Convert.ToInt32(or["realloc_from"]);



                                OdbcCommand cmdrealloc = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                                cmdrealloc.CommandType = CommandType.StoredProcedure;
                                cmdrealloc.Parameters.AddWithValue("tblname", "t_roomallocation ");
                                cmdrealloc.Parameters.AddWithValue("attribute", "*");
                                cmdrealloc.Parameters.AddWithValue("conditionv", "alloc_id=" + reallocid + "");
                                OdbcDataReader orreead1 = cmdrealloc.ExecuteReader();
                                if (orreead1.Read())
                                {
                                    int rentrelloc = Convert.ToInt32(orreead1["roomrent"]);
                                    rentchkold = rentchkold + rentrelloc;

                                }


                                OdbcCommand cmdreallocxx = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                                cmdreallocxx.CommandType = CommandType.StoredProcedure;
                                cmdreallocxx.Parameters.AddWithValue("tblname", "t_inmateallocation tr");
                                cmdreallocxx.Parameters.AddWithValue("attribute", "inmatecharge,inmatedeposit");
                                cmdreallocxx.Parameters.AddWithValue("conditionv", "alloc_id=" + reallocid + "");
                                OdbcDataReader orreead1xx = cmdreallocxx.ExecuteReader();
                                if (orreead1xx.Read())
                                {
                                    int inmrealloc = Convert.ToInt32(orreead1xx["inmatecharge"]);
                                    //    roomrent = roomrent + rentrelloc;
                                    oldinm = oldinm + inmrealloc;

                                }
                                allo_id = reallocid;

                            }
                            else
                            {
                                allo_id = 0;
                            }




                        }
                        else
                        {
                            allo_id = 0;
                        }



                    }

             

                double ncrrent = 0, ncdepo = 0, ncinmrate = 0, ncinmdepo = 0,slot=0,inmr=0;
                xtrainm = 0;
               
                string stvx = @" SELECT checkindate,checkoutdate,alloc_type,TIMEDIFF(checkoutdate,checkindate) FROM t_clubdetails WHERE alloc_id ='" + Session["allocid"].ToString() + "'";
                DataTable dt_stvx = objcls.DtTbl(stvx);
                if (dt_stvx.Rows.Count > 0)
                {
                    for (int i = 0; i < dt_stvx.Rows.Count; i++)
                    {
                        
                        TimeSpan actperiod1x = TimeSpan.Parse(dt_stvx.Rows[i][3].ToString());
                        int rtime = 0;
                        rtime = Convert.ToInt32(actperiod1x.TotalHours);
                        if ((actperiod1x.Minutes > 0) && (actperiod1x.Minutes < 30))
                        {
                            rtime++;
                        }


                        slot = slot + Convert.ToDouble(rtime);

                        OdbcCommand cmdRR = new OdbcCommand();
                        cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                        cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
                        cmdRR.Parameters.AddWithValue("conditionv", " ('" + rtime + "' > m_rent.start_duration)  AND ('" + rtime + "' <= m_rent.end_duration ) AND m_room.room_id = '" + cmbaltroom.SelectedValue + "' AND  m_room.build_id = '" + cmbaltbulilding.SelectedValue + "'  AND  room_cat_id = m_rent.room_category  AND m_room.room_id = m_inmate.room_id AND ( '" + rtime + "' > m_inmate.start_duration)  AND ('" + rtime + "' <= m_inmate.end_duration ) ");

                        DataTable dtRR = new DataTable();
                        dtRR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRR);
                        if (dtRR.Rows.Count > 0)
                        {

                            rentchk = Convert.ToDouble(dtRR.Rows[0]["rent"].ToString());

                            depochk = Convert.ToDouble(dtRR.Rows[0]["security_deposit"].ToString());
                            inmchk = Convert.ToDouble(dtRR.Rows[0]["rate"].ToString());

                         
                            noinmate = Convert.ToDouble(dtRR.Rows[0]["noofinmates"].ToString());
                            inmdepo = Convert.ToDouble(dtRR.Rows[0]["deposit"].ToString());
                            if (dt_stvx.Rows[i][2].ToString() == "Donor Free Allocation")
                            {
                                rentchk = 0;
                                inmchk = 0;
                                inmdepo = 00;
                            }

                            inmr = inmr + inmchk;
                            ncrrent = ncrrent + rentchk;
                            ncdepo = ncdepo + depochk;
                            if (Convert.ToDouble(txtinmno.Text) > noinmate)
                            {
                                xtrainm = (Convert.ToDouble(txtinmno.Text) - noinmate);
                            }

                            ncinmrate = ncinmrate + (inmchk * (xtrainm));
                            ncinmdepo = ncinmdepo + (inmdepo * (xtrainm));

                            Session["chk"] = "ok";

                        }
                        else
                        {
                            Session["chk"] = "stop";
                            this.ScriptManager1.SetFocus(txtClientid);
                            messagedisplay("Pilicy not set for period", "warn6");
                            this.ScriptManager1.SetFocus(btnOk);

                        }





                    }

                    rentchk = ncrrent;
                    depochk = ncdepo;
                    inmrate = ncinmrate;
                    inmdepochk = ncinmdepo;

                    Session["inmrate"] = inmr;
                    Session["count"] = xtrainm;
                    Session["time"] = slot;
                    Session["inmate"] = "ok";

                }


            }
            else
            {
                OdbcCommand cmdR1R = new OdbcCommand();
                cmdR1R.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                cmdR1R.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
                cmdR1R.Parameters.AddWithValue("conditionv", " ('" + overtime + "' > m_rent.start_duration)  AND ('" + overtime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category AND m_room.room_id = m_inmate.room_id AND ( '" + overtime + "' > m_inmate.start_duration)  AND ('" + overtime + "' <= m_inmate.end_duration ) ");

                DataTable dtR1R = new DataTable();
                dtR1R = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdR1R);
                if (dtR1R.Rows.Count > 0)
                {
                    rentchkold = Convert.ToDouble(dtR1R.Rows[0]["rent"].ToString());
                    depochkold = Convert.ToDouble(dtR1R.Rows[0]["security_deposit"].ToString());
                    inmchkold = Convert.ToDouble(dtR1R.Rows[0]["rate"].ToString());
                    noinmateold = Convert.ToDouble(dtR1R.Rows[0]["noofinmates"].ToString());
                    inmdepoold = Convert.ToDouble(dtR1R.Rows[0]["deposit"].ToString());
                    Session["chk"] = "ok";
                }
                else
                {
                    Session["chk"] = "stop";
                    this.ScriptManager1.SetFocus(txtClientid);
                    messagedisplay("Policy not set for period", "warn6");
                    this.ScriptManager1.SetFocus(btnOk);

                }

                OdbcCommand cmdRR = new OdbcCommand();
                cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
                cmdRR.Parameters.AddWithValue("conditionv", " ('" + overtime + "' > m_rent.start_duration)  AND ('" + overtime + "' <= m_rent.end_duration ) AND m_room.room_id = '" + cmbaltroom.SelectedValue + "' AND  m_room.build_id = '" + cmbaltbulilding.SelectedValue + "'  AND  room_cat_id = m_rent.room_category  AND m_room.room_id = m_inmate.room_id AND ( '" + overtime + "' > m_inmate.start_duration)  AND ('" + overtime + "' <= m_inmate.end_duration ) ");

                DataTable dtRR = new DataTable();
                dtRR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRR);
                if (dtRR.Rows.Count > 0)
                {
                    rentchk = Convert.ToDouble(dtRR.Rows[0]["rent"].ToString());
                    depochk = Convert.ToDouble(dtRR.Rows[0]["security_deposit"].ToString());
                    inmchk = Convert.ToDouble(dtRR.Rows[0]["rate"].ToString());
                    noinmate = Convert.ToDouble(dtRR.Rows[0]["noofinmates"].ToString());
                    inmdepo = Convert.ToDouble(dtRR.Rows[0]["deposit"].ToString());
                    Session["chk"] = "ok";

                }
                else
                {
                    Session["chk"] = "stop";
                    this.ScriptManager1.SetFocus(txtClientid);
                    messagedisplay("Policy not set for period", "warn6");
                    this.ScriptManager1.SetFocus(btnOk);

                }



                string stdv = @"SELECT extra_inmates FROM t_inmateallocation WHERE alloc_id='" + Session["allocid"].ToString() + "'";
                DataTable DTSS_stdv = objcls.DtTbl(stdv);

                if (DTSS_stdv.Rows.Count > 0)
                {
                    inmatecount = noinmateold + Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());

                    oldinm = inmchkold * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                    inmdepochkold = inmdepoold * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());

                    xtrainm = inmatecount - noinmate;
                    if (xtrainm > 0)
                    {
                        inmrate = inmchk * xtrainm;
                        inmdepochk = inmdepo * xtrainm;
                    }

                    Session["inmrate"] = inmchk;
                    Session["count"] = xtrainm;
                    Session["time"] = overtime;
                    Session["inmate"] = "ok";

                }
                else
                {
                    Session["inmate"] = "not";
                }

            }

            ///////////////////////////////////////////////

            if (Session["chk"].ToString() == "ok")
            {
                if (Session["customer"].ToString() == "Donor Free Allocation")
                {
                    oldrent = Convert.ToDouble(Session["orent"].ToString());
                    olddepo = Convert.ToDouble(Session["deposit"].ToString());
                    if (olddepo > depochk)
                    {
                        depochk = olddepo;
                    }
                    if (rentchkold > rentchk)
                    {
                        rentchk = rentchkold;
                    }

                    inmrate = 0;
                    oldinm = 0;
                    inmdepochk = 0;
                    inmdepochkold = 0;
                }





                double rate = Convert.ToDouble(Session["advance"].ToString()) - Convert.ToDouble(Session["deposit"].ToString());
               
                double newrent = rentchk - rentchkold;
                txtRentAlloc.Text = newrent.ToString();
                txtDepositAlloc.Text = depochk.ToString();
                if (xtrainm > 0)
                {
                    newinmrate = inmrate - oldinm;
                }
                newinmdepo = inmdepochk;// -inmdepochkold;
                txtinmdeposit.Text = Convert.ToString(newinmdepo);
                txtinmcharge.Text = Convert.ToString(newinmrate);
                //txtinmdeposit.Text = Convert.ToString(newinmdepo);
                txtAdvAmount.Text = (newrent + depochk).ToString();

                //when inmate rate < o..............
                if (newinmrate < 0)
                {
                    lblrent.Visible = false;
                    txtRentAlloc.Text = "0";
                    txtDepositAlloc.Text = "0";
                    txtAdvAmount.Text = "0";
                    messagedisplay("Inmate charge is less.Select another room ", "warn3");
                    return;
                }

               
                txtNoofDays.Text = overtime.ToString();

                double newdue = (newrent + depochk) - Convert.ToDouble(Session["deposit"].ToString());
                newdue = (newdue + newinmrate + newinmdepo) - inmdepochkold;
                Session["newdue"] = newdue;
                if (newdue >= 0)
                {
                    lblrent.Visible = true;
                    lblrent.Text = "Due From Swami Rs." + newdue;
                    Session["due"] = newdue.ToString();
                }
                else
                {
                    txtAdvAmount.Text = Convert.ToString(-newdue);
                    lblrent.Visible = true;
                    lblrent.Text = "Due to Swami Rs." + -newdue;
                    //Session["due"] = "-"+newdue.ToString();
                    messagedisplay("Rate is less.Select another room ", "warn3");
                    return;
                }
            }
            else if (Session["chk"].ToString() == "stop")
            {
                lblrent.Visible = false;
                txtRentAlloc.Text = "0";
                txtDepositAlloc.Text = "0";
                txtAdvAmount.Text = "0";
            }

            //////////////////////////////////***************new alternate end***************//////////////////////////////







        } 
        #endregion

        #region overstay
        else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
        {
            txtinmno.Text = Session["inm"].ToString();

            OdbcCommand cm44 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cm44.CommandType = CommandType.StoredProcedure;
            cm44.Parameters.AddWithValue("tblname", "m_room  mr,m_sub_room_category rc");
            cm44.Parameters.AddWithValue("attribute", "rc.rent,security,rc.rent_1");
            cm44.Parameters.AddWithValue("conditionv", " roomno=" + int.Parse(txtRoomNo.Text) + " and build_id=" + Convert.ToInt32(cmbBuilding.SelectedValue) + "  and rc.room_cat_id=mr.room_cat_id");
            OdbcDataReader orr = cm44.ExecuteReader();
            if (orr.Read())
            {

                rent1 = Convert.ToInt32(orr["rent"]);
                Session["rent1"] = rent1;
                deposit1 = Convert.ToInt32(orr["security"]);
                Session["deposit1"] = deposit1;
            }
            totalrent = rent1 * totalday;
        } 
        #endregion
        #region extension
        else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
        {


            //////////////////////////////////***************new Extended Stay***************//////////////////////////////
            string aq= txtPropCheckOut.Text;
            string strxz1  = aq.Replace('/', '-');
            string ssvb = @"SELECT CASE WHEN  DATE_ADD(STR_TO_DATE('" + strxz1 + "','%d-%m-%Y %l:%i %p'),INTERVAL '" + graceperiod + "' HOUR ) <=  NOW() THEN 'OK' ELSE 'Not' END AS 'CHK'";
            DataTable DTSS1x = objcls.DtTbl(ssvb);

            if (DTSS1x.Rows[0][0].ToString() == "OK")
            {
                ViewState["auction"] = "checkoutdate";
                messagedisplay("Vacate time exceeds checkout time with grace period. Extended stay not possible not possible", "ll");

                lblrent.Visible = false;
                txtRentAlloc.Text = "0";
                txtDepositAlloc.Text = "0";
                txtAdvAmount.Text = "0";
                txtNoofDays.Text = "0";

                this.ScriptManager1.SetFocus(btnOk);
                return;
            }


            OdbcCommand cmdBP1 = new OdbcCommand();
            cmdBP1.Parameters.AddWithValue("tblname", "t_policy_allocation");
            cmdBP1.Parameters.AddWithValue("attribute", "defaulttime,max_allocdays");


            DataTable dt_club = new DataTable();

            if (Session["customer"].ToString() == "Clubbing")
            {

                string club = @"SELECT alloc_type,TIMEDIFF(checkoutdate,checkindate) AS 'Hours',rent,deposit FROM t_clubdetails WHERE alloc_id =(SELECT alloc_id FROM t_roomallocation WHERE adv_recieptno = '" + txtAdRecieptNo.Text + "')  ORDER BY club_id DESC LIMIT 1";
                dt_club = objcls.DtTbl(club);


                cmdBP1.Parameters.AddWithValue("conditionv", " (CURDATE() BETWEEN fromdate AND todate ) AND reqtype = '" + dt_club.Rows[0][0].ToString() + "'  ORDER BY alloc_policy_id DESC LIMIT 1");

            }
            else
            {
                cmdBP1.Parameters.AddWithValue("conditionv", " (CURDATE() BETWEEN fromdate AND todate ) AND reqtype = '" + Session["customer"].ToString() + "'  ORDER BY alloc_policy_id DESC LIMIT 1");
            }

            DataTable dtBP1 = new DataTable();
            dtBP1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdBP1);
            if (dtBP1.Rows.Count > 0)
            {
                maxhour = Convert.ToInt32(dtBP1.Rows[0]["max_allocdays"].ToString());
                defhour = Convert.ToInt32(dtBP1.Rows[0]["defaulttime"].ToString());
            }

            DateTime aldate = Convert.ToDateTime(Convert.ToString(ViewState["alloctime"].ToString()));
            
            string ar = txtExtendDate.Text + " " + txtExtendTime.Text;
            string extdate = ar.Replace('/', '-');

            int minhr = 0;

            OdbcCommand cmdRRxc = new OdbcCommand();
            cmdRRxc.Parameters.AddWithValue("tblname", " m_rent ,m_room");
            cmdRRxc.Parameters.AddWithValue("attribute", " MIN(m_rent.end_duration) as 'minhr', m_rent.rent, m_rent.security_deposit");
            cmdRRxc.Parameters.AddWithValue("conditionv", " m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category GROUP BY m_rent.room_category");

            DataTable dtRRxc = new DataTable();
            dtRRxc = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRRxc);
            if (dtRRxc.Rows.Count > 0)
            {
                minhr = Convert.ToInt32(dtRRxc.Rows[0]["minhr"].ToString());

            }



            String SSvb = "SELECT TIMEDIFF(STR_TO_DATE('" + extdate + "','%d-%m-%Y %l:%i %p'), DATE_ADD(STR_TO_DATE('" + strxz1 + "','%d-%m-%Y %l:%i %p'),INTERVAL '" + graceperiod + "' HOUR ))";
            DataTable DTSSvb = objcls.DtTbl(SSvb);
            TimeSpan extperiod = TimeSpan.Parse(DTSSvb.Rows[0][0].ToString());

            int timetaken = 0;
            timetaken = Convert.ToInt32(extperiod.TotalHours);
            if ((extperiod.Minutes > 0) && (extperiod.Minutes < 30))
            {
                timetaken++;
            }

            if (tottime > 12)
            {
                if (timetaken < minhr)
                {
                    ViewState["auction"] = "checkoutdate";


                    messagedisplay("Extend time less than minimum time.Default time is loaded", "ll");

                    extend();


                    this.ScriptManager1.SetFocus(btnOk);
                    return;

                }
            }

            string ax = txtAllocatedDate.Text + " " + txtAllocatedTime.Text;
            string aldate1 = ax.Replace('/', '-');
           
            String SS = "SELECT TIMEDIFF(STR_TO_DATE('" + extdate + "','%d-%m-%Y %l:%i %p'),STR_TO_DATE('" + aldate1 + "','%d-%m-%Y %l:%i %p'))";
            DataTable DTSS = objcls.DtTbl(SS);
            TimeSpan actperiod = TimeSpan.Parse(DTSS.Rows[0][0].ToString());

            int overtime = 0;
            overtime = Convert.ToInt32(actperiod.TotalHours);
            if ((actperiod.Minutes > 0) && (actperiod.Minutes < 30))
            {
                overtime++;
            }

            String SS1 = "SELECT TIMEDIFF(STR_TO_DATE('" + extdate + "','%d-%m-%Y %l:%i %p'),STR_TO_DATE('" + strxz1 + "','%d-%m-%Y %l:%i %p'))";
            DataTable DTSS1 = objcls.DtTbl(SS1);
            TimeSpan staytime = TimeSpan.Parse(DTSS1.Rows[0][0].ToString());
            int stayhours = 0;
            stayhours = Convert.ToInt32(staytime.TotalHours);
            if ((staytime.Minutes > 0) && (staytime.Minutes < 30))
            {
                stayhours++;
            }

            txtNoofDays.Text = overtime.ToString();

            int aloctime = 0;
            if (Session["customer"].ToString() == "Clubbing")
            {

                TimeSpan timespanclub = TimeSpan.Parse(dt_club.Rows[0]["Hours"].ToString());

                aloctime = Convert.ToInt32(timespanclub.TotalHours);
                if ((timespanclub.Minutes > 0) && (timespanclub.Minutes < 30))
                {
                    aloctime++;
                }

               
                overtime = timetaken + aloctime;

            }

            overtime = overtime - graceperiod;

            double depochk = 0;

            if (Session["customer"].ToString() == "Clubbing")
            {
                int dp = 0,df=0;
                string club = @"SELECT alloc_type,TIMEDIFF(checkoutdate,checkindate) AS 'Hours',rent,deposit FROM t_clubdetails WHERE alloc_id =(SELECT alloc_id FROM t_roomallocation WHERE adv_recieptno = '" + txtAdRecieptNo.Text + "') ";
                dt_club = objcls.DtTbl(club);
                if (dt_club.Rows.Count > 0)
                {
                    for(int n=0; n< dt_club.Rows.Count; n++)
                    {
                        if (dt_club.Rows[n][0].ToString() == "Donor Paid Allocation")
                        {
                            dp++;

                        }
                        if (dt_club.Rows[n][0].ToString() == "Donor Free Allocation")
                        {
                            df++;
                        }

                    }

                    int extsum = 0;

                    extsum = dp * 12 + df * 24;

                    if (extsum > 0)
                    {
                        maxhour = extsum;
                    }
                }

            }



            if (overtime <= maxhour)
            {
               
                if (Session["customer"].ToString() == "Donor Free Allocation")
                {
                    stayhours = stayhours - graceperiod;
                    overtime = stayhours;
                }



                OdbcCommand cmdRR = new OdbcCommand();
                cmdRR.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                cmdRR.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
                cmdRR.Parameters.AddWithValue("conditionv", " ('" + overtime + "' > m_rent.start_duration)  AND ('" + overtime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category AND m_room.room_id = m_inmate.room_id AND ( '" + overtime + "' > m_inmate.start_duration)  AND ('" + overtime + "' <= m_inmate.end_duration ) ");

                DataTable dtRR = new DataTable();
                dtRR = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRR);
                if (dtRR.Rows.Count > 0)
                {
                    rentchk = Convert.ToDouble(dtRR.Rows[0]["rent"].ToString());
                    depochk = Convert.ToDouble(dtRR.Rows[0]["security_deposit"].ToString());
                    inmchk = Convert.ToDouble(dtRR.Rows[0]["rate"].ToString());
                    noinmate = Convert.ToDouble(dtRR.Rows[0]["noofinmates"].ToString());
                    inmdepo = Convert.ToDouble(dtRR.Rows[0]["deposit"].ToString());
                    Session["chk"] = "ok";

                }
                else
                {
                    Session["chk"] = "stop";
                    this.ScriptManager1.SetFocus(txtClientid);
                    messagedisplay("Pilicy not set for period", "warn6");
                    this.ScriptManager1.SetFocus(btnOk);

                }

                string stdv = @"SELECT extra_inmates,inmatedeposit FROM t_inmateallocation WHERE alloc_id='" + Session["allocid"].ToString() + "'";
                DataTable DTSS_stdv = objcls.DtTbl(stdv);

                if (DTSS_stdv.Rows.Count > 0)
                {
                    inmatecount = noinmateold + Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());

                    oldimtot = inmchkold * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                    oldinmdepotot = inmdepoold * Convert.ToDouble(DTSS_stdv.Rows[0]["extra_inmates"].ToString());
                   
                    xtrainm = inmatecount - noinmate;
                    newimtot = inmchk * xtrainm;
                    inmdepnewtot = inmdepo * xtrainm;

                    Session["inmrate"] = inmchk;
                    Session["count"] = xtrainm;
                    Session["time"] = overtime;
                    Session["inmate"] = "ok";




                }
                else
                {
                    Session["inmate"] = "not";
                }

                if (txtinmno.Text != "")
                {
                    if (Convert.ToDouble(txtinmno.Text) > noinmate)
                    {
                        double oldinmcnt = Convert.ToDouble(Session["inm"].ToString());
                        inmatecount = Convert.ToDouble(txtinmno.Text);
                        double oldextra = inmatecount - noinmateold;

                        oldimtot = oldextra * inmchkold;
                        oldinmdepotot = oldextra * inmdepoold;

                        xtrainm = inmatecount - noinmate;
                        newimtot = inmchk * xtrainm;
                        inmdepnewtot = inmdepo * xtrainm;

                        Session["inmrate"] = inmchk;
                        Session["count"] = xtrainm;
                        Session["time"] = overtime;
                        Session["inmate"] = "ok";
                    }
                    else
                    {
                       
                        inmchk = 0;
                        xtrainm = 0;
                        newimtot = 0; oldimtot = 0;
                        inmdepnewtot = 0; oldinmdepotot = 0;
                        Session["inmrate"] = inmchk;
                        Session["count"] = xtrainm;
                        Session["time"] = overtime;
                        Session["inmate"] = "not";
                    }



                }


                if (Session["customer"].ToString() == "Clubbing")
                {//aloctime


                    OdbcCommand cmdRRcvb = new OdbcCommand();
                    cmdRRcvb.Parameters.AddWithValue("tblname", " m_rent ,m_room,m_inmate");
                    cmdRRcvb.Parameters.AddWithValue("attribute", " m_rent.rent,m_rent.security_deposit,m_inmate.rate,m_inmate.noofinmates,m_inmate.deposit");
                    cmdRRcvb.Parameters.AddWithValue("conditionv", " ('" + aloctime + "' > m_rent.start_duration)  AND ('" + aloctime + "' <= m_rent.end_duration ) AND m_room.roomno = '" + int.Parse(txtRoomNo.Text) + "' AND  m_room.build_id = '" + Convert.ToInt32(cmbBuilding.SelectedValue) + "'  AND  room_cat_id = m_rent.room_category  AND m_room.room_id = m_inmate.room_id AND ( '" + aloctime + "' > m_inmate.start_duration)  AND ('" + aloctime + "' <= m_inmate.end_duration ) ");

                    DataTable dtRRcvb = new DataTable();
                    dtRRcvb = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdRRcvb);
                    if (dtRRcvb.Rows.Count > 0)
                    {

                        double clubnoinm = Convert.ToDouble(dtRRcvb.Rows[0]["noofinmates"].ToString());
                        double clubinmrate = Convert.ToDouble(dtRRcvb.Rows[0]["rate"].ToString());
                        double clubinmdepo = Convert.ToDouble(dtRRcvb.Rows[0]["deposit"].ToString());
                        oldimtot = clubinmrate * (inmatecount - clubnoinm);
                        oldinmdepotot = clubinmdepo * (inmatecount - clubnoinm);

                    }

                }

                if (Session["chk"].ToString() == "ok")
                {
                   
                    inmrate = 0;

                    inmrate = newimtot - oldimtot;
                    txtinmcharge.Text = Convert.ToString(inmrate);

                    double inmdep = inmdepnewtot - oldinmdepotot;
                    txtinmdeposit.Text = Convert.ToString(inmdep);

                    if (Session["customer"].ToString() == "Donor Free Allocation")
                    {
                        oldrent = Convert.ToDouble(Session["orent"].ToString());
                        olddepo = Convert.ToDouble(Session["deposit"].ToString());
                        if (olddepo > depochk)
                        {
                            depochk = olddepo;
                        }

                        inmrate = 0;
                        inmdep = 0;
                    }

                    double newrent = rentchk - oldrent;

                    if (Session["customer"].ToString() == "Clubbing")
                    {
                        oldrent = Convert.ToDouble(Session["orent"].ToString());
                        olddepo = Convert.ToDouble(Session["deposit"].ToString());

                        depochk = depochk + olddepo;
                        newrent = rentchk;

                    }


             

                    double newdepo = depochk;
                    txtRentAlloc.Text = newrent.ToString();
                    txtDepositAlloc.Text = newdepo.ToString();

                    double newdue = 0;
                    

                    if (txtClientid.Text != "")
                    {
                        

                        txtAdvAmount.Text = (Convert.ToDouble(txtRentAlloc.Text) + Convert.ToDouble(txtDepositAlloc.Text)).ToString();
                        newdue = ((rentchk + depochk) - (oldrent + Convert.ToDouble(Session["deposit"].ToString()))) + inmrate + inmdep;
                    }
                    else
                    {
                        if (Session["changegross"].ToString() == "0")
                        {

                            txtAdvAmount.Text = (Convert.ToDouble(txtRentAlloc.Text) + Convert.ToDouble(txtDepositAlloc.Text) + Convert.ToDouble(Session["deposit"].ToString())).ToString();
                            newdue = ((rentchk + depochk + Convert.ToDouble(Session["deposit"].ToString())) - (oldrent + Convert.ToDouble(Session["deposit"].ToString()))) + inmrate + inmdep;
                        }
                        else if (Session["changegross"].ToString() == "1")
                        {
                            
                            txtAdvAmount.Text = (Convert.ToDouble(txtRentAlloc.Text) + Convert.ToDouble(txtDepositAlloc.Text)).ToString();
                            newdue = ((rentchk + depochk) - (oldrent + Convert.ToDouble(Session["deposit"].ToString()))) + inmrate + inmdep; ;

                        }
                    }


                    if (newdue < 0)
                    {

                        lblrent.Visible = true;
                        lblrent.Text = "Due To Swami Rs." + -newdue;
                        //Session["due"] = "-" + newdue.ToString();
                    }
                    else
                    {
                        lblrent.Visible = true;
                        lblrent.Text = "Due from Swami Rs." + newdue;
                        Session["due"] = newdue.ToString();
                    }
                }
                else if (Session["chk"].ToString() == "stop")
                {
                    lblrent.Visible = false;
                    txtRentAlloc.Text = "0";
                    txtDepositAlloc.Text = "0";
                    txtAdvAmount.Text = "0";
                }


            }

            else
            {
                this.ScriptManager1.SetFocus(txtClientid);
                messagedisplay("Exceeds Maximum allocation", "warn3");
                extend();
                this.ScriptManager1.SetFocus(btnOk);
                return;
            }
            //////////////////////////////////***************new Extended Stay end***************//////////////////////////////


        } 
        #endregion



        if (cmbCheckOutMehtod.SelectedItem.ToString() != "Alternate Room" && cmbCheckOutMehtod.SelectedItem.ToString() != "Extended Stay")
        {
            int totalallocamount = totalrent + deposit1 + Int32.Parse(txtBalanceAmount.Text);
            txtRentAlloc.Text = totalrent.ToString();
            txtDepositAlloc.Text = deposit1.ToString();
            txtAdvAmount.Text = totalallocamount.ToString();
        }
        lblrent.Visible = true;

        lblrent.Visible = true;
        if (cus == "Donor Paid Allocation") 
        {
          
        }
        else if (cus == "Donor Free Allocation")
        {
           
        }
        else if (cus == "Donor multiple pass")
        {
         
        }
        else if (cus == "General Allocation")
        {
           
        }

        
    }

    # endregion

    # region Allocation Reciept Number Load
    public void AllocationRecieptLoad()
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        # region counter
        Session["computerip"] = System.Web.HttpContext.Current.Request.UserHostAddress;
        string counterTest = Session["computerip"].ToString();
        OdbcCommand cmdCounter = new OdbcCommand();
        cmdCounter.Parameters.AddWithValue("tblname", "m_sub_counter");
        cmdCounter.Parameters.AddWithValue("attribute", "counter_id");
        cmdCounter.Parameters.AddWithValue("conditionv", "counter_ip='" + Session["computerip"].ToString() + "'");
        DataTable dtCounter = new DataTable();
        dtCounter = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdCounter);
        if (dtCounter.Rows.Count > 0)
        {
            Session["counter"] = dtCounter.Rows[0]["counter_id"].ToString();
            counter = "";
        }
        else
        {
            counter = "nil";
            messagedisplay("Tsunami ARMS - Confirmation", "Counter not set for the mechine");
            this.ScriptManager1.SetFocus(btnOk);
        }
        # endregion   
        int ITID=0;
        string RecOld="";

        //if (clsCommon.PrintType == null)
        //{
        //   messagedisplay("Tsunami ARMS - Information", "Specify Receipt Type");
        //}
        //else if (clsCommon.PrintType == "old")
        //{
          
        //}
        //else if (clsCommon.PrintType == "new")
        //{
            
        //}
                    
            ITID = 1;
            RecOld = "no";
            
                OdbcCommand cmdBReciept = new OdbcCommand();
                cmdBReciept.Parameters.AddWithValue("tblname", "t_pass_receipt");
                cmdBReciept.Parameters.AddWithValue("attribute", "balance");
                cmdBReciept.Parameters.AddWithValue("conditionv", "counter_id=" + int.Parse(Session["counterid"].ToString()) + " and item_id=" + ITID + " and balance!=" + 0 + "");
                DataTable dtBReceipt = new DataTable();
                dtBReceipt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdBReciept);

                if (dtBReceipt.Rows.Count > 0)
                {
                    txtRecieptBalance.Text = dtBReceipt.Rows[0]["balance"].ToString();
                    int receiptbalance = int.Parse(dtBReceipt.Rows[0]["balance"].ToString());
                    if (receiptbalance < 10)
                    {
                        messagedisplay("Tsunami ARMS - Warning", "Reciept remainimg less than 10");
                    }
                   
                    OdbcCommand cmdAReciept = new OdbcCommand();
                    cmdAReciept.Parameters.AddWithValue("tblname", "t_roomallocation");
                    cmdAReciept.Parameters.AddWithValue("attribute", "max(adv_recieptno)");
                    cmdAReciept.Parameters.AddWithValue("conditionv", " t_roomallocation.alloc_id =(SELECT MAX(alloc_id)  FROM t_roomallocation WHERE  roomstatus<>'null' AND is_plainprint='" + RecOld + "' AND counter_id='" + Session["counter"].ToString() + "')");
                    DataTable dtAReciept = new DataTable();
                    dtAReciept = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdAReciept);
                    try
                    {
                        if (dtAReciept.Rows.Count > 0)
                        {
                            int rs = int.Parse(dtAReciept.Rows[0]["max(adv_recieptno)"].ToString());
                            rs = rs + 1;
                            txtStartRecieptNo.Text = rs.ToString();
                            txtAllocRecNo.Text = rs.ToString();
                        }
                        else
                        {
                            messagedisplay("Tsunami ARMS - Message", "Enter Receipt No");
                            txtStartRecieptNo.Text = "0";
                            txtAllocRecNo.Text = "0";
                            //this.ScriptManager1.SetFocus(txtAllocRecNo);
                        }
                    }
                    catch
                    {
                        messagedisplay("Tsunami ARMS - Message", "Enter Receipt No");
                        txtStartRecieptNo.Text = "0";
                        txtAllocRecNo.Text = "0";
                        //this.ScriptManager1.SetFocus(txtAllocRecNo);
                    }
                }
                else
                {
                    messagedisplay("No Adv Receipt for this counter", "warnnn");

                }
    }
    # endregion

    # region UnClaimed Security Deposit Ledger
    protected void lnkUnclaimedSecutityLedger_Click(object sender, EventArgs e)
    {
                  
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }
            int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
            DataTable dttucdeposit = new DataTable();
            dttucdeposit.Columns.Clear();
            dttucdeposit.Columns.Add("date", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("description", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("reciept", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("payment", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("balance", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("reason", System.Type.GetType("System.String"));
            Session["prev"] = "";
           if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();


            }
            int total = 0;
            int allocid = Convert.ToInt32(Session["allocid"]);
            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string f2 = dts.ToString("dd/MM/yyyy");
            string dayclosed = dts.ToString("dd MMM yyyy");
            DateTime tim1 = DateTime.Now;
            string kk = tim1.ToString("yyyy/MM/dd");
            string yy = tim1.ToString("dd/MM/yyyy");
            yy = tim1.ToString("dd MMM  yyyy");
            try
            {

            int s = 0;
                if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
                {
                    string fromdate =objcls.yearmonthdate(txtFromDate.Text);
                    string todate = objcls.yearmonthdate(txtToDate.Text);

                    DateTime t1 = DateTime.Parse(fromdate);
                    DateTime t2 = DateTime.Parse(todate);
                    string t11 = t1.ToString("dd MMM");
                    string t22 = t2.ToString("dd MMM");

                    if (t1 == t2)
                    {
                        yy = t11;

                    }
                    else
                    {
                        yy = t11 + "-" + t22; 

                    }
                    OdbcCommand cmd31 = new OdbcCommand();
                    cmd31.CommandType = CommandType.StoredProcedure;
                    cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                    cmd31.Parameters.AddWithValue("attribute", "alloc_no,adv_recieptno, ta.deposit, tv.dayend,buildingname,bill_receiptno,roomno,remark");
                    cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and return_deposit='0' order by adv_recieptno ");

                    DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
                 
                    int k = 0;
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        string prevday = "";
                        if (i > 0)
                        {
                            prevday = dt1.Rows[i - 1]["dayend"].ToString();
                            DateTime prevday1 = DateTime.Parse(dt1.Rows[i - 1]["dayend"].ToString());
                            string prevday11 = prevday1.ToString("yyyy-MM-dd");
                            DateTime prevday2 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                            string prevday22 = prevday2.ToString("yyyy-MM-dd");
                            Session["prev"] = prevday22;
                            if (prevday2 > prevday1)
                            {
                                try
                                {

                                    OdbcCommand cmdch = new OdbcCommand();
                                    cmdch.CommandType = CommandType.StoredProcedure;
                                    cmdch.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                                    cmdch.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno");
                                    cmdch.Parameters.AddWithValue("conditionv", "dayend='" + prevday11 + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='2'");

                                    DataTable dtch = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch);
                                  

                                    if (dtch.Rows.Count > 0)
                                    {
                                        dttucdeposit.Rows.Add();
                                        dttucdeposit.Rows[k]["date"] = prevday11 ;
                                        dttucdeposit.Rows[k]["description"] = "Bank Remmittance Chl.no  " + dtch.Rows[0]["chelanno"].ToString();
                                        dttucdeposit.Rows[k]["reciept"] = 0;
                                        dttucdeposit.Rows[k]["payment"] = Convert.ToInt32(dtch.Rows[0]["amount_paid"]);
                                        dttucdeposit.Rows[k]["balance"] = Convert.ToInt32(dtch.Rows[0]["balance"]);
                                        total = total - Convert.ToInt32(Convert.ToInt32(dtch.Rows[0]["amount_paid"]));
                                        k++;

                                    }


                                }
                                catch
                                {


                                }

                            }

                        }

                        DateTime dayend1 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                        string day = dayend1.ToString("dd");
                        string bill = dt1.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                        bill = dt1.Rows[i]["adv_recieptno"].ToString();
                        string build = "";
                        string building = dt1.Rows[i]["buildingname"].ToString();
                        if (building.Contains("(") == true)
                        {
                            string[] buildS1, buildS2; ;
                            buildS1 = building.Split('(');
                            build = buildS1[1];
                            buildS2 = build.Split(')');
                            build = buildS2[0];
                            building = build;
                        }
                        else if (building.Contains("Cottage") == true)
                        {
                            building = building.Replace("Cottage", "Cot");
                        }
                        building = building + "/" + dt1.Rows[i]["roomno"].ToString();


                        if (Convert.ToInt32(dt1.Rows[i]["deposit"]) > 0)
                        {

                            dttucdeposit.Rows.Add();
                            dttucdeposit.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                            dttucdeposit.Rows[k]["description"] = " UC Deposit againt Bill  " + bill + " " + building;
                            dttucdeposit.Rows[k]["reciept"] = dt1.Rows[i]["deposit"].ToString();
                            dttucdeposit.Rows[k]["payment"] = "";
                            dttucdeposit.Rows[k]["balance"] = "";
                            dttucdeposit.Rows[k]["reason"] = dt1.Rows[i]["remark"].ToString();
                            total = total + Convert.ToInt32(dt1.Rows[i]["deposit"]);
                            k++;

                            s = k;
                        }


                    }
                    try
                    {
                        string dater = Convert.ToString(Session["prev"]);
                        OdbcCommand cmdch1 = new OdbcCommand();
                        cmdch1.CommandType = CommandType.StoredProcedure;
                        cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                        cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                        cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dater + "'  and tv.chelanno=tt.chelanno   and  status='3' and ledger_id='2'");
                        DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
                        if (dtch1.Rows.Count > 0)
                        {
                            dttucdeposit.Rows.Add();
                            dttucdeposit.Rows[s]["date"] = dater.ToString();
                            dttucdeposit.Rows[s]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                            dttucdeposit.Rows[s]["reciept"] = 0;
                            dttucdeposit.Rows[s]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                            dttucdeposit.Rows[s]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                            total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                           
                         }

                    }
                    catch { }

                }
                else
                {
                    dat=objcls.yearmonthdate(txtDaycloseDate.Text);

                    DateTime t3 = DateTime.Parse(dat);

                    yy = t3.ToString("dd-MMM-yyyy");

                    OdbcCommand cmd311 = new OdbcCommand();
                    cmd311.CommandType = CommandType.StoredProcedure;
                    cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                    cmd311.Parameters.AddWithValue("attribute", "remark,adv_recieptno,alloc_no,ta.deposit, tv.dayend,buildingname,bill_receiptno,roomno");
                    cmd311.Parameters.AddWithValue("conditionv", "tv.dayend='" + dat + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and return_deposit='0'  order by adv_recieptno ");
                    DataTable dt11 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);
                   
                    int k = 0;
                    for (int i = 0; i < dt11.Rows.Count; i++)
                    {
                        DateTime dayend1 = DateTime.Parse(dt11.Rows[i]["dayend"].ToString());
                        string day = dayend1.ToString("dd");
                        string bill = dt11.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                        bill = dt11.Rows[i]["adv_recieptno"].ToString();
                        string build = "";
                        string building = dt11.Rows[i]["buildingname"].ToString();
                        if (building.Contains("(") == true)
                        {
                            string[] buildS1, buildS2; ;
                            buildS1 = building.Split('(');
                            build = buildS1[1];
                            buildS2 = build.Split(')');
                            build = buildS2[0];
                            building = build;
                        }
                        else if (building.Contains("Cottage") == true)
                        {
                            building = building.Replace("Cottage", "Cot");
                        }
                        building = building + "/" + dt11.Rows[i]["roomno"].ToString();


                        if (Convert.ToInt32(dt11.Rows[i]["deposit"]) > 0)
                        {

                            dttucdeposit.Rows.Add();
                            dttucdeposit.Rows[k]["date"] = dt11.Rows[i]["dayend"].ToString();
                            dttucdeposit.Rows[k]["description"] = " UC Deposit againt Bill  " + bill + " " + building;
                            dttucdeposit.Rows[k]["reciept"] = dt11.Rows[i]["deposit"].ToString();
                            dttucdeposit.Rows[k]["payment"] = "";
                            dttucdeposit.Rows[k]["balance"] = "";
                            dttucdeposit.Rows[k]["reason"] = dt11.Rows[i]["remark"].ToString();
                            total = total + Convert.ToInt32(dt11.Rows[i]["deposit"]);
                            k++;


                        }

                    }

                    OdbcCommand cmdch1 = new OdbcCommand();
                    cmdch1.CommandType = CommandType.StoredProcedure;
                    cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                    cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                    cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dat + "'  and tv.chelanno=tt.chelanno   and  status='3' and ledger_id='2'");
                    DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
                 
                    if (dtch1.Rows.Count > 0)
                    {
                        dttucdeposit.Rows.Add();
                        dttucdeposit.Rows[k]["date"] = dtch1.Rows[0]["dayend"].ToString();
                        dttucdeposit.Rows[k]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                        dttucdeposit.Rows[k]["reciept"] = 0;
                        dttucdeposit.Rows[k]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                        dttucdeposit.Rows[k]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                        total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                       }
                }
                       
                DataTable dt = dttucdeposit;
                DateTime gh = DateTime.Now;
                string transtim = gh.ToString("dd-MM-yyyy HH-mm");
                string ch = "UnclaimedDepositLedger" + transtim.ToString() + ".pdf";

                string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

                Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 70);
                Font font8 = FontFactory.GetFont("ARIAL", 9,1);
                Font font7 = FontFactory.GetFont("ARIAL", 9);
                Font font12 = FontFactory.GetFont("ARIAL",12,1);
                Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
                pdfPage page = new pdfPage();
        
                PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                wr.PageEvent = page;
                 doc.Open();
                PdfPTable tablec = new PdfPTable(4);
                float[] colWidths23c = { 50, 50, 50, 50 };
                tablec.SetWidths(colWidths23c);
                page.strRptMode = "Receiptledger";

                PdfPCell cell = new PdfPCell(new Phrase("Unclaimed Deposit  Receipt Ledger", font12));
                cell.Colspan = 4;
                cell.MinimumHeight = 10;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                tablec.AddCell(cell);
                PdfPCell cellc = new PdfPCell(new Phrase("Office name:", font9));
                cellc.Colspan = 1;
                cellc.Border = 0;
                cellc.HorizontalAlignment = 0;
                tablec.AddCell(cellc);
                PdfPCell cellv = new PdfPCell(new Phrase("Accommodation office", font9));
                cellv.Colspan = 1;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 0;
                tablec.AddCell(cellv);

                PdfPCell celld = new PdfPCell(new Phrase("Description:", font9));
                celld.Colspan = 1;
                celld.Border = 0;
                celld.HorizontalAlignment = 0;
                tablec.AddCell(celld);

                PdfPCell cellf = new PdfPCell(new Phrase("Unclaimed Security Deposit ledger", font9));
                cellf.Colspan = 1;
                cellf.Border = 0;
                cellf.HorizontalAlignment = 0;
                tablec.AddCell(cellf);
        
                PdfPCell cellbn = new PdfPCell(new Phrase("Budget_Head:", font9));
                cellbn.Colspan = 1;
                cellbn.Border = 0;
                cellbn.HorizontalAlignment = 0;
                tablec.AddCell(cellbn);
                        
                PdfPCell cellnb = new PdfPCell(new Phrase("Accommodation Officer", font9));
                cellnb.Colspan = 1;
                cellnb.Border = 0;
                cellnb.HorizontalAlignment = 0;
                tablec.AddCell(cellnb);

                PdfPCell cellm = new PdfPCell(new Phrase("Date:", font9));
                cellm.Colspan = 1;
                cellm.Border = 0;
                cellm.HorizontalAlignment = 0;
                tablec.AddCell(cellm);
        
                PdfPCell cellbnn = new PdfPCell(new Phrase(yy.ToString(), font9));
                cellbnn.Colspan = 1;
                cellbnn.Border = 0;
                cellbnn.HorizontalAlignment = 0;
                tablec.AddCell(cellbnn);
                doc.Add(tablec);
                PdfPTable table = new PdfPTable(7);
                float[] colWidths23 = { 20, 20, 70, 20, 25, 22, 33 };
                table.SetWidths(colWidths23);
                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("No", font8)));
                cell1.Rowspan = 1;
                table.AddCell(cell1);
                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                cell2.Rowspan = 1;
                table.AddCell(cell2);
                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Description", font8)));
                cell3.Colspan = 1;
                cell3.HorizontalAlignment = 1;
                table.AddCell(cell3);
                PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Sec dept", font8)));
                cell31.Rowspan = 1;
                table.AddCell(cell31);
                PdfPCell cell31c = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
                cell31c.Rowspan = 1;
                table.AddCell(cell31c);
                PdfPCell cell31cc = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                cell31cc.Rowspan = 1;
                table.AddCell(cell31cc);
              
                PdfPCell cell31ccx = new PdfPCell(new Phrase(new Chunk("Reason", font8)));
                cell31ccx.Rowspan = 1;
                table.AddCell(cell31ccx);
                doc.Add(table);
                      
                int ii = 0;
                int slno = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    slno = slno + 1;
                    if (ii > 25)
                    {
                        ii = 0;
                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(7);

                        float[] colWidths231 = { 20, 20, 70, 20, 25, 22, 33 };
                        table1.SetWidths(colWidths23);

                        PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk("No", font8)));

                        cell11.Rowspan = 1;
                        table1.AddCell(cell11);

                        PdfPCell cell21 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                        cell21.Rowspan = 1;
                        table1.AddCell(cell21);

                        PdfPCell cell3v = new PdfPCell(new Phrase(new Chunk("Description", font8)));
                        cell3v.Colspan = 1;
                        table1.AddCell(cell3v);

                        PdfPCell cell311 = new PdfPCell(new Phrase(new Chunk("Sec dept", font8)));
                        cell311.Rowspan = 1;
                        table1.AddCell(cell311);

                        PdfPCell cell31c1 = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
                        cell31c1.Rowspan = 1;
                        table1.AddCell(cell31c1);

                        PdfPCell cell31cc1 = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                        cell31cc1.Rowspan = 1;
                        table1.AddCell(cell31cc1);

                        PdfPCell cell31x1c = new PdfPCell(new Phrase(new Chunk("Reason", font9)));
                        cell31x1c.Rowspan = 1;
                        table1.AddCell(cell31x1c);
                        doc.Add(table1);


                    }

                    PdfPTable table2 = new PdfPTable(7);

                    float[] colWidths2312 = { 20, 20, 70, 20, 25, 22, 33 };
                    table2.SetWidths(colWidths2312);

                    PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table2.AddCell(cell4);
                    DateTime datee = DateTime.Parse(dr["date"].ToString());
                    string datee1 = datee.ToString("dd MMM");

                    PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(datee1.ToString(), font7)));
                    table2.AddCell(cell5);
                    PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["description"].ToString(), font7)));
                    table2.AddCell(cell6);
                    PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk(dr["reciept"].ToString(), font7)));

                    table2.AddCell(cell611d);

                    PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(dr["payment"].ToString(), font7)));
                    table2.AddCell(cell61);
                    
                    PdfPCell cell611 = new PdfPCell(new Phrase(new Chunk(dr["balance"].ToString(), font7)));
                    table2.AddCell(cell611);

                    PdfPCell cell611b = new PdfPCell(new Phrase(new Chunk(dr["reason"].ToString(), font7)));
                    table2.AddCell(cell611b);


                    ii++;
                    doc.Add(table2);
                }
                if (dt.Rows.Count > 0)
                {
                    PdfPTable table2f = new PdfPTable(7);

                    float[] colWidths2312 = { 20, 20, 70, 20, 25, 22, 33 };
                    table2f.SetWidths(colWidths2312);
                    PdfPCell cell611ds = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611ds.Colspan = 1;
                    table2f.AddCell(cell611ds);


                    PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611d.Colspan = 1;
                    table2f.AddCell(cell611d);


                    PdfPCell cell6141ds = new PdfPCell(new Phrase(new Chunk("Total", font8)));
                    cell6141ds.Colspan = 1;
                    table2f.AddCell(cell6141ds);

                    PdfPCell cell611d11 = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                    cell611d11.Colspan = 1;
                    table2f.AddCell(cell611d11);

                    PdfPCell cell611d1 = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611d1.Colspan = 1;
                    table2f.AddCell(cell611d1);
                    doc.Add(table2f);
                    PdfPCell cell611d1x = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                    cell611d1x.Colspan = 1;
                    table2f.AddCell(cell611d1x);
                    PdfPCell cell611d1xn = new PdfPCell(new Phrase(new Chunk("", font8)));
                    cell611d1xn.Colspan = 1;
                    table2f.AddCell(cell611d1xn);

                    PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                    cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellfb.PaddingLeft = 20;
                    cellfb.Colspan = 7;
                    cellfb.MinimumHeight = 30;
                    cellfb.Border = 0;
                    table2f.AddCell(cellfb);

                    PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                    cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                    cellf1b.PaddingLeft = 20;
                    cellf1b.Colspan = 7;
                    cellf1b.Border = 0;
                    table2f.AddCell(cellf1b);

                    PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                    cellh2.HorizontalAlignment =Element.ALIGN_MIDDLE;
                    cellh2.PaddingLeft = 20;
                    cellh2.Border = 0;
                    cellh2.Colspan = 7;
                    table2f.AddCell(cellh2);
                    doc.Add(table2f);

                }

                doc.Close();
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=Unclaimed deposit ledger";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);
            }

            catch
            {
                messagedisplay("problem found", "aa");

            }
        
        conn.Close();


            }
    # endregion

    # region Room Damage Ledger
    protected void lnkRoomDamageLedger_Click(object sender, EventArgs e)
         {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        Session["prev"] = "";
        int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
        DataTable dttroomdamage = new DataTable();
        dttroomdamage.Columns.Clear();
        dttroomdamage.Columns.Add("date", System.Type.GetType("System.String"));
        dttroomdamage.Columns.Add("description", System.Type.GetType("System.String"));
        dttroomdamage.Columns.Add("reciept", System.Type.GetType("System.String"));
        dttroomdamage.Columns.Add("payment", System.Type.GetType("System.String"));
        dttroomdamage.Columns.Add("balance", System.Type.GetType("System.String"));
      
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        int total = 0;
        int allocid = Convert.ToInt32(Session["allocid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dayclosed = dts.ToString("dd MMM yyyy");
        DateTime tim1 = DateTime.Now;
        string kk = tim1.ToString("yyyy/MM/dd");
        string yy = tim1.ToString("dd/MM/yyyy");
        yy = tim1.ToString("dd MMM  yyyy");
        try
        {

            if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
            {
               string fromdate =objcls.yearmonthdate(txtFromDate.Text);
               string todate =objcls.yearmonthdate(txtToDate.Text);
               DateTime t1 = DateTime.Parse(fromdate);
               DateTime t2 = DateTime.Parse(todate);
               string t11 = t1.ToString("dd MMM");
               string t22 = t2.ToString("dd MMM");

                if (t1 == t2)
                {
                    yy = t11;

                }
                else
                {
                    yy = t11 + "-" + t22;

                }
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", " adv_recieptno,alloc_no,damage_penality, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and liability_by='0'  and damage_penality>0  and roomcondition='0' and inmate_abscond='0'  ");
                DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
                int k = 0,s=0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    string prevday = "";
                    if (i > 0)
                    {
                        prevday = dt1.Rows[i - 1]["dayend"].ToString();
                        DateTime prevday1 = DateTime.Parse(dt1.Rows[i - 1]["dayend"].ToString());
                        string prevday11 = prevday1.ToString("yyyy-MM-dd");
                        DateTime prevday2 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                        string prevday22 = prevday2.ToString("yyyy-MM-dd");
                        Session["prev"] = prevday22;
                        if (prevday2 > prevday1)
                        {
                            try
                            {

                                OdbcCommand cmdch = new OdbcCommand();
                                cmdch.CommandType = CommandType.StoredProcedure;
                                cmdch.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                                cmdch.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno");
                                cmdch.Parameters.AddWithValue("conditionv", "dayend='" + prevday11 + "'  and tv.chelanno=tt.chelanno   and  status='3' and ledger_id='4'");
                                DataTable dtch = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch);
                             

                                if (dtch.Rows.Count > 0)
                                {
                                    dttroomdamage.Rows.Add();
                                    dttroomdamage.Rows[k]["date"] = prevday11.ToString();
                                    dttroomdamage.Rows[k]["description"] = "Bank Remmittance Chl.no  " + dtch.Rows[0]["chelanno"].ToString();
                                    dttroomdamage.Rows[k]["reciept"] = 0;
                                    dttroomdamage.Rows[k]["payment"] = Convert.ToInt32(dtch.Rows[0]["amount_paid"]);
                                    dttroomdamage.Rows[k]["balance"] = Convert.ToInt32(dtch.Rows[0]["balance"]);
                                    total = total - Convert.ToInt32(Convert.ToInt32(dtch.Rows[0]["amount_paid"]));
                                    k++;
                           
                                }


                            }
                            catch
                            {


                            }



                        }

                    }

                    DateTime dayend1 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt1.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt1.Rows[i]["adv_recieptno"].ToString();
                                     string build = "";
                    string building = dt1.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt1.Rows[i]["roomno"].ToString();


                    if (Convert.ToInt32(dt1.Rows[i]["damage_penality"]) > 0)
                    {
                        dttroomdamage.Rows.Add();
                        dttroomdamage.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttroomdamage.Rows[k]["description"] = " Room  Damage Charge againt Bill  " + bill + " " + building;
                        dttroomdamage.Rows[k]["reciept"] = dt1.Rows[i]["damage_penality"].ToString();
                        dttroomdamage.Rows[k]["payment"] = "";
                        dttroomdamage.Rows[k]["balance"] = "";

                        total = total + Convert.ToInt32(dt1.Rows[i]["damage_penality"]);
                        k++;

                    }

                    s = k;

                }

                string dater = Convert.ToString(Session["prev"]);
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dater + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='4'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
             
                if (dtch1.Rows.Count > 0)
                {
                    dttroomdamage.Rows.Add();
                    dttroomdamage.Rows[s]["date"] = dater.ToString();
                    dttroomdamage.Rows[s]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttroomdamage.Rows[s]["reciept"] = 0;
                    dttroomdamage.Rows[s]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttroomdamage.Rows[s]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                                                         
                }

            }
            else
           {
               dat =objcls.yearmonthdate(txtDaycloseDate.Text);

               DateTime t3 = DateTime.Parse(dat);
               yy = t3.ToString("dd-MMM-yyyy");

                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd311.Parameters.AddWithValue("attribute", "adv_recieptno, alloc_no,damage_penality, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd311.Parameters.AddWithValue("conditionv", "tv.dayend>='" + dat + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and liability_by='0' and damage_penality>0  and roomcondition='0' and inmate_abscond='0'  ");
                DataTable dt11 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);
              
                int k = 0;
                for (int i = 0; i < dt11.Rows.Count; i++)
                {


                    DateTime dayend1 = DateTime.Parse(dt11.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt11.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt11.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt11.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt11.Rows[i]["roomno"].ToString();


                    if (Convert.ToInt32(dt11.Rows[i]["damage_penality"]) > 0)
                    {

                        dttroomdamage.Rows.Add();
                        dttroomdamage.Rows[k]["date"] = dt11.Rows[i]["dayend"].ToString();
                        dttroomdamage.Rows[k]["description"] = "Room  Damage Charge against Bill  " + bill + " " + building;
                        dttroomdamage.Rows[k]["reciept"] = dt11.Rows[i]["damage_penality"].ToString();
                        dttroomdamage.Rows[k]["payment"] = "";
                        dttroomdamage.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt11.Rows[i]["damage_penality"]);
                        k++;


                    }


                }

                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dat + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='4'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
               

                if (dtch1.Rows.Count > 0)
                {
                    dttroomdamage.Rows.Add();
                    dttroomdamage.Rows[k]["date"] = dtch1.Rows[0]["dayend"].ToString();
                    dttroomdamage.Rows[k]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttroomdamage.Rows[k]["reciept"] = 0;
                    dttroomdamage.Rows[k]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttroomdamage.Rows[k]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));


                }


            }

            DataTable dt = dttroomdamage;
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "RoomDamgageLedger" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;
            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 70);
          
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            PdfPTable tablec = new PdfPTable(4);
            float[] colWidths23c = { 50, 50, 50, 50 };
            tablec.SetWidths(colWidths23c);
            page.strRptMode = "Receiptledger";

            PdfPCell cell = new PdfPCell(new Phrase("Room Damage  Receipt Ledger", font12));
            cell.Colspan = 4;
            cell.MinimumHeight = 10;
            cell.Border = 1;
            cell.HorizontalAlignment = 1;
            tablec.AddCell(cell);

            PdfPCell cellc = new PdfPCell(new Phrase("Office name:", font9));
            cellc.Colspan = 1;
            cellc.Border = 0;
            cellc.HorizontalAlignment = 0;
            tablec.AddCell(cellc);
            PdfPCell cellv = new PdfPCell(new Phrase("Accommodation office", font9));
            cellv.Colspan = 1;
            cellv.Border = 0;
            cellv.HorizontalAlignment = 0;
            tablec.AddCell(cellv);

            PdfPCell celld = new PdfPCell(new Phrase("Description:", font9));
            celld.Colspan = 1;
            celld.Border = 0;
            celld.HorizontalAlignment = 0;
            tablec.AddCell(celld);


            PdfPCell cellf = new PdfPCell(new Phrase("Room Damage Charge Ledger", font9));
            cellf.Colspan = 1;
            cellf.Border = 0;
            cellf.HorizontalAlignment = 0;
            tablec.AddCell(cellf);
            
            PdfPCell cellbn = new PdfPCell(new Phrase("Budget_Head:", font9));
            cellbn.Colspan = 1;
            cellbn.Border = 0;
            cellbn.HorizontalAlignment = 0;
            tablec.AddCell(cellbn);

            PdfPCell cellnb = new PdfPCell(new Phrase("Accommodation Officer", font9));
            cellnb.Colspan = 1;
            cellnb.Border = 0;
            cellnb.HorizontalAlignment = 0;
            tablec.AddCell(cellnb);

            PdfPCell cellm = new PdfPCell(new Phrase("Date:", font9));
            cellm.Colspan = 1;
            cellm.Border = 0;
            cellm.HorizontalAlignment = 0;
           
            tablec.AddCell(cellm);

            PdfPCell cellbnn = new PdfPCell(new Phrase(yy.ToString(), font9));
            cellbnn.Colspan = 1;
            cellbnn.Border = 0;
            cellbnn.HorizontalAlignment = 0;
             tablec.AddCell(cellbnn);
            doc.Add(tablec);
            PdfPTable table = new PdfPTable(6);
            float[] colWidths23 = {20, 30, 80, 20, 30, 20 };
            table.SetWidths(colWidths23);

            PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("No", font8)));

            cell1.Rowspan = 1;
            table.AddCell(cell1);

            PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
            cell2.Rowspan = 1;
            table.AddCell(cell2);

            PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Description", font8)));
            cell3.Colspan = 1;
            cell3.HorizontalAlignment = 1;
            table.AddCell(cell3);

            PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
            cell31.Rowspan = 1;
            table.AddCell(cell31);

            PdfPCell cell31c = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
            cell31c.Rowspan = 1;
            table.AddCell(cell31c);

            PdfPCell cell31cc = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
            cell31cc.Rowspan = 1;
            table.AddCell(cell31cc);

            doc.Add(table);

           int ii = 0;
            int slno = 0;
            foreach (DataRow dr in dt.Rows)
            {
                slno = slno + 1;
                if (ii > 35)
                {
                    ii = 0;
                    doc.NewPage();
                    PdfPTable table1 = new PdfPTable(6);

                    float[] colWidths231 = { 20, 30, 80, 20, 30, 20 };
                    table1.SetWidths(colWidths23);

                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk("No", font8)));
                    cell11.Rowspan = 1;
                    table1.AddCell(cell11);

                    PdfPCell cell21 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                    cell21.Rowspan = 1;
                    table1.AddCell(cell21);

                    PdfPCell cell3v = new PdfPCell(new Phrase(new Chunk("Description", font8)));
                    cell3v.Colspan = 1;
                    table1.AddCell(cell3v);

                    PdfPCell cell311 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                    cell311.Rowspan = 1;
                    table1.AddCell(cell311);

                    PdfPCell cell31c1 = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
                    cell31c1.Rowspan = 1;
                    table1.AddCell(cell31c1);

                    PdfPCell cell31cc1 = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                    cell31cc1.Rowspan = 1;
                    table1.AddCell(cell31cc1);

                    doc.Add(table1);


                }

                PdfPTable table2 = new PdfPTable(6);

                float[] colWidths2312 = { 20, 30, 80, 20, 30, 20 };
                table2.SetWidths(colWidths2312);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                table2.AddCell(cell4);
                DateTime datee = DateTime.Parse(dr["date"].ToString());
                string datee1 = datee.ToString("dd MMM");

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(datee1.ToString(), font7)));
                table2.AddCell(cell5);
                PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["description"].ToString(), font7)));
                table2.AddCell(cell6);
                PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk(dr["reciept"].ToString(), font7)));

                table2.AddCell(cell611d);
             
                PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(dr["payment"].ToString(), font7)));
                table2.AddCell(cell61);

                PdfPCell cell611 = new PdfPCell(new Phrase(new Chunk(dr["balance"].ToString(), font7)));
                table2.AddCell(cell611);

                ii++;
                doc.Add(table2);
            }
            if (dt.Rows.Count > 0)
            {
                PdfPTable table2f = new PdfPTable(6);

                float[] colWidths2312 = { 20, 30, 80, 20, 30, 20 };
                table2f.SetWidths(colWidths2312);
                PdfPCell cell611ds = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611ds.Colspan = 1;
                table2f.AddCell(cell611ds);


                PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611d.Colspan = 1;
                table2f.AddCell(cell611d);


                PdfPCell cell6141ds = new PdfPCell(new Phrase(new Chunk("Total", font8)));
                cell6141ds.Colspan = 1;
                table2f.AddCell(cell6141ds);

                PdfPCell cell611d11 = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                cell611d11.Colspan = 1;
                table2f.AddCell(cell611d11);

                PdfPCell cell611d1 = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611d1.Colspan = 1;
                table2f.AddCell(cell611d1);
                doc.Add(table2f);
                PdfPCell cell611d1x = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                cell611d1x.Colspan = 1;
                table2f.AddCell(cell611d1x);


                PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                cellfb.PaddingLeft = 20;
                cellfb.Colspan = 6;
                cellfb.MinimumHeight = 30;
                cellfb.Border = 0;
                table2f.AddCell(cellfb);

                PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1b.PaddingLeft = 20;
                cellf1b.Colspan = 6;
                cellf1b.Border = 0;
                table2f.AddCell(cellf1b);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_MIDDLE;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 6;
                table2f.AddCell(cellh2);

                doc.Add(table2f);

            }

            doc.Close();
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Room damage Ledger";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);

            
        }
       catch
        {
            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Problem found during report taking";
            ViewState["action"] = "warn28";
            ModalPopupExtender1.Show();

        } conn.Close();


    }
            # endregion

    # region Key Lost Ledger report
    protected void lnkKeyLostChargeLedger_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        Session["prev"] = "";
        int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
        DataTable dttkeylost = new DataTable();
        dttkeylost.Columns.Clear();
        
        dttkeylost.Columns.Add("date", System.Type.GetType("System.String"));
        dttkeylost.Columns.Add("description", System.Type.GetType("System.String"));
        dttkeylost.Columns.Add("reciept", System.Type.GetType("System.String"));
        dttkeylost.Columns.Add("payment", System.Type.GetType("System.String"));
        dttkeylost.Columns.Add("balance", System.Type.GetType("System.String"));
        int s = 0;
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        int total = 0;
        int allocid = Convert.ToInt32(Session["allocid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dayclosed = dts.ToString("dd MMM yyyy");
        DateTime tim1 = DateTime.Now;
        string kk = tim1.ToString("yyyy/MM/dd");
        string yy = tim1.ToString("dd/MM/yyyy");
        yy = tim1.ToString("dd MMM  yyyy");
        try
        {

            if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
             {
                string fromdate =objcls.yearmonthdate(txtFromDate.Text);
                string todate =objcls.yearmonthdate(txtToDate.Text);
               DateTime t1 = DateTime.Parse(fromdate);
                DateTime t2 = DateTime.Parse(todate);
                string t11 = t1.ToString("dd MMM");
                string t22 = t2.ToString("dd MMM");

                if (t1 == t2)
                {
                    yy = t11;

                }
                else
                {
                    yy = t11 + "-" + t22;

                }
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "adv_recieptno,alloc_no,key_penality, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and liability_by='0'  and key_penality>0  and return_key='0' and inmate_abscond='0'");
                DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31 );
                
               OdbcDataAdapter da1 = new OdbcDataAdapter("select alloc_no, retdepamount  as key_penality ,tv.dayend,buildingname,bill_receiptno,roomno from m_room mr,m_sub_building msb, t_roomvacate tv ,t_roomallocation ta  where ta.alloc_id=tv.alloc_id and  inmate_abscond=1 and  remark='Key penality' and msb.build_id=mr.build_id and mr.room_id=ta.room_id and tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "' ", conn);
               da1.Fill(dt1);
               int k = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {

                    string prevday = "";
                    if (i > 0)
                    {
                        prevday = dt1.Rows[i - 1]["dayend"].ToString();
                        DateTime prevday1 = DateTime.Parse(dt1.Rows[i - 1]["dayend"].ToString());
                        string prevday11 = prevday1.ToString("yyyy-MM-dd");
                        DateTime prevday2 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                        string prevday22 = prevday2.ToString("yyyy-MM-dd");
                        Session["prev"] = prevday22;
                        if (prevday2 > prevday1)
                        {
                            try
                            {

                                OdbcCommand cmdch = new OdbcCommand();
                                cmdch.CommandType = CommandType.StoredProcedure;
                                cmdch.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                                cmdch.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno");
                                cmdch.Parameters.AddWithValue("conditionv", "dayend='" + prevday11 + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='3'");
                                DataTable dtch = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch);
                              

                                if (dtch.Rows.Count > 0)
                                {
                                    dttkeylost.Rows.Add();
                                    dttkeylost.Rows[k]["date"] = prevday11;
                                    dttkeylost.Rows[k]["description"] = "Bank Remmittance Chl.no  " + dtch.Rows[0]["chelanno"].ToString();
                                    dttkeylost.Rows[k]["reciept"] = 0;
                                    dttkeylost.Rows[k]["payment"] = Convert.ToInt32(dtch.Rows[0]["amount_paid"]);
                                    dttkeylost.Rows[k]["balance"] = Convert.ToInt32(dtch.Rows[0]["balance"]);
                                    total = total - Convert.ToInt32(Convert.ToInt32(dtch.Rows[0]["amount_paid"]));
                                    k++;

                                }

                            }
                            catch
                            {


                            }

                        }

                    }

                    DateTime dayend1 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt1.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt1.Rows[i]["adv_recieptno"].ToString();
                     string build = "";
                    string building = dt1.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt1.Rows[i]["roomno"].ToString();


                    if (Convert.ToInt32(dt1.Rows[i]["key_penality"]) > 0)
                    {
                        dttkeylost.Rows.Add();
                        dttkeylost.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttkeylost.Rows[k]["description"] = " Payment Charge againt Bill  " + bill + " " + building;
                        dttkeylost.Rows[k]["reciept"] = dt1.Rows[i]["key_penality"].ToString();
                        dttkeylost.Rows[k]["payment"] = "";
                        dttkeylost.Rows[k]["balance"] = "";

                        total = total + Convert.ToInt32(dt1.Rows[i]["key_penality"]);
                        k++;


                    }

                    s = k;

                }

                string dater = Convert.ToString(Session["prev"]);
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dater + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='3'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
              

                if (dtch1.Rows.Count > 0)
                {
                    dttkeylost.Rows.Add();
                    dttkeylost.Rows[s]["date"] = dater.ToString();
                    dttkeylost.Rows[s]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttkeylost.Rows[s]["reciept"] = 0;
                    dttkeylost.Rows[s]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttkeylost.Rows[s]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));

                }

            }
            else
            {
                dat =objcls.yearmonthdate(txtDaycloseDate.Text);
                DateTime t3 = DateTime.Parse(dat);
                yy = t3.ToString("dd-MMM-yyyy");
                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd311.Parameters.AddWithValue("attribute", "adv_recieptno,alloc_no, key_penality, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd311.Parameters.AddWithValue("conditionv", "tv.dayend>='" + dat + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and liability_by='0' and key_penality>0  and return_key='0' and inmate_abscond='0'  ");
                DataTable dt11 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311 );
                int k = 0;

                OdbcDataAdapter da11 = new OdbcDataAdapter("select alloc_no, retdepamount  as key_penality ,tv.dayend,buildingname,bill_receiptno,roomno from m_room mr,m_sub_building msb, t_roomvacate tv ,t_roomallocation ta  where ta.alloc_id=tv.alloc_id and  inmate_abscond=1 and  remark='Key penality' and msb.build_id=mr.build_id and mr.room_id=ta.room_id and  tv.dayend>='" + dat + "'", conn);
                da11.Fill(dt11);

                for (int i = 0; i < dt11.Rows.Count; i++)
                {

                    DateTime dayend1 = DateTime.Parse(dt11.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt11.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt11.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt11.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt11.Rows[i]["roomno"].ToString();


                    if (Convert.ToInt32(dt11.Rows[i]["key_penality"]) > 0)
                    {

                        dttkeylost.Rows.Add();
                        dttkeylost.Rows[k]["date"] = dt11.Rows[i]["dayend"].ToString();
                        dttkeylost.Rows[k]["description"] = "Pay receipt against Bill  " + bill + " " + building;
                        dttkeylost.Rows[k]["reciept"] = dt11.Rows[i]["key_penality"].ToString();
                        dttkeylost.Rows[k]["payment"] = "";
                        dttkeylost.Rows[k]["balance"] = "";

                        total = total + Convert.ToInt32(dt11.Rows[i]["key_penality"]);
                        k++;


                    }

                }

                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dat + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='3'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1); 
                if (dtch1.Rows.Count > 0)
                {
                    dttkeylost.Rows.Add();
                    dttkeylost.Rows[k]["date"] = dtch1.Rows[0]["dayend"].ToString();
                    dttkeylost.Rows[k]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttkeylost.Rows[k]["reciept"] = 0;
                    dttkeylost.Rows[k]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttkeylost.Rows[k]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));

                }
            }
            DataTable dt = dttkeylost;
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "KeyLostLedger" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 70);
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            PdfPTable tablec = new PdfPTable(4);
            float[] colWidths23c = { 50, 50, 50, 50 };
            tablec.SetWidths(colWidths23c);

            page.strRptMode = "Receiptledger";
            PdfPCell cell = new PdfPCell(new Phrase("Key Lost Reciept Ledger", font12));
            cell.Colspan = 4;
            cell.MinimumHeight = 10;
            cell.Border = 1;
            cell.HorizontalAlignment = 1;
             tablec.AddCell(cell);

            PdfPCell cellc = new PdfPCell(new Phrase("Office name:", font9));
            cellc.Colspan = 1;
            cellc.Border = 0;
            cellc.HorizontalAlignment = 0;
             tablec.AddCell(cellc);

            PdfPCell cellv = new PdfPCell(new Phrase("Accommodation office", font9));
            cellv.Colspan = 1;
            cellv.Border = 0;
            cellv.HorizontalAlignment = 0;
            tablec.AddCell(cellv);

            PdfPCell celld = new PdfPCell(new Phrase("Description:", font9));
            celld.Colspan = 1;
            celld.Border = 0;
            celld.HorizontalAlignment = 0;
            tablec.AddCell(celld);

            PdfPCell cellf = new PdfPCell(new Phrase("Key Lost Charge Ledger", font9));
            cellf.Colspan = 1;
            cellf.Border = 0;
            cellf.HorizontalAlignment = 0;
           tablec.AddCell(cellf);

            PdfPCell cellbn = new PdfPCell(new Phrase("Budget_Head:", font9));
            cellbn.Colspan = 1;
            cellbn.Border = 0;
            cellbn.HorizontalAlignment = 0;
            tablec.AddCell(cellbn);

            PdfPCell cellnb = new PdfPCell(new Phrase("Accommodation Officer", font9));
            cellnb.Colspan = 1;
            cellnb.Border = 0;
            cellnb.HorizontalAlignment = 0;
            tablec.AddCell(cellnb);

            PdfPCell cellm = new PdfPCell(new Phrase("Date:", font9));
            cellm.Colspan = 1;
            cellm.Border = 0;
            cellm.HorizontalAlignment = 0;
            tablec.AddCell(cellm);

            PdfPCell cellbnn = new PdfPCell(new Phrase(yy.ToString(), font9));
            cellbnn.Colspan = 1;
            cellbnn.Border = 0;
            cellbnn.HorizontalAlignment = 0;
            tablec.AddCell(cellbnn);
            doc.Add(tablec);
            PdfPTable table = new PdfPTable(6);
            float[] colWidths23 = { 20, 30, 80, 20, 20, 20 };
            table.SetWidths(colWidths23);

            PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("No", font8)));

            cell1.Rowspan = 1;
            table.AddCell(cell1);

            PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
            cell2.Rowspan = 1;
            table.AddCell(cell2);

            PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Description", font8)));
            cell3.Colspan = 1;
            cell3.HorizontalAlignment = 1;
            table.AddCell(cell3);

            PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
            cell31.Rowspan = 1;
            table.AddCell(cell31);

            PdfPCell cell31c = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
            cell31c.Rowspan = 1;
            table.AddCell(cell31c);

            PdfPCell cell31cc = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
            cell31cc.Rowspan = 1;
            table.AddCell(cell31cc);

            doc.Add(table);

            int ii = 0;
            int slno = 0;
            foreach (DataRow dr in dt.Rows)
            {
                slno = slno + 1;
                if (ii > 35)
                {
                    ii = 0;
                    doc.NewPage();
                    PdfPTable table1 = new PdfPTable(6);

                    float[] colWidths231 = { 20, 30, 80, 20, 20, 20 };
                    table1.SetWidths(colWidths23);

                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk("No", font8)));

                    cell11.Rowspan = 1;
                    table1.AddCell(cell11);

                    PdfPCell cell21 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                    cell21.Rowspan = 1;
                    table1.AddCell(cell21);

                    PdfPCell cell3v = new PdfPCell(new Phrase(new Chunk("Description", font8)));
                    cell3v.Colspan = 1;
                    table1.AddCell(cell3v);

                    PdfPCell cell311 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                    cell311.Rowspan = 1;
                    table1.AddCell(cell311);


                    PdfPCell cell31c1 = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
                    cell31c1.Rowspan = 1;
                    table1.AddCell(cell31c1);

                    PdfPCell cell31cc1 = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                    cell31cc1.Rowspan = 1;
                    table1.AddCell(cell31cc1);

                    doc.Add(table1);

                }

                PdfPTable table2 = new PdfPTable(6);

                float[] colWidths2312 = { 20, 30, 80, 20, 20, 20 };
                table2.SetWidths(colWidths2312);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                table2.AddCell(cell4);
                DateTime datee = DateTime.Parse(dr["date"].ToString());
                string datee1 = datee.ToString("dd MMM");

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(datee1.ToString(), font7)));
                table2.AddCell(cell5);
                PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["description"].ToString(), font7)));
                table2.AddCell(cell6);
                PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk(dr["reciept"].ToString(), font7)));

                table2.AddCell(cell611d);
              
                PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(dr["payment"].ToString(), font7)));
                table2.AddCell(cell61);


                PdfPCell cell611 = new PdfPCell(new Phrase(new Chunk(dr["balance"].ToString(), font7)));
                table2.AddCell(cell611);

                ii++;
                doc.Add(table2);
            }
            if (dt.Rows.Count > 0)
            {
                PdfPTable table2f = new PdfPTable(6);

                float[] colWidths2312 = { 20, 30, 80, 20, 20, 20 };
                table2f.SetWidths(colWidths2312);
                PdfPCell cell611ds = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611ds.Colspan = 1;
                table2f.AddCell(cell611ds);


                PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611d.Colspan = 1;
                table2f.AddCell(cell611d);


                PdfPCell cell6141ds = new PdfPCell(new Phrase(new Chunk("Total", font8)));
                cell6141ds.Colspan = 1;
                table2f.AddCell(cell6141ds);

                PdfPCell cell611d11 = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                cell611d11.Colspan = 1;
                table2f.AddCell(cell611d11);

                PdfPCell cell611d1 = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611d1.Colspan = 1;
                table2f.AddCell(cell611d1);
                doc.Add(table2f);
                PdfPCell cell611d1x = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                cell611d1x.Colspan = 1;
                table2f.AddCell(cell611d1x);
                              

                PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                cellfb.PaddingLeft = 20;
                cellfb.Colspan = 6;
                cellfb.MinimumHeight = 30;
                cellfb.Border = 0;
                table2f.AddCell(cellfb);

                PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1b.PaddingLeft = 20;
                cellf1b.Colspan = 6;
                cellf1b.Border = 0;
                table2f.AddCell(cellf1b);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_MIDDLE;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 6;
                table2f.AddCell(cellh2);
                doc.Add(table2f);
            }


            doc.Close();
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Key Penality Ledger";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);


        }


        catch
        {
            messagedisplay("Problem found during report taking","warn28");
         
        } conn.Close();
    }
    # endregion

    # region Day Wise Vacated Rooms
    protected void lnkDayWiseVacatedRooms_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }

        DataTable dt = new DataTable();
        int allocid = Convert.ToInt32(Session["allocid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        int s = 0;
        DateTime tim1 = DateTime.Now;
        string kk = tim1.ToString("yyyy/MM/dd");
        string yy = tim1.ToString("dd/MM/yyyy");
        yy = tim1.ToString("dd MMM  yyyy");
        try
        {
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "TodaysVacatingRooms" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;
            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            PdfPTable table = new PdfPTable(4);
            float[] colWidths23 = { 30, 60, 40, 30 };
            table.SetWidths(colWidths23);
            page.strRptMode="vacatedontheday";
            if (txtFromDate.Text == "")
            {

                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "buildingname,roomno,actualvecdate");
                cmd31.Parameters.AddWithValue("conditionv", "date(actualvecdate)=curdate()  and mr.room_id=ta.room_id and msb.build_id=mr.build_id and tv.alloc_id=ta.alloc_id");
                dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
              
                PdfPCell cell = new PdfPCell(new Phrase("LIST OF ROOMS VACATED ON " + yy, font12));
                cell.Colspan = 4;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                table.AddCell(cell);

            }
            else
            {
              string datef =objcls.yearmonthdate(txtFromDate.Text);
              DateTime dtdate = DateTime.Parse(datef);
              string  datef1=dtdate.ToString("dd MMM yyyy");
              string datef2 = dtdate.ToString("yyyy-MM-dd");

                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd311.Parameters.AddWithValue("attribute", "buildingname,roomno,actualvecdate");
                cmd311.Parameters.AddWithValue("conditionv", "date(actualvecdate)='"+datef+"'  and mr.room_id=ta.room_id and msb.build_id=mr.build_id and tv.alloc_id=ta.alloc_id");
                dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);
               

                PdfPCell cell = new PdfPCell(new Phrase("LIST OF ROOMS VACATED ON " + datef1, font12));
                cell.Colspan = 4;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                table.AddCell(cell);
            }
          
         
            PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
            table.AddCell(cell1);

            PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Building name", font8)));
            table.AddCell(cell2);

            PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Roomno", font8)));
            table.AddCell(cell3);

            PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Check Out Time", font8)));
            table.AddCell(cell31);
            doc.Add(table);

            int i = 0;
            int slno = 0;
            foreach (DataRow dr in dt.Rows)
            {
                slno = slno + 1;
                if (i > 39)
                {
                    i = 0;
                    doc.NewPage();
                    PdfPTable table1 = new PdfPTable(4);

                    float[] colWidths231 = { 30, 60, 40, 30 };
                    table1.SetWidths(colWidths23);

                    PdfPCell cell1d = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                    table1.AddCell(cell1d);

                    PdfPCell cell2d = new PdfPCell(new Phrase(new Chunk("Building name", font8)));
                    table1.AddCell(cell2d);

                    PdfPCell cell3d = new PdfPCell(new Phrase(new Chunk("Roomno", font8)));
                    table1.AddCell(cell3d);
                    PdfPCell cell3d1 = new PdfPCell(new Phrase(new Chunk("Check Out Time", font8)));
                    table1.AddCell(cell3d1);
                    doc.Add(table1);


                }

                PdfPTable table2 = new PdfPTable(4);

                float[] colWidths2312 = { 30, 60, 40, 30 };
                table2.SetWidths(colWidths2312);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                table2.AddCell(cell4);

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(dr["buildingname"].ToString(), font7)));
                table2.AddCell(cell5);
                PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString(), font7)));
                table2.AddCell(cell6);
                DateTime dateds = DateTime.Parse(dr["actualvecdate"].ToString());

                string dated1 = dateds.ToString("hh:mm tt");
                PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(dated1.ToString(), font7)));
                table2.AddCell(cell61);
                i++;
                doc.Add(table2);
            }
            PdfPTable table4 = new PdfPTable(4);
            PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
            cellf.HorizontalAlignment = Element.ALIGN_LEFT;
            cellf.PaddingLeft = 20;
            cellf.MinimumHeight = 20;
            cellf.Colspan = 4;
            cellf.Border = 0;
            table4.AddCell(cellf);

            PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
            cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
            cellf1.PaddingLeft = 20;
            cellf1.Border = 0;
            cellf1.Colspan = 4;
            table4.AddCell(cellf1);

            PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom", font8)));
            cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
            cellh2.PaddingLeft = 20;
            cellh2.Border = 0;
            cellh2.Colspan = 4;
            table4.AddCell(cellh2);
            doc.Add(table4);
            doc.Close();
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=List of rooms vacated on the day report";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);
        }

        catch
        {
            messagedisplay("Problem found during report taking","warn28");
         
        } conn.Close();
    }
    # endregion

    # region OverStay Ledger
    protected void lnkOverStayLedger_Click(object sender, EventArgs e)
    {
         if (conn.State == ConnectionState.Closed)
         {
            conn.ConnectionString = strConnection;
            conn.Open();


         }

        Session["prev"] = "";
        int s = 0;
        int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
        DataTable dttoverstay = new DataTable();
        dttoverstay.Columns.Clear();
        dttoverstay.Columns.Add("date", System.Type.GetType("System.String"));
        dttoverstay.Columns.Add("description", System.Type.GetType("System.String"));
        dttoverstay.Columns.Add("reciept", System.Type.GetType("System.String"));
        dttoverstay.Columns.Add("payment", System.Type.GetType("System.String"));
        dttoverstay.Columns.Add("balance", System.Type.GetType("System.String"));

        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        int total = 0;
        int allocid = Convert.ToInt32(Session["allocid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dayclosed = dts.ToString("dd MMM yyyy");
        DateTime tim1 = DateTime.Now;
        string kk = tim1.ToString("yyyy/MM/dd");
        string yy = tim1.ToString("dd/MM/yyyy");
        yy = tim1.ToString("dd MMM  yyyy");
        try
        {
           
            if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
             {
                string fromdate =objcls.yearmonthdate(txtFromDate.Text);
                string todate =objcls.yearmonthdate(txtToDate.Text);
                DateTime t1 = DateTime.Parse(fromdate);
                DateTime t2 = DateTime.Parse(todate);
                string t11 = t1.ToString("dd MMM");
                string t22 = t2.ToString("dd MMM");
                if (t1 == t2)
                {
                    yy = t11;

                }
                else
                {
                    yy = t11 + "-" + t22;

                }

                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "adv_recieptno,alloc_no,tv.roomrent, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id    and tv.roomrent>0 and inmate_abscond='0' ");
                DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
              
                int k = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    string prevday = "";
                    if (i > 0)
                    {
                        prevday = dt1.Rows[i - 1]["dayend"].ToString();
                        DateTime prevday1 = DateTime.Parse(dt1.Rows[i - 1]["dayend"].ToString());
                        string prevday11 = prevday1.ToString("yyyy-MM-dd");
                        DateTime prevday2 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                        string prevday22 = prevday2.ToString("yyyy-MM-dd");
                        Session["prev"] = prevday22;
                        if (prevday2 > prevday1)
                        {
                            try
                            {

                                OdbcCommand cmdch = new OdbcCommand();
                                cmdch.CommandType = CommandType.StoredProcedure;
                                cmdch.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                                cmdch.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno");
                                cmdch.Parameters.AddWithValue("conditionv", "dayend='" + prevday11 + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='5'");
                                DataTable dtch = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch);
                                if (dtch.Rows.Count > 0)
                                {
                                    dttoverstay.Rows.Add();
                                    dttoverstay.Rows[k]["date"] = prevday11;
                                    dttoverstay.Rows[k]["description"] = "Bank Remmittance Chl.no  " + dtch.Rows[0]["chelanno"].ToString();
                                    dttoverstay.Rows[k]["reciept"] = 0;
                                    dttoverstay.Rows[k]["payment"] = Convert.ToInt32(dtch.Rows[0]["amount_paid"]);
                                    dttoverstay.Rows[k]["balance"] = Convert.ToInt32(dtch.Rows[0]["balance"]);
                                    total = total - Convert.ToInt32(Convert.ToInt32(dtch.Rows[0]["amount_paid"]));
                                    k++;

                                }

                            }
                            catch
                            {


                            }

                        }

                    }

                    DateTime dayend1 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt1.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt1.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt1.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt1.Rows[i]["roomno"].ToString();


                    if (Convert.ToInt32(dt1.Rows[i]["roomrent"]) > 0)
                    {

                        dttoverstay.Rows.Add();
                        dttoverstay.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttoverstay.Rows[k]["description"] = " Payment Charge againt Bill  " + bill + " " + building;
                        dttoverstay.Rows[k]["reciept"] = dt1.Rows[i]["roomrent"].ToString();
                        dttoverstay.Rows[k]["payment"] = "";
                        dttoverstay.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt1.Rows[i]["roomrent"]);
                        k++;

                    }

                    s = k;


                }

                string dater = Convert.ToString(Session["prev"]);
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dater + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='5'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
      
                if (dtch1.Rows.Count > 0)
                {
                    dttoverstay.Rows.Add();
                    dttoverstay.Rows[s]["date"] = dater.ToString();
                    dttoverstay.Rows[s]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttoverstay.Rows[s]["reciept"] = 0;
                    dttoverstay.Rows[s]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttoverstay.Rows[s]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                }

            }
            else
            {


                dat =objcls.yearmonthdate(txtDaycloseDate.Text);
                DateTime t3 = DateTime.Parse(dat);

                yy = t3.ToString("dd-MMM-yyyy");

                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd311.Parameters.AddWithValue("attribute", " adv_recieptno, alloc_no,tv.roomrent, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd311.Parameters.AddWithValue("conditionv", "tv.dayend>='" + dat + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id   and tv.roomrent>0 and inmate_abscond='0'");
                DataTable dt11 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);
             
                int k = 0;
                for (int i = 0; i < dt11.Rows.Count; i++)
                {


                    DateTime dayend1 = DateTime.Parse(dt11.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt11.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt11.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt11.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt11.Rows[i]["roomno"].ToString();


                    if (Convert.ToInt32(dt11.Rows[i]["roomrent"]) > 0)
                    {

                        dttoverstay.Rows.Add();
                        dttoverstay.Rows[k]["date"] = dt11.Rows[i]["dayend"].ToString();
                        dttoverstay.Rows[k]["description"] = "Pay receipt against Bill  " + bill + " " + building;
                        dttoverstay.Rows[k]["reciept"] = dt11.Rows[i]["roomrent"].ToString();
                        dttoverstay.Rows[k]["payment"] = "";
                        dttoverstay.Rows[k]["balance"] = "";

                        total = total + Convert.ToInt32(dt11.Rows[i]["roomrent"]);
                        k++;


                    }

                }
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dat + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='5'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
               if (dtch1.Rows.Count > 0)
                {
                    dttoverstay.Rows.Add();
                    dttoverstay.Rows[k]["date"] = dtch1.Rows[0]["dayend"].ToString();
                    dttoverstay.Rows[k]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttoverstay.Rows[k]["reciept"] = 0;
                    dttoverstay.Rows[k]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttoverstay.Rows[k]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));

                }

            }

            DataTable dt = dttoverstay;
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "RoomOverStayLedger" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;
            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 70);
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            PdfPTable tablec = new PdfPTable(4);
            float[] colWidths23c = { 50, 50, 50, 50 };
            tablec.SetWidths(colWidths23c);
            page.strRptMode = "Receiptledger";

            PdfPCell cell = new PdfPCell(new Phrase("Extended Stay  Receipt Ledger", font12));
            cell.Colspan = 4;
            cell.MinimumHeight = 10;
            cell.Border = 1;
            cell.HorizontalAlignment = 1;
            tablec.AddCell(cell);

            PdfPCell cellc = new PdfPCell(new Phrase("Office name:", font9));
            cellc.Colspan = 1;
            cellc.Border = 0;
            cellc.HorizontalAlignment = 0;
            tablec.AddCell(cellc);

            PdfPCell cellv = new PdfPCell(new Phrase("Accommodation office", font9));
            cellv.Colspan = 1;
            cellv.Border = 0;
            cellv.HorizontalAlignment = 0;
            tablec.AddCell(cellv);

            PdfPCell celld = new PdfPCell(new Phrase("Description:", font9));
            celld.Colspan = 1;
            celld.Border = 0;
            celld.HorizontalAlignment = 0;
            tablec.AddCell(celld);

            PdfPCell cellf = new PdfPCell(new Phrase("Extended Stay Charge Ledger", font9));
            cellf.Colspan = 1;
            cellf.Border = 0;
            cellf.HorizontalAlignment = 0;
            tablec.AddCell(cellf);


            PdfPCell cellbn = new PdfPCell(new Phrase("Budget_Head:", font9));
            cellbn.Colspan = 1;
            cellbn.Border = 0;
            cellbn.HorizontalAlignment = 0;
            tablec.AddCell(cellbn);

            PdfPCell cellnb = new PdfPCell(new Phrase("Accommodation Officer", font9));
            cellnb.Colspan = 1;
            cellnb.Border = 0;
            cellnb.HorizontalAlignment = 0;
            tablec.AddCell(cellnb);

            PdfPCell cellm = new PdfPCell(new Phrase("Date:", font9));
            cellm.Colspan = 1;
            cellm.Border = 0;
            cellm.HorizontalAlignment = 0;
            tablec.AddCell(cellm);

            PdfPCell cellbnn = new PdfPCell(new Phrase(yy.ToString(), font9));
            cellbnn.Colspan = 1;
            cellbnn.Border = 0;
            cellbnn.HorizontalAlignment = 0;
            //0=Left, 1=Centre, 2=Right
            tablec.AddCell(cellbnn);
            doc.Add(tablec);
            PdfPTable table = new PdfPTable(6);
            float[] colWidths23 = { 30, 30, 80, 30, 30, 20 };
            table.SetWidths(colWidths23);
            
            PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("No", font8)));

            cell1.Rowspan = 1;
            table.AddCell(cell1);

            PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
            cell2.Rowspan = 1;
            table.AddCell(cell2);

            PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Description", font8)));
            cell3.Colspan = 1;
            cell3.HorizontalAlignment = 1;
            table.AddCell(cell3);

            PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
            cell31.Rowspan = 1;
            table.AddCell(cell31);
            
            PdfPCell cell31c = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
            cell31c.Rowspan = 1;
            table.AddCell(cell31c);

            PdfPCell cell31cc = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
            cell31cc.Rowspan = 1;
            table.AddCell(cell31cc);


            doc.Add(table);

            int ii = 0;
            int slno = 0;
            foreach (DataRow dr in dt.Rows)
            {
                slno = slno + 1;
                if (ii > 35)
                {
                    ii = 0;
                    doc.NewPage();
                    PdfPTable table1 = new PdfPTable(6);
                    float[] colWidths231 = { 30, 30, 80, 30, 30, 20 };
                    table1.SetWidths(colWidths23);

                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk("No", font8)));
                    cell11.Rowspan = 1;
                    table1.AddCell(cell11);

                    PdfPCell cell21 = new PdfPCell(new Phrase(new Chunk("Date", font8)));
                    cell21.Rowspan = 1;
                    table1.AddCell(cell21);

                    PdfPCell cell3v = new PdfPCell(new Phrase(new Chunk("Description", font8)));
                    cell3v.Colspan = 1;
                    table1.AddCell(cell3v);

                    PdfPCell cell311 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                    cell311.Rowspan = 1;
                    table1.AddCell(cell311);

                    PdfPCell cell31c1 = new PdfPCell(new Phrase(new Chunk("Payment", font8)));
                    cell31c1.Rowspan = 1;
                    table1.AddCell(cell31c1);

                    PdfPCell cell31cc1 = new PdfPCell(new Phrase(new Chunk("Balance", font8)));
                    cell31cc1.Rowspan = 1;
                    table1.AddCell(cell31cc1);
                    doc.Add(table1);


                }

                PdfPTable table2 = new PdfPTable(6);
                float[] colWidths2312 = { 30, 30, 80, 30, 30, 20 };
                table2.SetWidths(colWidths2312);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                table2.AddCell(cell4);
                DateTime datee = DateTime.Parse(dr["date"].ToString());
                string datee1 = datee.ToString("dd MMM");

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(datee1.ToString(), font7)));
                table2.AddCell(cell5);
                PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["description"].ToString(), font7)));
                table2.AddCell(cell6);
            
                PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk(dr["reciept"].ToString(), font7)));
                table2.AddCell(cell611d);
              
                PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(dr["payment"].ToString(), font7)));
                table2.AddCell(cell61);
             
                PdfPCell cell611 = new PdfPCell(new Phrase(new Chunk(dr["balance"].ToString(), font7)));
                table2.AddCell(cell611);

                ii++;
                doc.Add(table2);
            }
            if (dt.Rows.Count > 0)
            {
                PdfPTable table2f = new PdfPTable(6);

                float[] colWidths2312 = { 30, 30, 80, 30, 30, 20 };
                table2f.SetWidths(colWidths2312);
                PdfPCell cell611ds = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611ds.Colspan = 1;
                table2f.AddCell(cell611ds);

                PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611d.Colspan = 1;
                table2f.AddCell(cell611d);

                PdfPCell cell6141ds = new PdfPCell(new Phrase(new Chunk("Total", font8)));
                cell6141ds.Colspan = 1;
                table2f.AddCell(cell6141ds);

                PdfPCell cell611d11 = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                cell611d11.Colspan = 1;
                table2f.AddCell(cell611d11);

                PdfPCell cell611d1 = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell611d1.Colspan = 1;
                table2f.AddCell(cell611d1);
                doc.Add(table2f);
                PdfPCell cell611d1x = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                cell611d1x.Colspan = 1;
                table2f.AddCell(cell611d1x);

                PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                cellfb.PaddingLeft = 20;
                cellfb.Colspan = 6;
                cellfb.MinimumHeight = 30;
                cellfb.Border = 0;
                table2f.AddCell(cellfb);

                PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1b.PaddingLeft = 20;
                cellf1b.Colspan = 6;
                cellf1b.Border = 0;
                table2f.AddCell(cellf1b);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_MIDDLE;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 6;
                table2f.AddCell(cellh2);
                doc.Add(table2f);

            }

            doc.Close();
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Extended Stay Ledger Report";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);
        }


        catch
        {
          messagedisplay("Problem found during report taking","warn28");
          
        } conn.Close();
    }
    # endregion

    # region Allocation Number Increment and update Inventory
    public void AllocationRecieptIncrement()
    {
        int itemid = 0;
        //if (chkOldReceipt.Checked == true)
        //{
        //    itemid = 2;

        //}
        //else itemid = 1;
        itemid = 1;
        int counter = Convert.ToInt32(Session["counterid"]);
        OdbcCommand cmd205 = new OdbcCommand();
        cmd205.CommandType = CommandType.StoredProcedure;
        cmd205.Parameters.AddWithValue("tblname", "t_pass_receipt");
        cmd205.Parameters.AddWithValue("attribute", "balance");
        cmd205.Parameters.AddWithValue("conditionv", "counter_id=" + counter + " and item_id="+itemid+"");

        DataTable dtt205 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd205);
      
        if (dtt205.Rows.Count > 0)
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }

            int c = Convert.ToInt32(dtt205.Rows[0]["balance"]);
            c = c - 1;
            OdbcCommand cccmdddd = new OdbcCommand("update t_pass_receipt  set balance=" + c + " where item_id=" + itemid + " and counter_id=" + int.Parse(Session["counterid"].ToString()) + " ", conn);
            cccmdddd.ExecuteNonQuery();
            int k = Convert.ToInt32(txtAllocRecNo.Text);
            k++;
            txtAllocRecNo.Text = k.ToString();

        }




    }
    # endregion
    
    # region Transaction(Allocation) Number Load
    public void AllocationNumberFind()
    {
        # region Allocation Number calculation

        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();

        }
        string dayendd = Session["dayend"].ToString();
        OdbcCommand cmd2051 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmd2051.CommandType = CommandType.StoredProcedure;
        cmd2051.Parameters.AddWithValue("tblname", "t_roomallocation");
        cmd2051.Parameters.AddWithValue("attribute", "count(*) as count1");
        cmd2051.Parameters.AddWithValue("conditionv", "dayend='" + dayendd + "'  ");
        OdbcDataAdapter dacnt2051 = new OdbcDataAdapter(cmd2051);
        DataTable dtt2051 = new DataTable();
        dacnt2051.Fill(dtt2051);

        int allocno = 0;
        if (dtt2051.Rows.Count > 0)
        {
            if (Convert.IsDBNull(dtt2051.Rows[0]["count1"]) == false)
            {
                allocno = Convert.ToInt32(dtt2051.Rows[0]["count1"]);
               
            }
            else
            {
                allocno = 0;

            }
        }
        else
        {
            allocno = 0;

        }
        DateTime day1 = DateTime.Parse(dayendd.ToString());
        string day = day1.ToString("dd");
        int day2 = Convert.ToInt32(day);
        string allocno1 = allocno + "-" + day;
        txtAllocNumber.Text = allocno1.ToString();
        # endregion

    }
    # endregion

    # region Allocation Rec No change

    protected void txtAllocRecNo_TextChanged(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();

        }
        int counter = Convert.ToInt32(Session["counterid"]);

        string plain="";
        
        if (plain == "no")
        {
            try
            {
                OdbcCommand cmd712 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                cmd712.CommandType = CommandType.StoredProcedure;
                cmd712.Parameters.AddWithValue("tblname", "t_roomallocation");
                cmd712.Parameters.AddWithValue("attribute", "adv_recieptno");
                cmd712.Parameters.AddWithValue("conditionv", "adv_recieptno=" + int.Parse(txtAllocRecNo.Text) + " is_plainprint='" + plain + "' ");
                OdbcDataAdapter dacnt712 = new OdbcDataAdapter(cmd712);
                DataTable dtt712 = new DataTable();
                dacnt712.Fill(dtt712);
                if (dtt712.Rows.Count > 0)
                {
                    lblHead.Text = "Tsunami ARMS - Message";
                    messagedisplay("The receipt is already extists", "v1");
                    this.ScriptManager1.SetFocus(txtAllocRecNo);
                    return;
                }
            }

            catch { }

            
            OdbcCommand cmd112 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd112.CommandType = CommandType.StoredProcedure;
            cmd112.Parameters.AddWithValue("tblname", "t_roomallocation");
            cmd112.Parameters.AddWithValue("attribute", "adv_recieptno");
            cmd112.Parameters.AddWithValue("conditionv", " t_roomallocation.alloc_id = (SELECT MAX(alloc_id)  FROM t_roomallocation WHERE roomstatus<>'null' and counter_id=" + counter + "  and is_plainprint='" + plain + "' ) order by alloc_id desc limit 0,1");
            OdbcDataAdapter dacnt112 = new OdbcDataAdapter(cmd112);
            DataTable dtt112 = new DataTable();
            dacnt112.Fill(dtt112);
            if (dtt112.Rows.Count > 0)
            {
                int g = int.Parse(dtt112.Rows[0]["adv_recieptno"].ToString());
                int s = int.Parse(txtAllocRecNo.Text);
                int diffe = s - g;

                if (diffe > 1)
                {
                    Session["startno"] = g;
                    Session["diffe"] = diffe.ToString();
                    lblMsg.Text = diffe - 1 + " Receipt is missing---Are you sure";
                    ViewState["action"] = "missingallocrec";
                    pnlOk.Visible = false;
                    pnlYesNo.Visible = true;
                    ModalPopupExtender1.Show();
                    this.ScriptManager1.SetFocus(btnYes);
                }
            }
        }


    }
    # endregion

    # region Inmates Absconding List
    protected void lnkInmatesabscondlist_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        try
        {
            int allocid = Convert.ToInt32(Session["allocid"]);

            int counter = Convert.ToInt32(Session["counterid"]);
            DataTable dt;

            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string f2 = dts.ToString("dd/MM/yyyy");
            f2 = dts.ToString("dd MMM");
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "inmatesabscondinglist" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 5, 60, 50);
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            page.strRptMode = "inmates";
            PdfPTable table = new PdfPTable(11);
            if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
            {


                string aa =objcls.yearmonthdate(txtFromDate.Text);
                string bb =objcls.yearmonthdate(txtToDate.Text);

                OdbcCommand cmd3s1 = new OdbcCommand();
                cmd3s1.CommandType = CommandType.StoredProcedure;
                cmd3s1.Parameters.AddWithValue("tblname", "t_roomvacate rv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd3s1.Parameters.AddWithValue("attribute", "adv_recieptno,swaminame,place,buildingname,roomno,allocdate,actualvecdate,numberofunit,retdepamount,rv.roomrent,rv.key_penality,damage_penality");
                cmd3s1.Parameters.AddWithValue("conditionv", " rv.dayend<='" + bb + "'  and rv.dayend>='" + aa + "' and inmate_abscond='1' and msb.build_id=mr.build_id and mr.room_id=ta.room_id  and rv.alloc_id=ta.alloc_id");


                PdfPCell celld = new PdfPCell(new Phrase("Inmates Absconding list From  " + txtFromDate.Text.ToString() + "  TO " + txtToDate.Text.ToString(), font12));
                celld.Colspan = 14;
                celld.HorizontalAlignment = 1;
                celld.Border = 1;
                table.AddCell(celld);
                doc.Add(table);
              
                dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd3s1);
            

              
            }
            else 
            {
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate rv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", " adv_recieptno,swaminame,place,buildingname,roomno,allocdate,actualvecdate,retdepamount,rv.roomrent,rv.damage_penality,rv.key_penality");
                cmd31.Parameters.AddWithValue("conditionv", " rv.dayend='" + dat + "' and  inmate_abscond='1' and  msb.build_id=mr.build_id and mr.room_id=ta.room_id  and rv.alloc_id=ta.alloc_id");
                dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
             
                PdfPCell cell = new PdfPCell(new Phrase("Inmates Absconded list  on  " + f2, font12));
                cell.Colspan = 13;
                cell.HorizontalAlignment = 1;
                cell.Border = 1;
                
                table.AddCell(cell);
                doc.Add(table);
            
            }

            PdfPTable table1 = new PdfPTable(11);

            PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
            table1.AddCell(cell1);

            PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("AdResno", font8)));
            table1.AddCell(cell2);

            PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Swaminame", font8)));
            table1.AddCell(cell3);

            PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk("Place", font8)));
            table1.AddCell(cell4);

            PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk("Building & roomno", font8)));
            table1.AddCell(cell5);

            PdfPCell cell7 = new PdfPCell(new Phrase(new Chunk("AllocDate", font8)));
            table1.AddCell(cell7);


            PdfPCell cell9 = new PdfPCell(new Phrase(new Chunk("VacatedDate", font8)));
            table1.AddCell(cell9);


            PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk("Depositreturn", font8)));
            table1.AddCell(cell13);
            PdfPCell cell14 = new PdfPCell(new Phrase(new Chunk("Overstay Rent", font8)));
            table1.AddCell(cell14);
            PdfPCell cell15 = new PdfPCell(new Phrase(new Chunk("Key Penality", font8)));
            table1.AddCell(cell15);

            PdfPCell cell16 = new PdfPCell(new Phrase(new Chunk("Damage penality", font8)));
            table1.AddCell(cell16);
         
            doc.Add(table1);

            int i = 0;
            int slno = 0;
            foreach (DataRow dr in dt.Rows)
            {
                slno = slno + 1;


                if (i > 20)
                {

                    i = 0;

                    doc.NewPage();
                    PdfPTable table11 = new PdfPTable(11);


                    PdfPCell cell11q = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                    table11.AddCell(cell11q);

                    PdfPCell cell21 = new PdfPCell(new Phrase(new Chunk("Advance Resno", font8)));
                    table11.AddCell(cell21);

                    PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Swaminame", font8)));
                    table11.AddCell(cell31);

                    PdfPCell cell41 = new PdfPCell(new Phrase(new Chunk("Place", font8)));
                    table11.AddCell(cell41);

                    PdfPCell cell51 = new PdfPCell(new Phrase(new Chunk("Building & roomno", font8)));
                    table11.AddCell(cell51);

                    
                    PdfPCell cell71 = new PdfPCell(new Phrase(new Chunk("AllocDate", font8)));
                    table11.AddCell(cell71);

                 
                    PdfPCell cell91 = new PdfPCell(new Phrase(new Chunk("VacatedDate", font8)));
                    table11.AddCell(cell91);
                  
                    PdfPCell cell131 = new PdfPCell(new Phrase(new Chunk("Depositreturn", font8)));
                    table11.AddCell(cell131);
                    PdfPCell cell141 = new PdfPCell(new Phrase(new Chunk("Overstay rent", font8)));
                    table11.AddCell(cell141);
                    PdfPCell cell151 = new PdfPCell(new Phrase(new Chunk("Key penality", font8)));
                    table11.AddCell(cell151);

                    PdfPCell cell161 = new PdfPCell(new Phrase(new Chunk("Damage Penality", font8)));
                    table11.AddCell(cell161);

                    doc.Add(table1);


                }
                PdfPTable table2 = new PdfPTable(11);
                PdfPCell cell18 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                table2.AddCell(cell18);

                PdfPCell cell19 = new PdfPCell(new Phrase(new Chunk(dr["adv_recieptno"].ToString(), font7)));
                table2.AddCell(cell19);
                PdfPCell cell20 = new PdfPCell(new Phrase(new Chunk(dr["swaminame"].ToString(), font7)));
                table2.AddCell(cell20);

                PdfPCell cell21w = new PdfPCell(new Phrase(new Chunk(dr["place"].ToString(), font7)));
                table2.AddCell(cell21w);

                PdfPCell cell22 = new PdfPCell(new Phrase(new Chunk(dr["buildingname"].ToString() + "," + dr["roomno"].ToString(), font7)));
                table2.AddCell(cell22);

                 DateTime dt5 = DateTime.Parse(dr["allocdate"].ToString());
                string date1 = dt5.ToString("dd-MM-yyyy hh:mm tt");

                PdfPCell cell24 = new PdfPCell(new Phrase(new Chunk(date1, font7)));
                table2.AddCell(cell24);
              
                DateTime dt7 = DateTime.Parse(dr["actualvecdate"].ToString());
                string date2 = dt7.ToString("dd-MM-yyyy hh:mm tt");

                PdfPCell cell26 = new PdfPCell(new Phrase(new Chunk(date2, font7)));
                table2.AddCell(cell26);
            
                PdfPCell cell30 = new PdfPCell(new Phrase(new Chunk(dr["retdepamount"].ToString(), font7)));
                table2.AddCell(cell30);

                PdfPCell cell31g = new PdfPCell(new Phrase(new Chunk(dr["roomrent"].ToString(), font7)));
                table2.AddCell(cell31g);
                PdfPCell cell32g = new PdfPCell(new Phrase(new Chunk(dr["key_penality"].ToString(), font7)));
                table2.AddCell(cell32g);

                PdfPCell cell33g = new PdfPCell(new Phrase(new Chunk(dr["damage_penality"].ToString(), font7)));
                table2.AddCell(cell33g);

                doc.Add(table2);
            }

            PdfPTable table4 = new PdfPTable(11);
            PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
            cellf.HorizontalAlignment = Element.ALIGN_LEFT;
            cellf.PaddingLeft = 20;
            cellf.MinimumHeight = 20;
            cellf.Colspan = 11;
            cellf.Border = 0;
            table4.AddCell(cellf);

            PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
            cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
            cellf1.PaddingLeft = 20;
            cellf1.Border = 0;
            cellf1.Colspan = 11;
            table4.AddCell(cellf1);

            PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom", font8)));
            cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
            cellh2.PaddingLeft = 20;
            cellh2.Border = 0;
            cellh2.Colspan = 11;
            table4.AddCell(cellh2);

            doc.Add(table4);

            doc.Close();
        
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Transaction report on printer on";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);

        }
        catch
        {

            messagedisplay("problem found", "aa");

        }


        conn.Close();
    }

    # endregion

    # region Update Key Inventory

    public void UpdateKeyInventory()
    {
        int  keyid=0;

        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }


        # region Decrementing Key Quantity


        OdbcCommand cmd2051 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmd2051.CommandType = CommandType.StoredProcedure;
        cmd2051.Parameters.AddWithValue("tblname", "m_sub_item");
        cmd2051.Parameters.AddWithValue("attribute", "item_id");
        cmd2051.Parameters.AddWithValue("conditionv", "  itemname='Key' ");
        cmd2051.Transaction = odbTrans;
        OdbcDataAdapter dacnt2051 = new OdbcDataAdapter(cmd2051);
        DataTable dtt2051 = new DataTable();
        dacnt2051.Fill(dtt2051);
        if (dtt2051.Rows.Count > 0)
        {
            keyid = Convert.ToInt32(dtt2051.Rows[0]["item_id"]);
          
        }

        int roomid = Convert.ToInt32(Session["roomid"]);
        OdbcCommand cmd20511 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmd20511.CommandType = CommandType.StoredProcedure;
        cmd20511.Parameters.AddWithValue("tblname", "t_roomresource tr,t_roomresource_items tri");
        cmd20511.Parameters.AddWithValue("attribute", "quantity,tri.resource_id");
        cmd20511.Parameters.AddWithValue("conditionv", " room_id="+roomid+" and   item_id="+keyid+" and  tri.resource_id=tr.resource_id");
        cmd20511.Transaction = odbTrans;
        OdbcDataAdapter dacnt20511 = new OdbcDataAdapter(cmd20511);
        DataTable dtt20511 = new DataTable();
        dacnt20511.Fill(dtt20511);
        if (dtt20511.Rows.Count > 0)
        {

            int quantity = Convert.ToInt32(dtt20511.Rows[0]["quantity"]);
            quantity--;
            int resourceid = Convert.ToInt32(dtt20511.Rows[0]["resource_id"]);
            OdbcCommand cmd826 = new OdbcCommand("call updatedata(?,?,?)", conn);
            cmd826.CommandType = CommandType.StoredProcedure;
            cmd826.Parameters.AddWithValue("tablename", "t_roomresource_items ");
            cmd826.Parameters.AddWithValue("valu", "quantity="+quantity+"");
            cmd826.Parameters.AddWithValue("convariable", "item_id=" + keyid + " and  resource_id ="+resourceid+"");
            cmd826.Transaction = odbTrans;
            cmd826.ExecuteNonQuery();




        }

        # endregion

        int counter = Convert.ToInt32(Session["counterid"]);        
        string username=Session["username"].ToString();
    
        #region Request

        DateTime datenow = DateTime.Now;
        string f22 = datenow.ToString("dd/MM/yyyy");
        string datetoday =objcls.yearmonthdate(f22);
        datetoday = datetoday + " " + DateTime.Now.ToString("HH:mm:ss");
        userid = Convert.ToInt32(Session["userid"]);
        DateTime yee = DateTime.Now;
        string year = yee.ToString("yyyy");
        string strReqNo="";
        OdbcCommand cd1 = new OdbcCommand("select Max(reqno)from  t_inventoryrequest", conn);
        cd1.Transaction = odbTrans;
        if (Convert.IsDBNull(cd1.ExecuteScalar()) == true)
        {
            strReqNo = "SrNo/" + year + "/" + "0001";
            
        }
        else
        {

            string o1 = cd1.ExecuteScalar().ToString();
            string ab1 = o1.Substring(10, 4);
            int a4 = Convert.ToInt32(ab1);
            a4 = a4 + 1;
            if (a4 >= 1000)
            {
                strReqNo = "SrNo/" + year + "/" + a4;
                

            }
            else if (a4 >= 100)
            {
                strReqNo = "SrNo/" + year + "/0" + a4;
               
            }
            else if (a4 >= 10)
            {

                strReqNo = "SrNo/" + year + "/00" + a4;
               
            }
            else if (a4 < 10)
            {
                strReqNo = "SrNo/" + year + "/000" + a4;
               
            }
        }

        OdbcCommand cm44 = new OdbcCommand("CALL savedata(?,?)", conn);
        cm44.CommandType = CommandType.StoredProcedure;
        cm44.Parameters.AddWithValue("tblname", "t_inventoryrequest");
        cm44.Parameters.AddWithValue("val", "'" + strReqNo + "','" + username + "',null,'1'," + counter + "," + 2 + ",'" +datetoday + "','" + "0" + "'," + userid + ",'" + datetoday.ToString() + "'," + userid + ",'" + datetoday.ToString() + "'");
        cm44.Transaction = odbTrans;
        cm44.ExecuteNonQuery();
        int id1;
        OdbcCommand cmd4 = new OdbcCommand("select max(req_itemid) from t_inventoryrequest_items", conn);
        cmd4.Transaction = odbTrans;
        if (Convert.IsDBNull(cmd4.ExecuteScalar()) == true)
        {
            id1 = 1;
        }
        else
        {
            id1 = Convert.ToInt32(cmd4.ExecuteScalar());
            id1 = id1 + 1;
        }
        OdbcCommand cm41 = new OdbcCommand("CALL savedata(?,?)", conn);
        cm41.CommandType = CommandType.StoredProcedure;
        cm41.Parameters.AddWithValue("tblname", "t_inventoryrequest_items");
        cm41.Parameters.AddWithValue("val", "" + id1 + ",'" + strReqNo + "'," +keyid + "," +1 +" ," + 0 + "," + 0 + "," + 0 + ",'" + "0" + "'," + userid + ",'" + datetoday.ToString() + "'," + userid + ",'" + datetoday.ToString() + "'");
        cm41.Transaction = odbTrans;  
        cm41.ExecuteNonQuery();
        #endregion



    }


    # endregion

    # region Key inventory report

    protected void lnkKeyLostInventory_Click(object sender, EventArgs e)
    {

        if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            
            int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
            DataTable dttkeylost = new DataTable();
            dttkeylost.Columns.Clear();
            dttkeylost.Columns.Add("buildingname", System.Type.GetType("System.String"));
            dttkeylost.Columns.Add("roomno", System.Type.GetType("System.String"));
            dttkeylost.Columns.Add("quantity", System.Type.GetType("System.String"));
            dttkeylost.Columns.Add("Remark", System.Type.GetType("System.String"));
         

            string fromdate =objcls.yearmonthdate(txtFromDate.Text);
            string todate =objcls.yearmonthdate(txtToDate.Text);

            int allocid = Convert.ToInt32(Session["allocid"]);
            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string f2 = dts.ToString("dd/MM/yyyy");
            string dayclosed = dts.ToString("dd MMM yyyy");
            DateTime tim1 = DateTime.Now;
            string kk = tim1.ToString("yyyy/MM/dd");
            string yy = tim1.ToString("dd/MM/yyyy");
            yy = tim1.ToString("dd MMM  yyyy");
            try
            {
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "tv.dayend,buildingname,roomno,count(*) as quantity");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "' and  msb.build_id=mr.build_id and mr.room_id=ta.room_id and tv.alloc_id=ta.alloc_id  and return_key='0' group by buildingname,roomno");
                DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
               
                int k = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {

                    DateTime dayend = DateTime.Parse(dt1.Rows[0]["dayend"].ToString());
                    string day = dayend.ToString("dd");
                    string build = "";
                    string building = dt1.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                   
                    dt1.Rows[i]["roomno"].ToString();

                    OdbcCommand cmd31c = new OdbcCommand();
                    cmd31c.CommandType = CommandType.StoredProcedure;
                    cmd31c.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                    cmd31c.Parameters.AddWithValue("attribute", "bill_receiptno");
                    cmd31c.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "' and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and tv.alloc_id=ta.alloc_id  and return_key='0' and msb.buildingname='" + dt1.Rows[i]["buildingname"].ToString() + "' and mr.roomno=" + dt1.Rows[i]["roomno"]+"");
                    DataTable dt1c = objcls.SpDtTbl("CALL selectcond(?,?,?)",cmd31c);
                 
                    string remark = "";
                    if (dt1c.Rows.Count > 0)
                    {
                      
                        for (int j = 0; j < dt1c.Rows.Count; j++)
                        {
                            if (Convert.IsDBNull(dt1c.Rows[0]["bill_receiptno"]) == false)
                            {
                               
                                if (j > 0)
                                {
                                    remark = remark + " , ";
                                }
                                else
                                {
                                    remark = "Key Lost Bill";

                                }
                                remark = remark +" "+ dt1c.Rows[j]["bill_receiptno"].ToString();
                            }
                        }

                    }

                                        dttkeylost.Rows.Add();
                                        dttkeylost.Rows[i]["buildingname"] =building;
                                        dttkeylost.Rows[i]["roomno"] =dt1.Rows[i]["roomno"].ToString();
                                        dttkeylost.Rows[i]["quantity"] =dt1.Rows[i]["quantity"].ToString();
                                        dttkeylost.Rows[i]["remark"] = remark.ToString();
                        
                }


                DataTable dtb = dttkeylost;
                DateTime gh = DateTime.Now;
                string transtim = gh.ToString("dd-MM-yyyy HH-mm");
                string ch = "keylostinventory" + transtim.ToString() + ".pdf";
                string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

                Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
                Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
                Font font7 = FontFactory.GetFont("ARIAL", 9);
                Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
                Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
                pdfPage page = new pdfPage();
                PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                wr.PageEvent = page;
                 doc.Open();
                PdfPTable tablec = new PdfPTable(4);
                float[] colWidths23c = {50, 50, 50, 50 };
                tablec.SetWidths(colWidths23c);

                page.strRptMode = "keyledger";
                PdfPCell cell = new PdfPCell(new Phrase("Key stock ledger of rooms with lost keys (Consolidated)  ", font12));
                cell.Colspan = 4;
                cell.MinimumHeight = 10;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                tablec.AddCell(cell);

                PdfPCell cellc = new PdfPCell(new Phrase("Store name:", font9));
                cellc.Colspan = 1;
                cellc.Border = 0;
                cellc.HorizontalAlignment = 0;
                 tablec.AddCell(cellc);

                PdfPCell cellv = new PdfPCell(new Phrase("Accommodation office", font9));
                cellv.Colspan = 1;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 0;
                tablec.AddCell(cellv);

                PdfPCell celld = new PdfPCell(new Phrase("Item Name:", font9));
                celld.Colspan = 1;
                celld.Border = 0;
                celld.HorizontalAlignment = 0;
                tablec.AddCell(celld);

                PdfPCell cellf = new PdfPCell(new Phrase("Room key with key chain", font9));
                cellf.Colspan = 1;
                cellf.Border = 0;
                cellf.HorizontalAlignment = 0;
                tablec.AddCell(cellf);
                
                PdfPCell cellbn = new PdfPCell(new Phrase("Item Code:", font9));
                cellbn.Colspan = 1;
                cellbn.Border = 0;
                cellbn.HorizontalAlignment = 0;
                tablec.AddCell(cellbn);
                
                PdfPCell cellnb = new PdfPCell(new Phrase("", font9));
                cellnb.Colspan = 1;
                cellnb.Border = 0;
                cellnb.HorizontalAlignment = 0;
                tablec.AddCell(cellnb);

                PdfPCell cellm = new PdfPCell(new Phrase("Date:", font9));
                cellm.Colspan = 1;
                cellm.Border = 0;
                cellm.HorizontalAlignment = 0;
                tablec.AddCell(cellm);
                
                PdfPCell cellbnn = new PdfPCell(new Phrase(yy.ToString(), font9));
                cellbnn.Colspan = 1;
                cellbnn.Border = 0;
                cellbnn.HorizontalAlignment = 0;
                tablec.AddCell(cellbnn);
                doc.Add(tablec);
                PdfPTable table = new PdfPTable(5);
                float[] colWidths23 = { 20, 20, 20, 20, 40};
                table.SetWidths(colWidths23);

                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("No", font8)));
                cell1.Rowspan = 1;
                table.AddCell(cell1);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Buildingname", font8)));
                cell2.Rowspan = 1;
                table.AddCell(cell2);

                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                cell3.Colspan = 1;
                cell3.HorizontalAlignment = 1;
                table.AddCell(cell3);

                PdfPCell cell31 = new PdfPCell(new Phrase(new Chunk("Quantity", font8)));
                cell31.Rowspan = 1;
                table.AddCell(cell31);

                PdfPCell cell31c = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                cell31c.Rowspan = 1;
                table.AddCell(cell31c);

                doc.Add(table);

                int ii = 0;
                int slno = 0;
                foreach (DataRow dr in dtb.Rows)
                {
                    slno = slno + 1;
                    if (ii > 35)
                    {
                        ii = 0;
                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(5);

                        float[] colWidths231 = { 20, 20, 20, 20, 40 };
                        table1.SetWidths(colWidths23);

                        PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk("No", font8)));

                        cell11.Rowspan = 1;
                        table1.AddCell(cell11);

                        PdfPCell cell21 = new PdfPCell(new Phrase(new Chunk("Building", font8)));
                        cell21.Rowspan = 1;
                        table1.AddCell(cell21);

                        PdfPCell cell3v = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                        cell3v.Colspan = 1;
                        table1.AddCell(cell3v);

                        PdfPCell cell311 = new PdfPCell(new Phrase(new Chunk("Quantity", font8)));
                        cell311.Rowspan = 1;
                        table1.AddCell(cell311);

                        PdfPCell cell31c1 = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                        cell31c1.Rowspan = 1;
                        table1.AddCell(cell31c1);
                        doc.Add(table1);

                    }

                    PdfPTable table2 = new PdfPTable(5);

                    float[] colWidths2312 = { 20, 20, 20, 20, 40 };
                    table2.SetWidths(colWidths2312);

                    PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table2.AddCell(cell4);
                
                    PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk(dr["buildingname"].ToString(), font7)));
                    table2.AddCell(cell5);
                    PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString(), font7)));
                    table2.AddCell(cell6);
                  
                    PdfPCell cell611d = new PdfPCell(new Phrase(new Chunk(dr["quantity"].ToString(), font7)));

                    table2.AddCell(cell611d);
             
                    PdfPCell cell61 = new PdfPCell(new Phrase(new Chunk(dr["remark"].ToString(), font7)));
                    table2.AddCell(cell61);

                    ii++;
                    doc.Add(table2);
                }
                
                doc.Close();
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname="+ch.ToString()+"&Title=List of rooms vacated on the day report";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);

            }


            catch
            {

                messagedisplay("problem found","aa");

            } conn.Close();

        }
        else
        {
            messagedisplay("Select From date and To date ", "warnm");

        }

    }

    # endregion 
    
    # region NonVacating Whole Report
    protected void lnkNonvacateWhole_Click(object sender, EventArgs e)
    {
       
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }

         
            string date5 = DateTime.Now.ToString("yyyy-MM-dd");
            string date6 = DateTime.Now.ToString("dd  MMM");
            string c = "5 PM";
            DateTime datedd = DateTime.Parse(c);
            string date10 = datedd.ToString("HH:mm");

            string checkdate = date5 + " " + date10;

            OdbcCommand cc = new OdbcCommand("DROP view if exists tempnonvacatewhole", conn);
            cc.ExecuteNonQuery();

            string sqlview = "create view  tempnonvacatewhole as  (SELECT  * from t_roomallocation ta   WHERE ta.roomstatus='2'   and ADDTIME(exp_vecatedate,MAKETIME(( "
              + " SELECT graceperiod from t_policy_allocation WHERE reqtype='Common' and rowstatus<>'2' and ((curdate() >= fromdate and  curdate()<=todate) or "
              + " (curdate()>=fromdate and todate='0000-00-00')) and waitingcriteria='Hours'),0,0))<now())";

            OdbcCommand cmdview = new OdbcCommand(sqlview, conn);
            cmdview.ExecuteNonQuery();

            try
            {   
                DateTime gh = DateTime.Now;
                string transtim = gh.ToString("dd-MM-yyyy HH-mm");

                string datecur = gh.ToString("hh:mm tt");
                string datecur1 = gh.ToString("dd MMM");
                string ch = "DueVacatingmaxtime" + transtim.ToString() + ".pdf";
                string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

                Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 60);
            
                Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
                Font font7 = FontFactory.GetFont("ARIAL", 9);
                Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
                Font font9 = FontFactory.GetFont("ARIAL", 10, 1);

                pdfPage page = new pdfPage();
                PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
                wr.PageEvent = page;
             
                doc.Open();

                page.strRptMode = "nonvacate";
                if(cmbSelectBuilding.SelectedValue.ToString()!="-1")
                {

                string data = Session["dayend"].ToString();
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " tempnonvacatewhole tt,m_room mr ,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "adv_recieptno,place, buildingname ,roomno ,swaminame , exp_vecatedate as vacatedate");
                cmd31.Parameters.AddWithValue("conditionv", "tt.room_id=mr.room_id and msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbSelectBuilding.SelectedValue) + " order by roomno,exp_vecatedate asc ");


                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)",cmd31);
              

               
                PdfPTable table = new PdfPTable(6);
                float[] colWidths23 = { 20, 20,30, 40, 30, 60 };
                table.SetWidths(colWidths23);

                PdfPCell cell = new PdfPCell(new Phrase("Nonvacating Rooms ", font12));
                cell.Colspan = 6;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                //0=Left, 1=Centre, 2=Right
                table.AddCell(cell);

                PdfPCell cellv = new PdfPCell(new Phrase("Building Name: ", font9));
                cellv.Colspan = 2;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 1;
                 table.AddCell(cellv);


                PdfPCell cellv1 = new PdfPCell(new Phrase(cmbSelectBuilding.SelectedItem.ToString(), font9));
                cellv1.Colspan = 2;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
                 table.AddCell(cellv1);

                PdfPCell cellv2 = new PdfPCell(new Phrase("Due Time:", font9));
                cellv2.Colspan = 0;
                cellv2.Border = 0;
                cellv2.HorizontalAlignment = 1;
                table.AddCell(cellv2);

                PdfPCell cellv21 = new PdfPCell(new Phrase( datecur+" on "+datecur1 , font9));
                cellv21.Colspan = 0;
                cellv21.HorizontalAlignment = 0;
                cellv21.Border = 0;
                  table.AddCell(cellv21);

                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table.AddCell(cell1);

                PdfPCell cell1b = new PdfPCell(new Phrase(new Chunk("Adv Rec", font8)));
                table.AddCell(cell1b);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                table.AddCell(cell2);
                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Prop Checkout Time", font8)));
                table.AddCell(cell3);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk("Max Time", font8)));
                table.AddCell(cell4);

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                table.AddCell(cell5);

                doc.Add(table);
                int i = 0;


                int slno = 0;
                foreach (DataRow dr in dtt.Rows)
                {
                    slno = slno + 1;
                    if (i > 33)
                    {

                        i = 0;

                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(6);
                        float[] colWidths231 = { 20, 20, 30, 40, 30, 60 };
                        table1.SetWidths(colWidths231);
                        PdfPCell cell1n = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                        table1.AddCell(cell1n);

                        PdfPCell cell1n2 = new PdfPCell(new Phrase(new Chunk("Adv Rec", font8)));
                        table1.AddCell(cell1n2);
                        PdfPCell cell2n = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                        table1.AddCell(cell2n);

                        PdfPCell cell3n = new PdfPCell(new Phrase(new Chunk("Prop Checkout Time", font8)));
                        table1.AddCell(cell3n);

                        PdfPCell cell4n = new PdfPCell(new Phrase(new Chunk("Max Time", font8)));
                        table1.AddCell(cell4n);

                        PdfPCell cell5n = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                        table1.AddCell(cell5n);

                        doc.Add(table1);

                    }

                    PdfPTable table3 = new PdfPTable(6);
                   

                    float[] colWidths23u = { 20, 20, 30, 40, 30, 60 };
                    table3.SetWidths(colWidths23u);
                    PdfPCell cell9 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table3.AddCell(cell9);


                    PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["adv_recieptno"].ToString(), font7)));
                    table3.AddCell(cell92);

                    PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString(), font7)));
                    table3.AddCell(cell10);
                    DateTime dated = DateTime.Parse(dr["vacatedate"].ToString());
                    string time1 = dated.ToString("dd-MM-yyyy  hh:mm tt");

                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk(time1.ToString(), font7)));
                    table3.AddCell(cell11);

                    PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk("4 PM", font7)));
                    table3.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk("Extended Stay", font7)));
                    table3.AddCell(cell13);
              
                    i++;
                

                    doc.Add(table3);

                }
                }
                
                else
                
                {
                string data = Session["dayend"].ToString();
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " tempnonvacatewhole tt,m_room mr ,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "adv_recieptno,place, buildingname ,roomno ,swaminame , exp_vecatedate as vacatedate");
                cmd31.Parameters.AddWithValue("conditionv", "tt.room_id=mr.room_id and msb.build_id=mr.build_id order by mr.build_id ,roomno,exp_vecatedate asc");

                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)",cmd31);
             
                PdfPTable table = new PdfPTable(7);
                float[] colWidths23 = { 20, 20, 40, 20, 45, 20, 40 };
                table.SetWidths(colWidths23);

                PdfPCell cell = new PdfPCell(new Phrase("Non vacating Rooms ", font12));
                cell.Colspan =7;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                table.AddCell(cell);

                PdfPCell cellv1 = new PdfPCell(new Phrase("All Building", font9));
                cellv1.Colspan =3;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
                table.AddCell(cellv1);

                PdfPCell cellv2 = new PdfPCell(new Phrase("Due Time:", font9));
                cellv2.Colspan = 2;
                cellv2.Border = 0;
                cellv2.HorizontalAlignment = 1;
                table.AddCell(cellv2);

                PdfPCell cellv21 = new PdfPCell(new Phrase(datecur+" on "+datecur1, font9));
                cellv21.Colspan = 2;
                cellv21.HorizontalAlignment = 0;
                cellv21.Border = 0;
                table.AddCell(cellv21);

                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table.AddCell(cell1);
               PdfPCell celle1 = new PdfPCell(new Phrase(new Chunk("Adv Rec", font8)));
                table.AddCell(celle1);

                    PdfPCell cell1c = new PdfPCell(new Phrase(new Chunk("Building", font8)));
                table.AddCell(cell1c);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("Room No", font8)));

                table.AddCell(cell2);
                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Prop Checkout Time", font8)));
                table.AddCell(cell3);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk("Max Time", font8)));
                table.AddCell(cell4);

                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                table.AddCell(cell5);

            
                doc.Add(table);
                int i = 0;


                int slno = 0;
                foreach (DataRow dr in dtt.Rows)
                {
                    slno = slno + 1;
                    if (i > 33)
                    {


                        i = 0;

                        doc.NewPage();
                        PdfPTable table1 = new PdfPTable(7);
                        float[] colWidths231 = { 20, 20, 40, 20, 45, 20, 40 };
                        table1.SetWidths(colWidths231);


                        PdfPCell cell1n = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                        table1.AddCell(cell1n);
                           PdfPCell cell1n2 = new PdfPCell(new Phrase(new Chunk("Adv Rec", font8)));
                        table1.AddCell(cell1n2);

                         PdfPCell cell1ns = new PdfPCell(new Phrase(new Chunk("Building", font8)));
                        table1.AddCell(cell1ns);

                        PdfPCell cell2n = new PdfPCell(new Phrase(new Chunk("Room No", font8)));
                        table1.AddCell(cell2n);
                        PdfPCell cell3n = new PdfPCell(new Phrase(new Chunk("Prop Checkout Time", font8)));
                        table1.AddCell(cell3n);
                        PdfPCell cell4n = new PdfPCell(new Phrase(new Chunk("Max Time", font8)));
                        table1.AddCell(cell4n);
                        PdfPCell cell5n = new PdfPCell(new Phrase(new Chunk("Remark", font8)));
                        table1.AddCell(cell5n);
                        doc.Add(table1);

                    }

                    PdfPTable table3 = new PdfPTable(7);
                    float[] colWidths23u = { 20, 20, 40, 20, 45, 20, 40 };
                    table3.SetWidths(colWidths23u);
                    PdfPCell cell9 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                    table3.AddCell(cell9);
                    PdfPCell cell9e = new PdfPCell(new Phrase(new Chunk(dr["adv_recieptno"].ToString(), font7)));
                    table3.AddCell(cell9e);
                    PdfPCell cell9d = new PdfPCell(new Phrase(new Chunk(dr["buildingname"].ToString(), font7)));
                    table3.AddCell(cell9d);
                    PdfPCell cell10 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString(), font7)));
                    table3.AddCell(cell10);
                    DateTime dated = DateTime.Parse(dr["vacatedate"].ToString());
                    string time1 = dated.ToString("dd-MM-yyyy hh:mm tt");
                    PdfPCell cell11 = new PdfPCell(new Phrase(new Chunk(time1.ToString(), font7)));
                    table3.AddCell(cell11);
                    PdfPCell cell12 = new PdfPCell(new Phrase(new Chunk("4 PM", font7)));
                    table3.AddCell(cell12);
                    PdfPCell cell13 = new PdfPCell(new Phrase(new Chunk("Extended Stay", font7)));
                    table3.AddCell(cell13);
                    i++;
                  

                    doc.Add(table3);

                }

                }

                PdfPTable table4 = new PdfPTable(7);
                PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellf.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf.PaddingLeft = 20;
                cellf.MinimumHeight = 30;
                cellf.Colspan = 7;
                cellf.Border = 0;
                table4.AddCell(cellf);
                PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1.PaddingLeft = 20;
                cellf1.Border = 0;
                cellf1.Colspan =7;
                table4.AddCell(cellf1);
                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 7;
                table4.AddCell(cellh2);
                doc.Add(table4);
                doc.Close();
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Due for vacating in max time report";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);

            }
            catch (Exception ex)
            {
                messagedisplay("problem found","aa");


            }


        }

    # endregion

    # region Check Allocation Poliicy

        public void CheckAllocationPolicy()
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();


        }
        int houseroom = 0;
        OdbcCommand cmd108 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmd108.CommandType = CommandType.StoredProcedure;
        cmd108.Parameters.AddWithValue("tblname", "m_season");
        cmd108.Parameters.AddWithValue("attribute", "season_sub_id");
        cmd108.Parameters.AddWithValue("conditionv", "curdate() between startdate and enddate and is_current=" + 1 + " and rowstatus<>" + 2 + "");
        OdbcDataAdapter dacnt108 = new OdbcDataAdapter(cmd108);
        DataTable dtt108 = new DataTable();
        dacnt108.Fill(dtt108);
        if (dtt108.Rows.Count > 0)
        {
            string curseason = dtt108.Rows[0]["season_sub_id"].ToString();
            OdbcCommand cmd109 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
            cmd109.CommandType = CommandType.StoredProcedure;
            cmd109.Parameters.AddWithValue("tblname", "t_policy_allocation_seasons");
            cmd109.Parameters.AddWithValue("attribute", "alloc_policy_id");
            cmd109.Parameters.AddWithValue("conditionv", "season_sub_id='" + curseason + "' and rowstatus<>" + 2 + ""); ;
            OdbcDataAdapter dacnt109 = new OdbcDataAdapter(cmd109);
            DataTable dtt109 = new DataTable();
            dacnt109.Fill(dtt109);
            if (dtt109.Rows.Count > 0)
            {
               
                for (int ii = 0; ii < dtt109.Rows.Count; ii++)
                {
                    int sid = int.Parse(dtt109.Rows[ii]["alloc_policy_id"].ToString());

                    OdbcCommand cmd110 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
                    cmd110.CommandType = CommandType.StoredProcedure;
                    cmd110.Parameters.AddWithValue("tblname", "t_policy_allocation");
                    cmd110.Parameters.AddWithValue("attribute", "is_show_vacantroom");
                    cmd110.Parameters.AddWithValue("conditionv", "alloc_policy_id=" + sid + " and reqtype='" + "Common" + "' and curdate() between fromdate and todate and rowstatus<>" + 2 + "");
                    OdbcDataAdapter dacnt110 = new OdbcDataAdapter(cmd110);
                    DataTable dtt110 = new DataTable();
                    dacnt110.Fill(dtt110);
                    if (dtt110.Rows.Count > 0)
                    {
                        houseroom = int.Parse(dtt110.Rows[0]["is_show_vacantroom"].ToString());
                    }
                }
            }
        }
        Session["hprs"] = houseroom.ToString();



    }


        # endregion

    # region
    protected void txtAdvanceAmount_TextChanged1(object sender, EventArgs e)
    {

    }
    protected void txtAllocatedTime_TextChanged1(object sender, EventArgs e)
    {

    }
    # endregion

    #region room reserve check
    public void roomreservecheck()
    {

        string str1 =objcls.yearmonthdate(txtVacatingDate.Text.ToString());
        DateTime dt = DateTime.Parse(str1);
        str1 = dt.ToString("yyyy-MM-dd");

       string str2 =objcls. yearmonthdate(txtExtendDate.Text.ToString());
       DateTime dt1 = DateTime.Parse(str2);
       str2 = dt1.ToString("yyyy-MM-dd");
       DateTime vec_time1 = DateTime.Parse(txtVecatingTime.Text);
       string   v_r1 = vec_time1.ToString("HH:mm");
       string m_r1 = str1 + " " + v_r1;

       vec_time1 = DateTime.Parse(txtExtendTime.Text);
       v_r1 = vec_time1.ToString("HH:mm");
       string  m_r2 = str2 + " " + v_r1;
       DateTime m_r3 = DateTime.Parse(v_r1);
       v_r1 = m_r3.AddMinutes(-1).ToString("HH:mm");
       m_r2 = str2 + " " + v_r1;
        
      if (conn.State == ConnectionState.Closed)
       {
           conn.ConnectionString = strConnection;
           conn.Open();
       }
        OdbcCommand cbv12 = new OdbcCommand("select reserve_id from t_roomreservation where status_reserve ='" + "0" + "'  and room_id= " + int.Parse(cmbaltroom.SelectedValue ) + " and  ('" + m_r1.ToString() + "' between reservedate and expvacdate or '" + m_r2.ToString() + "' between reservedate and expvacdate or reservedate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  or expvacdate between '" + m_r1.ToString() + "' and '" + m_r2.ToString() + "'  )", conn);
        OdbcDataReader obv12 = cbv12.ExecuteReader();
        if (obv12.Read())
        {
            Session["rescheck"] = obv12[0].ToString();
           
        }
        else
        {
            Session["rescheck"] = "0";
        }

        conn.Close();

    }
    #endregion

    # region Counter collection
    protected void LinkButton6_Click1(object sender, EventArgs e)
    {
        try
        {

            int  counter = Convert.ToInt32(Session["counterid"]);
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }
            string daycolse1 =objcls.yearmonthdate(txtDaycloseDate.Text);
            DateTime dayclose2 = DateTime.Parse(daycolse1);

            string dayclose3 = dayclose2.ToString("dd MMM");

            DataTable dt;
            int casheirid = Convert.ToInt32(Session["cashierid"]);
            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string f2 = dts.ToString("dd/MM/yyyy");
            string dated = dts.ToString("yyyy-MM-dd");
            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 50);
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string ch = "CounterCollection" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);

            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            page.strRptMode = "Receiptledger";

            int total = 0;
            PdfPTable table = new PdfPTable(3);
            float[] c5 = { 5, 15, 15 };
            table.SetWidths(c5);

            OdbcCommand cmd31 = new OdbcCommand();
            cmd31.CommandType = CommandType.StoredProcedure;
            cmd31.Parameters.AddWithValue("tblname", "t_daily_transaction t,m_sub_budghead_ledger l,m_staff sm,m_sub_counter msc");
            cmd31.Parameters.AddWithValue("attribute", " amount,t.ledger_id,ledgername,date,cash_caretake_id,staffname,counter_no");
            cmd31.Parameters.AddWithValue("conditionv", "liability_type='0' and   cash_caretake_id=" + casheirid + " and l.ledger_id=t.ledger_id and date='" + daycolse1 + "' and t.counter_id="+counter+"   and sm.staff_id=" + casheirid + "  and t.counter_id=msc.counter_id   and t.ledger_id!='5'  and t.ledger_id!='6' group by date, t.ledger_id  ");
            dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31 );
          
            string staff = "";
            try
            {
                staff = dt.Rows[0]["counter_no"].ToString();
            }
            catch { }
            PdfPCell cell = new PdfPCell(new Phrase("Daily  Collection   of Counter " + staff + " " + "  ON  " + dayclose3, font12));
            cell.Colspan = 5;
            cell.HorizontalAlignment = 1;
            cell.Border = 1;
            table.AddCell(cell);

            doc.Add(table);

            OdbcCommand cmdk = new OdbcCommand("select sum(amount) as amount from t_daily_transaction where date='" + daycolse1 + "' and ledger_id!='6'  and ledger_id!='5' and cash_caretake_id=" + casheirid + " and counter_id=" + counter + " and liability_type='0' ", conn);
            OdbcDataReader ork = cmdk.ExecuteReader();

            if (ork.Read())
            {
                if (Convert.IsDBNull(ork["amount"]) == false)
                {

                    total = Convert.ToInt32(ork["amount"]);

                }

            }

            PdfPTable table1 = new PdfPTable(3);
            float[] c6 = { 5, 15, 15 };
            table1.SetWidths(c6);

            PdfPCell cell1w = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
            table1.AddCell(cell1w);
       
            PdfPCell cell2v = new PdfPCell(new Phrase(new Chunk("Ledger Name", font8)));
            table1.AddCell(cell2v);
            PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
            table1.AddCell(cell3);

            doc.Add(table1);
            int slno = 0;
            int i = 0;

            foreach (DataRow dr in dt.Rows)
            {
                slno = slno + 1;
                if (i > 30)
                {
                    i = 0;
                    PdfPTable table2 = new PdfPTable(3);
                    float[] c1 = { 5, 15, 15 };
                    table2.SetWidths(c1);
                    PdfPCell cell1wf = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                    table2.AddCell(cell1wf);
                
                    PdfPCell cell2x = new PdfPCell(new Phrase(new Chunk("Ledger Name", font8)));
                    table1.AddCell(cell2x);
                    PdfPCell cell3f = new PdfPCell(new Phrase(new Chunk("Amount", font8)));
                    table2.AddCell(cell3f);

                    doc.Add(table2);

                }


                PdfPTable table3 = new PdfPTable(3);
                float[] c = { 5, 15, 15 };
                table3.SetWidths(c);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk(slno.ToString(), font7)));
                table3.AddCell(cell4);
                            
                PdfPCell cell5n = new PdfPCell(new Phrase(new Chunk(dr["ledgername"].ToString(), font7)));
                table3.AddCell(cell5n);

                PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(dr["amount"].ToString(), font7)));
                table3.AddCell(cell6);
                i++;
                doc.Add(table3);

            }

            if (dt.Rows.Count > 0)
            {

                PdfPTable tablef = new PdfPTable(3);

                float[] colWidths23av1 = { 5, 15, 15 };
                tablef.SetWidths(colWidths23av1);
           
                PdfPCell cell1wf2 = new PdfPCell(new Phrase(new Chunk("Total", font8)));
                cell1wf2.Colspan = 2;
                cell1wf2.HorizontalAlignment = 2;

                tablef.AddCell(cell1wf2);

                PdfPCell cell1wf2h = new PdfPCell(new Phrase(new Chunk(total.ToString(), font8)));
                tablef.AddCell(cell1wf2h);

                PdfPCell cell1wf2hd = new PdfPCell(new Phrase(new Chunk("", font8)));
                cell1wf2hd.Colspan = 3;
                cell1wf2hd.Border = 0;
                tablef.AddCell(cell1wf2hd);

                PdfPCell cellfb = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellfb.HorizontalAlignment = Element.ALIGN_LEFT;
                cellfb.PaddingLeft = 20;
                cellfb.Colspan = 3;
                cellfb.MinimumHeight = 30;
                cellfb.Border = 0;
                tablef.AddCell(cellfb);

                PdfPCell cellf1b = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1b.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1b.PaddingLeft = 20;
                cellf1b.Colspan = 3;
                cellf1b.Border = 0;
               
                tablef.AddCell(cellf1b);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom ", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 3;
                tablef.AddCell(cellh2);

               doc.Add(tablef);

            }
            doc.Close();
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Cashier liability report";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);
        }
        catch
        {
            messagedisplay("Problem found", "kk");
        }
    }
    # endregion

    # region Grace period calulation
    public void GracePeriodCalculation()
    {
        int seasonid = 0;

        seasonid = Convert.ToInt32(Session["season_subid"]);

        OdbcCommand cmdbill = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmdbill.CommandType = CommandType.StoredProcedure;
        cmdbill.Parameters.AddWithValue("tblname", "t_policy_billservice_seasons  bs ,t_policy_billservice  tpb");
        cmdbill.Parameters.AddWithValue("attribute", "season_sub_id,service_unit_id,minunit");
        cmdbill.Parameters.AddWithValue("conditionv", " bill_service_id=" + 1 + " and bs.bill_policy_id=tpb.bill_policy_id and bs.rowstatus!=" + 2 + "  and ((curdate()>=fromdate  and curdate()<=todate) or (curdate()>=fromdate and todate='0000-00-00'))");
        OdbcDataAdapter dacntbill = new OdbcDataAdapter(cmdbill);
        DataTable dttbill = new DataTable();
        dacntbill.Fill(dttbill);
        int flag1 = 0;
        if (dttbill.Rows.Count > 0)
        {
            for (int i = 0; i < dttbill.Rows.Count; i++)
            {

                int seaid = Convert.ToInt32(dttbill.Rows[i]["season_sub_id"]);
                if (seaid == seasonid)
                {
                    measurement = dttbill.Rows[i]["service_unit_id"].ToString();
                    minunits = dttbill.Rows[i]["minunit"].ToString();

                    measureunit = Convert.ToInt32(dttbill.Rows[i]["service_unit_id"]);
                    Session["measureunit"] = measureunit;
                    minunit = dttbill.Rows[i]["minunit"].ToString();
                    Session["miniunit"] = minunit;
                    flag1 = 1;
                    break;
                }
                if (flag1 == 1)
                {
                    break;
                }


            }

        }

    }

    # endregion

    #  region Complete room status report

    protected void lnkCompleteRoomStatusReport_Click(object sender, EventArgs e)
    { 
        try
        {
            Document doc = new Document(iTextSharp.text.PageSize.A4.Rotate(), 10, 10, 60, 60);
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            string currentdate = gh.ToString("dd-MMM-yyyy");
            string datecur = gh.ToString("hh-mm tt");
            string datecur1 = gh.ToString("dd MMM");
            string ch = "RoomStatusReport" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

        
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);

            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
             Font font8 = FontFactory.GetFont("ARIAL", 9, 1);

          if ((cmbCompleteBuilding.SelectedValue.ToString() != "-1"))
          {
            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }

            string date5 = DateTime.Now.ToString("yyyy-MM-dd");
            string date6 = DateTime.Now.ToString("dd  MMM");
            string c = "5 PM";
            DateTime datedd = DateTime.Parse(c);
            string date10 = datedd.ToString("HH:mm");

            string checkdate = date5 + " " + date10;

                      
                string data = Session["dayend"].ToString();
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "buildingname ,roomno,roomstatus,room_id,mr.build_id ");
                cmd31.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + " and mr.rowstatus!=2 order by roomno asc  ");


                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
                            
                PdfPTable table = new PdfPTable(6);
                float[] colWidths23 = { 20, 20,30, 40, 30, 60 };
                table.SetWidths(colWidths23);

                PdfPCell cell = new PdfPCell(new Phrase("Complete Room Status Report ", font12));
                cell.Colspan = 6;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                table.AddCell(cell);

                PdfPCell cellv = new PdfPCell(new Phrase("Building Name: ", font9));
                cellv.Colspan = 2;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 1;
                table.AddCell(cellv);


                PdfPCell cellv1 = new PdfPCell(new Phrase(cmbCompleteBuilding.SelectedItem.ToString(), font9));
                cellv1.Colspan = 2;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
                table.AddCell(cellv1);

                PdfPCell cellv2 = new PdfPCell(new Phrase("Date :", font9));
                cellv2.Colspan = 0;
                cellv2.Border = 0;
                cellv2.HorizontalAlignment = 1;
                table.AddCell(cellv2);

                PdfPCell cellv21 = new PdfPCell(new Phrase( currentdate , font9));
                cellv21.Colspan = 0;
                cellv21.HorizontalAlignment = 0;
                cellv21.Border = 0;
                table.AddCell(cellv21);
                doc.Add(table);
                int i = 0;
                PdfPTable table3 = new PdfPTable(10);
                foreach (DataRow dr in dtt.Rows)
                {
                    i++;
                    if (i == 10)
                    {
                        i = 1;
                    }
                   
                    if (Convert.ToInt32(dr["roomstatus"]) == 1)
                    {

                      OdbcCommand das2 = new OdbcCommand("select reserve_id  from t_roomreservation tr ,m_room  mr where status_reserve='0' and  ( now() between reservedate and expvacdate)  and mr.room_id=tr.room_id and mr.roomstatus='1'  and mr.build_id=" + Convert.ToInt32(dr["build_id"]) + " and mr.roomno=" + Convert.ToInt32(dr["roomno"]) + "", conn);
                      OdbcDataReader or2 = das2.ExecuteReader();
                      if (or2.Read())
                      {

                          PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "RES", font7)));
                          cell92.MinimumHeight = 25;
                          table3.AddCell(cell92);
                      }
                      else
                      {

                          PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "VAC", font7)));
                          cell92.MinimumHeight = 25;
                          table3.AddCell(cell92);
                      }
                    }
                    else if (Convert.ToInt32(dr["roomstatus"]) == 3)
                    {
                        PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "BLK", font7)));
                        cell92.MinimumHeight = 25;
                        table3.AddCell(cell92);

                    }
                    else if (Convert.ToInt32(dr["roomstatus"]) == 4)
                    {

                        OdbcCommand cmd = new OdbcCommand("select alloc_id  from t_roomallocation where " + Convert.ToInt32(dr["room_id"]) + " in (select room_id from t_roomallocation where exp_vecatedate<now() and roomstatus='2')", conn);
                        OdbcDataReader or = cmd.ExecuteReader();

                        if (or.Read())
                        {

                            PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "OS", font7)));
                            cell92.MinimumHeight =25;
                           table3.AddCell(cell92);
                        }
                        else
                        {

                            PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "OCC", font7)));
                            cell92.MinimumHeight = 25;
                            table3.AddCell(cell92);

                        }

                    }
                   

                }

                if (i < 20)
                {
                    for (int j = 1; j <= 20 - i; j++)
                    {

                        PdfPCell cell921 = new PdfPCell(new Phrase(new Chunk("", font8)));
                        cell921.Border = 0;
                        table3.AddCell(cell921);

                    }

                }
                doc.Add(table3);
                PdfPTable table31 = new PdfPTable(6);
                PdfPCell a = new PdfPCell(new Phrase(new Chunk("NB:-   VAC: Vacant        BLK: Blocked ,        RES: Reserved ,        OCC: Occupied,        OS: Overstayed", font8)));
                a.Border = 0;
                a.MinimumHeight = 10;
                a.Colspan = 6;
                table31.AddCell(a);
                doc.Add(table31);
                
           
    }  
      
       else
             
        {

          int yy=0;
            
           if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();

            }

            string date5 = DateTime.Now.ToString("yyyy-MM-dd");
            string date6 = DateTime.Now.ToString("dd  MMM");
            string c = "5 PM";
            DateTime datedd = DateTime.Parse(c);
            string date10 = datedd.ToString("HH:mm");
            string checkdate = date5 + " " + date10;
                string data = Session["dayend"].ToString();
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "buildingname ,roomno,roomstatus,room_id,mr.build_id ");
                cmd31.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id  and mr.rowstatus!=2 and buildingname  NOT LIKE '%DH%'  and buildingname NOT LIKE '%PC%'  and buildingname NOT LIKE '%MSC%'  and buildingname NOT LIKE '%MOC%' order by build_id,roomno asc  ");

                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
            
                PdfPTable table = new PdfPTable(6);
                float[] colWidths23 = { 20, 20,30, 40, 30, 60 };
                table.SetWidths(colWidths23);

                PdfPCell cell = new PdfPCell(new Phrase("Complete Room Status Report of Cottages ", font12));
                cell.Colspan = 6;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
              
                table.AddCell(cell);

                PdfPCell cellv2 = new PdfPCell(new Phrase("Date :"+currentdate, font9));
                cellv2.Colspan = 6;
                cellv2.Border = 0;
                cellv2.HorizontalAlignment = 2;
                table.AddCell(cellv2);
                           
                doc.Add(table);
                int i = 0;


                PdfPTable table3 = new PdfPTable(10);

                int buildid2 = 0;

                foreach (DataRow dr in dtt.Rows)
                {
                                    
                    PdfPTable table4b = new PdfPTable(10);

                    if(buildid2!=(Convert.ToInt32(dr["build_id"])))
                    {
                        string cc = dr["buildingname"].ToString();

                        if (yy != 0)
                        {
                            
                            if (i < 10)
                            {
                                for (int j = 1; j <= 10-i; j++)
                                {

                                    PdfPCell cell921 = new PdfPCell(new Phrase(new Chunk("", font8)));
                                    cell921.Border = 0;
                                    table3.AddCell(cell921);
                                    
                                }
                               
                            }

                            i = 0;
                            PdfPCell cell92v = new PdfPCell(new Phrase(new Chunk("Building name:" + dr["buildingname"].ToString(), font9)));
                            cell92v.MinimumHeight = 25;
                            cell92v.Colspan = 10;
                            cell92v.Border = 0;
                            table3.AddCell(cell92v);
                            buildid2 = Convert.ToInt32(dr["build_id"]);

                        }
                         

                        else
                        {
                            string ccc = dr["buildingname"].ToString();
                            PdfPCell cell92v = new PdfPCell(new Phrase(new Chunk("Building name:" + dr["buildingname"].ToString(), font9)));
                            cell92v.MinimumHeight = 25;
                            cell92v.Colspan = 10;
                            cell92v.Border = 1;
                            table3.AddCell(cell92v);
                            buildid2 = Convert.ToInt32(dr["build_id"]);

                        }
                   
                       
                    }
                    yy++;
                 
                    if (i == 10)
                    {
                        i = 1;
                    }

                    if (Convert.ToInt32(dr["roomstatus"]) == 1)
                    {


                      OdbcCommand das2 = new OdbcCommand("select reserve_id  from t_roomreservation tr ,m_room  mr where status_reserve='0' and  ( now() between reservedate and expvacdate)  and mr.room_id=tr.room_id and mr.roomstatus='1'  and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + " and mr.roomno=" + Convert.ToInt32(dr["roomno"]) + "", conn);
                      OdbcDataReader or2 = das2.ExecuteReader();
                      if (or2.Read())
                      {

                          PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "RES", font7)));
                          cell92.MinimumHeight = 25;
                          table3.AddCell(cell92);
                      }
                      else
                      {

                          PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "VAC", font7)));
                          cell92.MinimumHeight = 25;
                          table3.AddCell(cell92);
                      }
                      i++;

                    }
                    else if (Convert.ToInt32(dr["roomstatus"]) == 3)
                    {
                        PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "BLK", font7)));
                        cell92.MinimumHeight = 25;
                   
                        table3.AddCell(cell92);
                        i++;
                    }
                    else if (Convert.ToInt32(dr["roomstatus"]) == 4)
                    {

                        OdbcCommand cmd = new OdbcCommand("select  alloc_id  from t_roomallocation where " + Convert.ToInt32(dr["room_id"]) + " in (select room_id from t_roomallocation where exp_vecatedate<now() and roomstatus='2')", conn);
                        OdbcDataReader or = cmd.ExecuteReader();

                        if (or.Read())
                        {

                            PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "OS", font7)));
                            cell92.MinimumHeight =25;
                           table3.AddCell(cell92);

                        }
                        else
                        {

                            PdfPCell cell92 = new PdfPCell(new Phrase(new Chunk(dr["roomno"].ToString() + "  " + "OCC", font7)));
                            cell92.MinimumHeight = 25;
                            table3.AddCell(cell92);

                        }

                        i++;
                    
                    }
                   
                    
                }

                if (i < 10)
                {
                    for (int j = 1; j <= 10 - i; j++)
                    {
                        PdfPCell cell921 = new PdfPCell(new Phrase(new Chunk("", font8)));
                        cell921.Border = 0;
                        table3.AddCell(cell921);
                    }

                }
                doc.Add(table3);
                PdfPTable table31 = new PdfPTable(6);
                PdfPCell a = new PdfPCell(new Phrase(new Chunk("NB:-   VAC: Vacant        BLK: Blocked ,        RES: Reserved ,        OCC: Occupied,        OS: Overstayed", font8)));
                a.Border = 0;
                a.MinimumHeight = 10;
                a.Colspan = 6;
                table31.AddCell(a);
                doc.Add(table31);
              
                }

                PdfPTable table4 = new PdfPTable(7);
                PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellf.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf.PaddingLeft = 20;
                cellf.MinimumHeight = 30;
                cellf.Colspan = 7;
                cellf.Border = 0;
                table4.AddCell(cellf);

                PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1.PaddingLeft = 20;
                cellf1.Border = 0;
                cellf1.Colspan = 7;
                table4.AddCell(cellf1);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 7;
                table4.AddCell(cellh2);

                doc.Add(table4);
                doc.Close();
                Random r = new Random();
                string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Due for vacating in max time report";
                string Script = "";
                Script += "<script id='PopupWindow'>";
                Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
                Script += "confirmWin.Setfocus()</script>";
                if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                    Page.RegisterClientScriptBlock("PopupWindow", Script);


            }
            catch (Exception ex)
            {
                messagedisplay("problem found","aa");

            }
                conn.Close();
            }

    # endregion

    # region Room Allocation button change
    protected void btnRoomAlloc_Click(object sender, EventArgs e)
    {

        Server.Transfer("~/roomallocation.aspx", false);

    }

      # endregion
   
    # region Hourly Transaction List report

    protected void lnkHourlyTransaction_Click1(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }

        string date5 = DateTime.Now.ToString("yyyy-MM-dd");
        string date6 = DateTime.Now.ToString("dd  MMM");
        string c = "5 PM";
        DateTime datedd = DateTime.Parse(c);
        string date10 = datedd.ToString("HH:mm");
        string checkdate = date5 + " " + date10;


        try
        {
            int noofalloc=0,noofvac =0,releno=0,block=0,reserve=0;
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            DateTime ch1 = gh.AddHours(-1);

            string todate = gh.ToString("yyyy-MM-dd HH:mm");
            string tim1 = gh.ToString("hh:mm tt");
            string tim2 = ch1.ToString("hh:mm tt");
            string fromdate = ch1.ToString("yyyy-MM-dd HH:mm");
            string currentdate = gh.ToString("dd-MMM-yyyy");
            string datecur = gh.ToString("hh-mm tt");
            string datecur1 = gh.ToString("dd MMM");
            string ch = "HourlyTransactionList" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 60);
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);
            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();

            if (cmbCompleteBuilding.SelectedValue.ToString() != "-1")
            {
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomallocation ta");
                cmd31.Parameters.AddWithValue("attribute", "count(alloc_id) as allocno ");
                cmd31.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and ta.room_id=mr.room_id ");
                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
                
                noofalloc = Convert.ToInt32(dtt.Rows[0]["allocno"]);
                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomallocation ta,t_roomvacate tv");
                cmd311.Parameters.AddWithValue("attribute", "count(vacate_id) as vacateno ");
                cmd311.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and tv.createdon>='" + fromdate + "' and tv.createdon<='" + todate + "' and ta.alloc_id=tv.alloc_id and ta.room_id=mr.room_id ");
                DataTable dtt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);
              

                noofvac = Convert.ToInt32(dtt1.Rows[0]["vacateno"]);
                OdbcCommand cmd311m = new OdbcCommand();
                cmd311m.CommandType = CommandType.StoredProcedure;
                cmd311m.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_manage_room ta");
                cmd311m.Parameters.AddWithValue("attribute", "count(*) as releno");
                cmd311m.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and  ta.room_id=mr.room_id  and  ta.roomstatus='1'");

                DataTable dtt1m = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311m );
              
             
                releno = Convert.ToInt32(dtt1m.Rows[0]["releno"]);

                OdbcCommand cmdz = new OdbcCommand();
                cmdz.CommandType = CommandType.StoredProcedure;
                cmdz.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_manage_room ta");
                cmdz.Parameters.AddWithValue("attribute", "count(*) as block ");
                cmdz.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and  ta.room_id=mr.room_id  and  ta.roomstatus='3'");
                DataTable dttz = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdz);
               

                 block = Convert.ToInt32(dttz.Rows[0]["block"]);
                OdbcCommand cmdz1 = new OdbcCommand();
                cmdz1.CommandType = CommandType.StoredProcedure;
                cmdz1.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomreservation ta");
                cmdz1.Parameters.AddWithValue("attribute", "count(*) as reserve ");
                cmdz1.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and ta.cretaedon>='" + fromdate + "' and ta.cretaedon<='" + todate + "' and  ta.room_id=mr.room_id  and status_reserve='0'");
                DataTable dttz1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdz1);
                reserve = Convert.ToInt32(dttz1.Rows[0]["reserve"]);

            }
            else 
            {

                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomallocation ta");
                cmd31.Parameters.AddWithValue("attribute", "count(alloc_id) as allocno ");
                cmd31.Parameters.AddWithValue("conditionv", " ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' ");

                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
              

                noofalloc = Convert.ToInt32(dtt.Rows[0]["allocno"]);
                
                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", " t_roomvacate tv");
                cmd311.Parameters.AddWithValue("attribute", "count(vacate_id) as vacateno ");
                cmd311.Parameters.AddWithValue("conditionv", "   tv.createdon>='" + fromdate + "' and tv.createdon<='" + todate + "' ");
                DataTable dtt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311); ;
               

                noofvac = Convert.ToInt32(dtt1.Rows[0]["vacateno"]);
                OdbcCommand cmd3110 = new OdbcCommand();
                cmd3110.CommandType = CommandType.StoredProcedure;
                cmd3110.Parameters.AddWithValue("tblname", " t_manage_room ta");
                cmd3110.Parameters.AddWithValue("attribute", "count(*) as releno");
                cmd3110.Parameters.AddWithValue("conditionv", "ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and roomstatus='1' and criteria=2");
                DataTable dtt10 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd3110);
               
                releno = Convert.ToInt32(dtt10.Rows[0]["releno"]);

                OdbcCommand cmdz = new OdbcCommand();
                cmdz.CommandType = CommandType.StoredProcedure;
                cmdz.Parameters.AddWithValue("tblname", " t_manage_room ta");
                cmdz.Parameters.AddWithValue("attribute", "count(*) as block ");
                cmdz.Parameters.AddWithValue("conditionv", " ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and roomstatus='3'");

                DataTable dttz = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdz);
               
                block = Convert.ToInt32(dttz.Rows[0]["block"]);

                OdbcCommand cmdz1 = new OdbcCommand();
                cmdz1.CommandType = CommandType.StoredProcedure;
                cmdz1.Parameters.AddWithValue("tblname", " t_roomreservation ta");
                cmdz1.Parameters.AddWithValue("attribute", "count(*) as reserve ");
                cmdz1.Parameters.AddWithValue("conditionv", "  ta.cretaedon>='" + fromdate + "' and ta.cretaedon<='" + todate + "' and  status_reserve='0'");

                DataTable dttz1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdz1);
              

                reserve= Convert.ToInt32(dttz1.Rows[0]["reserve"]);

            }
                PdfPTable table = new PdfPTable(6);
                float[] colWidths23 = { 20, 20, 30, 40, 30, 60 };
                table.SetWidths(colWidths23);

                PdfPCell cell = new PdfPCell(new Phrase("Hourly Transation List  ", font12));
                cell.Colspan = 6;
                cell.Border = 1;
                cell.HorizontalAlignment = 1;
                table.AddCell(cell);

                PdfPCell cellv = new PdfPCell(new Phrase("Building Name: ", font9));
                cellv.Colspan = 2;
                cellv.Border = 0;
                cellv.HorizontalAlignment = 1;
               table.AddCell(cellv);

            if(cmbaltbulilding.SelectedValue.ToString()=="-1")
            {

                PdfPCell cellv1 = new PdfPCell(new Phrase("All Building", font9));
                cellv1.Colspan = 2;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
                table.AddCell(cellv1);
            }
            else
            {

                 PdfPCell cellv1 = new PdfPCell(new Phrase(cmbCompleteBuilding.SelectedItem.ToString(), font9));
                cellv1.Colspan = 2;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
                table.AddCell(cellv1);

           }
                PdfPCell cellv2 = new PdfPCell(new Phrase("Date :", font9));
                cellv2.Colspan = 0;
                cellv2.Border = 0;
                cellv2.HorizontalAlignment = 1;
                 table.AddCell(cellv2);

                PdfPCell cellv21 = new PdfPCell(new Phrase(currentdate+"("+tim2 +"-"+tim1+")", font9));
                cellv21.Colspan = 0;
                cellv21.HorizontalAlignment = 0;
                cellv21.Border = 0;
                table.AddCell(cellv21);
                               
                PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk("Slno", font8)));
                table.AddCell(cell1);

                PdfPCell cell1b = new PdfPCell(new Phrase(new Chunk("No.of Alocation", font8)));
                table.AddCell(cell1b);

                PdfPCell cell2 = new PdfPCell(new Phrase(new Chunk("No.of Vacating", font8)));
                table.AddCell(cell2);
                PdfPCell cell3 = new PdfPCell(new Phrase(new Chunk("No.of Reservation", font8)));
                table.AddCell(cell3);

                PdfPCell cell4 = new PdfPCell(new Phrase(new Chunk("No of blocking", font8)));
                table.AddCell(cell4);
              
                PdfPCell cell4v = new PdfPCell(new Phrase(new Chunk("No of Releasing", font8)));
                table.AddCell(cell4v);


                PdfPCell cell5 = new PdfPCell(new Phrase(new Chunk("1", font7)));
                table.AddCell(cell5);

                PdfPCell cell6 = new PdfPCell(new Phrase(new Chunk(noofalloc.ToString(), font7)));
                table.AddCell(cell6);

                PdfPCell cell7 = new PdfPCell(new Phrase(new Chunk(noofvac.ToString(), font7)));
                table.AddCell(cell7);
                PdfPCell cell8 = new PdfPCell(new Phrase(new Chunk(reserve.ToString(), font7)));
                table.AddCell(cell8);

                PdfPCell cell8m = new PdfPCell(new Phrase(new Chunk(block.ToString(), font7)));
                table.AddCell(cell8m);
            
                PdfPCell cell8n = new PdfPCell(new Phrase(new Chunk(releno.ToString(), font7)));
                table.AddCell(cell8n);
                 doc.Add(table);


            PdfPTable table4 = new PdfPTable(7);
            PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
            cellf.HorizontalAlignment = Element.ALIGN_LEFT;
            cellf.PaddingLeft = 20;
            cellf.MinimumHeight = 30;
            cellf.Colspan = 7;
            cellf.Border = 0;
            table4.AddCell(cellf);

            PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
            cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
            cellf1.PaddingLeft = 20;
            cellf1.Border = 0;
            cellf1.Colspan = 7;
            table4.AddCell(cellf1);

            PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom", font8)));
            cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
            cellh2.PaddingLeft = 20;
            cellh2.Border = 0;
            cellh2.Colspan = 7;
            table4.AddCell(cellh2);
            doc.Add(table4);
            doc.Close();
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Due for vacating in max time report";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);

        }
        catch (Exception ex)
        {

            messagedisplay("Problem found during report taking", "warn27");
         }
    }

    # endregion

    # region Hourly Transaction List of rooms


    protected void lnkHourlyTransactionRoomList_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();

        }
   
        string date5 = DateTime.Now.ToString("yyyy-MM-dd");
        string date6 = DateTime.Now.ToString("dd  MMM");
        string c = "5 PM";
        DateTime datedd = DateTime.Parse(c);
        string date10 = datedd.ToString("HH:mm");

        string checkdate = date5 + " " + date10;

        try
        {
            DateTime gh = DateTime.Now;
            string transtim = gh.ToString("dd-MM-yyyy HH-mm");
            DateTime ch1 = gh.AddHours(-1);
            string todate = gh.ToString("yyyy-MM-dd HH:mm");
            string tim1 = gh.ToString("hh:mm tt");
            string tim2 = ch1.ToString("hh:mm tt");
            string fromdate = ch1.ToString("yyyy-MM-dd HH:mm");
            string currentdate = gh.ToString("dd-MMM-yyyy");
            string datecur = gh.ToString("hh-mm tt");
            string datecur1 = gh.ToString("dd MMM");
            string ch = "HourlyTransactionRoomList" + transtim.ToString() + ".pdf";
            string pdfFilePath = Server.MapPath(".") + "/pdf/" + ch;

            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 60, 60);
            Font font8 = FontFactory.GetFont("ARIAL", 9, 1);
            Font font7 = FontFactory.GetFont("ARIAL", 9);
            Font font12 = FontFactory.GetFont("ARIAL", 12, 1);
            Font font9 = FontFactory.GetFont("ARIAL", 10, 1);

            pdfPage page = new pdfPage();
            PdfWriter wr = PdfWriter.GetInstance(doc, new FileStream(pdfFilePath, FileMode.Create));
            wr.PageEvent = page;
            doc.Open();
            PdfPTable table = new PdfPTable(6);
            float[] colWidths23 = { 20, 20, 30, 40, 30, 60 };
            table.SetWidths(colWidths23);

            PdfPCell cell = new PdfPCell(new Phrase("Hourly Transaction List  ", font12));
            cell.Colspan = 6;
            cell.Border = 1;
            cell.HorizontalAlignment = 1;
            table.AddCell(cell);

            PdfPCell cellv = new PdfPCell(new Phrase("Building Name: ", font9));
            cellv.Colspan = 2;
            cellv.Border = 0;
            cellv.HorizontalAlignment = 1;
             table.AddCell(cellv);

            if (cmbaltbulilding.SelectedValue.ToString() == "-1")
            {

                PdfPCell cellv1 = new PdfPCell(new Phrase("All Building", font9));
                cellv1.Colspan = 2;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
               table.AddCell(cellv1);
            }
            else
            {
                PdfPCell cellv1 = new PdfPCell(new Phrase(cmbCompleteBuilding.SelectedItem.ToString(), font9));
                cellv1.Colspan = 2;
                cellv1.Border = 0;
                cellv1.HorizontalAlignment = 0;
                table.AddCell(cellv1);

            }
            PdfPCell cellv2 = new PdfPCell(new Phrase("Date :", font9));
            cellv2.Colspan = 0;
            cellv2.Border = 0;
            cellv2.HorizontalAlignment = 1;
           
            table.AddCell(cellv2);

            PdfPCell cellv21 = new PdfPCell(new Phrase(currentdate + "(" + tim2 + "-" + tim1 + ")", font9));
            cellv21.Colspan = 0;
            cellv21.HorizontalAlignment = 0;
            cellv21.Border = 0;
          
            table.AddCell(cellv21);
            doc.Add(table);
            if (cmbCompleteBuilding.SelectedValue.ToString() != "-1")
            {
                # region For building wise
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomallocation ta");
                cmd31.Parameters.AddWithValue("attribute", "roomno,allocdate,exp_vecatedate ");
                cmd31.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and ta.room_id=mr.room_id ");
                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
              
                if (dtt.Rows.Count > 0)
                {
                    PdfPTable table1xb = new PdfPTable(4);
                    float[] aab = { 20, 20, 30, 40 };
                    table1xb.SetWidths(aab);

                    PdfPCell cella = new PdfPCell(new Phrase("Allocated Room List:  ", font9));
                    cella.Colspan = 4;
                    cella.Border = 1;
                    cella.HorizontalAlignment = 0;
                     table1xb.AddCell(cella);
                    int i = 0;
                    int slno = 0;

                    doc.Add(table1xb);
                    PdfPTable table1x = new PdfPTable(4);
                    float[] aa = { 20, 20, 30, 40 };
                    table1x.SetWidths(aa);
                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("Checkin", font8));
                    b.HorizontalAlignment = 1;
                    table1x.AddCell(b);

                    PdfPCell ca = new PdfPCell(new Phrase("Check Out", font8));
                    ca.HorizontalAlignment = 1;
                    table1x.AddCell(ca);
                    doc.Add(table1x);
                    i = 0;
                    foreach (DataRow dr in dtt.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] vv = { 20, 20, 30, 40 };
                            table1.SetWidths(vv);
                            PdfPCell aaa = new PdfPCell(new Phrase("Slno", font8));
                            aaa.HorizontalAlignment = 1;
                            table1.AddCell(aaa);
                            PdfPCell ab = new PdfPCell(new Phrase("Roomno", font8));
                            ab.HorizontalAlignment = 1;
                            table1.AddCell(ab);

                            PdfPCell ba = new PdfPCell(new Phrase("Checkin", font8));
                            ba.HorizontalAlignment = 1;
                            table1.AddCell(ba);

                            PdfPCell caa = new PdfPCell(new Phrase("Check Out", font8));
                            caa.HorizontalAlignment = 1;
                            table1.AddCell(caa);
                            doc.Add(table1);
                            i = 0;


                        }
                        i++;

                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);

                        PdfPCell cx1 = new PdfPCell(new Phrase(slno.ToString(), font7));
                        cx1.HorizontalAlignment = 1;
                        table1b.AddCell(cx1);

                        PdfPCell cx1q = new PdfPCell(new Phrase(dr["roomno"].ToString(), font7));
                        cx1q.HorizontalAlignment = 1;
                        table1b.AddCell(cx1q);
                        DateTime dated = DateTime.Parse(dr["allocdate"].ToString());
                        string time1 = dated.ToString("dd-MMM hh:mm tt");

                        DateTime dated1 = DateTime.Parse(dr["exp_vecatedate"].ToString());
                        string time2 = dated1.ToString("dd-MMM hh:mm tt");

                        PdfPCell cx = new PdfPCell(new Phrase(time1.ToString(), font7));
                        cx.HorizontalAlignment = 1;
                        table1b.AddCell(cx);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);
                        doc.Add(table1b);

                    }

                }

                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomallocation ta,t_roomvacate tv");
                cmd311.Parameters.AddWithValue("attribute", "roomno,actualvecdate,exp_vecatedate ");
                cmd311.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and tv.createdon>='" + fromdate + "' and tv.createdon<='" + todate + "' and ta.alloc_id=tv.alloc_id and ta.room_id=mr.room_id ");
                DataTable dtt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)",cmd311); 
              

                if (dtt1.Rows.Count > 0)
                {

                    PdfPTable table1x1 = new PdfPTable(4);
                    float[] colWidths231 = { 20, 20, 30, 40 };
                    table1x1.SetWidths(colWidths231);

                    PdfPCell cellz = new PdfPCell(new Phrase("Vacated Room List:  ", font9));
                    cellz.Colspan = 4;
                    cellz.Border = 1;
                    cellz.HorizontalAlignment = 0;
                    table1x1.AddCell(cellz);
                    int i = 0;
                    int slno = 0;

                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x1.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x1.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("Exp Checkout", font8));
                    b.HorizontalAlignment = 1;
                    table1x1.AddCell(b);

                    PdfPCell cq = new PdfPCell(new Phrase("Actual CheckOut", font8));
                    cq.HorizontalAlignment = 1;
                    table1x1.AddCell(cq);
                    doc.Add(table1x1);
                    i = 0;
                    foreach (DataRow dr in dtt1.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] oo = { 20, 20, 30, 40 };
                            table1.SetWidths(oo);
                            PdfPCell n = new PdfPCell(new Phrase("Slno", font8));
                            n.HorizontalAlignment = 1;
                            table1.AddCell(n);
                            PdfPCell an = new PdfPCell(new Phrase("Roomno", font8));
                            an.HorizontalAlignment = 1;
                            table1.AddCell(an);

                            PdfPCell bn = new PdfPCell(new Phrase("Exp CheckOut", font8));
                            bn.HorizontalAlignment = 1;
                            table1.AddCell(bn);

                            PdfPCell cha = new PdfPCell(new Phrase("Actual CheckOut", font8));
                            cha.HorizontalAlignment = 1;
                            table1.AddCell(cha);
                            doc.Add(table1);
                            i = 0;

                        }
                        i++;


                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);

                        PdfPCell cx11 = new PdfPCell(new Phrase(slno.ToString(), font7));
                        cx11.HorizontalAlignment = 1;
                        table1b.AddCell(cx11);

                        PdfPCell cx1q1 = new PdfPCell(new Phrase(dr["roomno"].ToString(), font7));
                        cx1q1.HorizontalAlignment = 1;
                        table1b.AddCell(cx1q1);

                        DateTime dated = DateTime.Parse(dr["exp_vecatedate"].ToString());
                        string time1 = dated.ToString("dd-MMM hh:mm tt");

                        DateTime dated1 = DateTime.Parse(dr["actualvecdate"].ToString());
                        string time2 = dated1.ToString("dd-MMM hh:mm tt");

                        PdfPCell cj = new PdfPCell(new Phrase(time1.ToString(), font7));
                        cj.HorizontalAlignment = 1;
                        table1b.AddCell(cj);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);
                        doc.Add(table1b);


                    }

                }

                OdbcCommand cmd311m = new OdbcCommand();
                cmd311m.CommandType = CommandType.StoredProcedure;
                cmd311m.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomreservation  ta");
                cmd311m.Parameters.AddWithValue("attribute", "roomno,reservedate,expvacdate");
                cmd311m.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and ta.cretaedon>='" + fromdate + "' and ta.cretaedon<='" + todate + "' and  ta.room_id=mr.room_id  and  ta.status_reserve='0'");
                DataTable dtt1m = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311m);
                
                if (dtt1m.Rows.Count > 0)
                {
                    PdfPTable table1x = new PdfPTable(4);
                    float[] gg = { 20, 20, 30, 40 };
                    table1x.SetWidths(gg);

                    PdfPCell celln = new PdfPCell(new Phrase("Reserved List:  ", font9));
                    celln.Colspan = 4;
                    celln.Border = 1;
                    celln.MinimumHeight = 20;
                    celln.HorizontalAlignment = 0;
                    table1x.AddCell(celln);
                    int i = 0;
                    int slno = 0;
                   
                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("Reserve Date", font8));
                    b.HorizontalAlignment = 1;
                    table1x.AddCell(b);

                    PdfPCell tc = new PdfPCell(new Phrase("Exp Checkout", font8));
                    tc.HorizontalAlignment = 1;
                    table1x.AddCell(tc);
                    doc.Add(table1x);
                    i = 0;
                    foreach (DataRow dr in dtt1m.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] o = { 20, 20, 30, 40 };
                            table1.SetWidths(o);
                            PdfPCell cell1c = new PdfPCell(new Phrase("Slno", font8));
                            cell1c.HorizontalAlignment = 1;
                            table1.AddCell(cell1c);
                            PdfPCell ac = new PdfPCell(new Phrase("Roomno", font8));
                            ac.HorizontalAlignment = 1;
                            table1.AddCell(ac);

                            PdfPCell bc = new PdfPCell(new Phrase("Reserve Date", font8));
                            bc.HorizontalAlignment = 1;
                            table1.AddCell(bc);

                            PdfPCell cc = new PdfPCell(new Phrase("Exp checkout", font8));
                            cc.HorizontalAlignment = 1;
                            table1.AddCell(cc);
                            doc.Add(table1);
                            i = 0;


                        }
                        i++;


                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);
                        PdfPCell axa = new PdfPCell(new Phrase(slno.ToString(), font7));
                        axa.HorizontalAlignment = 1;
                        table1b.AddCell(axa);
                        PdfPCell ax1 = new PdfPCell(new Phrase(dr["roomno"].ToString(), font7));
                        ax1.HorizontalAlignment = 1;
                        table1b.AddCell(ax1);
                        DateTime dated = DateTime.Parse(dr["reservedate"].ToString());
                        string time1 = dated.ToString("dd-MMM hh:mm tt");
                        DateTime dated1 = DateTime.Parse(dr["expvacdate"].ToString());
                        string time2 = dated1.ToString("dd-MMM hh:mm tt");

                        PdfPCell vc = new PdfPCell(new Phrase(time1.ToString(), font7));
                        vc.HorizontalAlignment = 1;
                        table1b.AddCell(vc);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);
                        doc.Add(table1b);
                    }
                }

                OdbcCommand cmdz = new OdbcCommand();
                cmdz.CommandType = CommandType.StoredProcedure;
                cmdz.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_manage_room ta");
                cmdz.Parameters.AddWithValue("attribute", "roomno,fromdate,fromtime,todate,totime");
                cmdz.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and  ta.room_id=mr.room_id  and  ta.roomstatus='3'");
                DataTable dttz = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdz); 
               
                if (dttz.Rows.Count > 0)
                {
                    PdfPTable table1x = new PdfPTable(4);
                    float[] vf = { 20, 20, 30, 40 };
                    table1x.SetWidths(vf);

                    PdfPCell cellva = new PdfPCell(new Phrase("Blocked Room List:", font9));
                    cellva.Colspan = 4;
                    cellva.Border = 1;
                    cellva.HorizontalAlignment = 0;
                    table1x.AddCell(cellva);
                    int i = 0;
                    int slno = 0;

                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("From Date", font8));
                    b.HorizontalAlignment = 1;
                    table1x.AddCell(b);

                    PdfPCell cg = new PdfPCell(new Phrase("To Date", font8));
                    cg.HorizontalAlignment = 1;
                    table1x.AddCell(cg);
                    doc.Add(table1x);

                    foreach (DataRow dr in dttz.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] x = { 20, 20, 30, 40 };
                            table1.SetWidths(x);
                            PdfPCell xc = new PdfPCell(new Phrase("Slno", font8));
                            xc.HorizontalAlignment = 1;
                            table1.AddCell(xc);
                            PdfPCell ax = new PdfPCell(new Phrase("Roomno", font8));
                            ax.HorizontalAlignment = 1;
                            table1.AddCell(ax);

                            PdfPCell bx = new PdfPCell(new Phrase("From Date", font8));
                            b.HorizontalAlignment = 1;
                            table1.AddCell(bx);

                            PdfPCell cx = new PdfPCell(new Phrase("To checkout", font8));
                            cx.HorizontalAlignment = 1;
                            table1.AddCell(cx);
                            i = 0;
                            doc.Add(table1);


                        }
                        i++;

                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);

                        PdfPCell axa1 = new PdfPCell(new Phrase(slno.ToString(), font7));
                        axa1.HorizontalAlignment = 1;
                        table1b.AddCell(axa1);

                        PdfPCell ax11 = new PdfPCell(new Phrase(dr["roomno"].ToString(), font7));
                        ax11.HorizontalAlignment = 1;
                        table1b.AddCell(ax11);

                        DateTime dated = DateTime.Parse(dr["fromdate"].ToString());
                        string time1 = dated.ToString("dd-MMM");
                        DateTime dater = DateTime.Parse(dr["fromtime"].ToString());
                        time1 = time1 + " " + dater.ToString("hh:mm tt");

                        DateTime dated1 = DateTime.Parse(dr["todate"].ToString());
                        string time2 = dated1.ToString("dd-MMM");
                        DateTime daterr = DateTime.Parse(dr["totime"].ToString());
                        time2 = time2 + " " + daterr.ToString("hh:mm tt");

                        PdfPCell cm = new PdfPCell(new Phrase(time1.ToString(), font7));
                        cm.HorizontalAlignment = 1;
                        table1b.AddCell(cm);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);
                        doc.Add(table1b);

                    }
                }
                OdbcCommand cmdz1 = new OdbcCommand();
                cmdz1.CommandType = CommandType.StoredProcedure;
                cmdz1.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_manage_room ta");
                cmdz1.Parameters.AddWithValue("attribute", "releasedate,releasetime,fromdate,todate,fromtime,totime,roomno");
                cmdz1.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and mr.build_id=" + Convert.ToInt32(cmbCompleteBuilding.SelectedValue) + "  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and  ta.room_id=mr.room_id  and ta.roomstatus='1' and criteria=2");
                DataTable dttz1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdz1);
              
                if (dttz1.Rows.Count > 0)
                {
                    PdfPTable table1x = new PdfPTable(4);
                    float[] colp = { 20, 20, 30, 40 };
                    table1x.SetWidths(colp);

                    PdfPCell cellm = new PdfPCell(new Phrase("Release Room List:", font9));
                    cellm.Colspan = 4;
                    cellm.Border = 1;
                    cellm.HorizontalAlignment = 0;
                    table1x.AddCell(cellm);
                    int i = 0;
                    int slno = 0;

                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("Release Date", font8));
                    b.HorizontalAlignment = 1;
                    table1x.AddCell(b);

                    PdfPCell cnn = new PdfPCell(new Phrase("Release Time", font8));
                    cnn.HorizontalAlignment = 1;
                    table1x.AddCell(cnn);
                    doc.Add(table1x);
                    i = 0;
                    foreach (DataRow dr in dttz1.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] nnn = { 20, 20, 30, 40 };
                            table1.SetWidths(nnn);
                            PdfPCell cell1a = new PdfPCell(new Phrase("Slno", font8));
                            cell1a.HorizontalAlignment = 1;
                            table1.AddCell(cell1a);
                            PdfPCell ax = new PdfPCell(new Phrase("Roomno", font8));
                            ax.HorizontalAlignment = 1;
                            table1.AddCell(ax);
                            PdfPCell bx = new PdfPCell(new Phrase("Release Date", font8));
                            bx.HorizontalAlignment = 1;
                            table1.AddCell(bx);

                            PdfPCell nc = new PdfPCell(new Phrase("Release Time", font8));
                            nc.HorizontalAlignment = 1;
                            table1.AddCell(nc);

                            i = 0;
                            doc.Add(table1);

                        }
                        i++;

                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);

                        PdfPCell axa1g = new PdfPCell(new Phrase(slno.ToString(), font7));
                        axa1g.HorizontalAlignment = 1;
                        table1b.AddCell(axa1g);

                        PdfPCell ax11g = new PdfPCell(new Phrase(dr["roomno"].ToString(), font7));
                        ax11g.HorizontalAlignment = 1;
                        table1b.AddCell(ax11g);

                        DateTime dated = DateTime.Parse(dr["releasedate"].ToString());
                        string time1 = dated.ToString("dd-MMM");

                        DateTime dated1 = DateTime.Parse(dr["releasetime"].ToString());
                        String time2 = dated1.ToString("hh:mm tt");

                        PdfPCell cb = new PdfPCell(new Phrase(time1.ToString(), font7));
                        cb.HorizontalAlignment = 1;
                        table1b.AddCell(cb);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);

                        doc.Add(table1b);

                    }

                }

# endregion
            }

            else
            {
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomallocation ta");
                cmd31.Parameters.AddWithValue("attribute", "roomno,allocdate,exp_vecatedate,buildingname ");
                cmd31.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and ta.room_id=mr.room_id ");
                DataTable dtt = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
               if (dtt.Rows.Count > 0)
                {
                    PdfPTable table1xb = new PdfPTable(4);
                    float[] aab = { 20, 20, 30, 40 };
                    table1xb.SetWidths(aab);

                    PdfPCell cella = new PdfPCell(new Phrase("Allocated Room List:  ", font9));
                    cella.Colspan = 4;
                    cella.Border = 1;
                    cella.HorizontalAlignment = 0;
                    table1xb.AddCell(cella);
                    int i = 0;
                    int slno = 0;

                    doc.Add(table1xb);
                    PdfPTable table1x = new PdfPTable(4);
                    float[] aa = { 20, 20, 30, 40 };
                    table1x.SetWidths(aa);
                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("Checkin", font8));
                    b.HorizontalAlignment = 1;
                    table1x.AddCell(b);

                    PdfPCell ca = new PdfPCell(new Phrase("Check Out", font8));
                    ca.HorizontalAlignment = 1;
                    table1x.AddCell(ca);
                    doc.Add(table1x);
                    i = 0;
                    foreach (DataRow dr in dtt.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] vv = { 20, 20, 30, 40 };
                            table1.SetWidths(vv);
                            PdfPCell aaa = new PdfPCell(new Phrase("Slno", font8));
                            aaa.HorizontalAlignment = 1;
                            table1.AddCell(aaa);
                            PdfPCell ab = new PdfPCell(new Phrase("Roomno", font8));
                            ab.HorizontalAlignment = 1;
                            table1.AddCell(ab);

                            PdfPCell ba = new PdfPCell(new Phrase("Checkin", font8));
                            ba.HorizontalAlignment = 1;
                            table1.AddCell(ba);

                            PdfPCell caa = new PdfPCell(new Phrase("Check Out", font8));
                            caa.HorizontalAlignment = 1;
                            table1.AddCell(caa);
                            doc.Add(table1);
                            i = 0;
                        }
                        i++;

                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);
                        PdfPCell cx1 = new PdfPCell(new Phrase(slno.ToString(), font7));
                        cx1.HorizontalAlignment = 1;
                        table1b.AddCell(cx1);

                        string buildg = "";
                        string buildingg = dr["buildingname"].ToString();
                        if (buildingg.Contains("(") == true)
                        {
                            string[] buildS1g, buildS2g; ;
                            buildS1g = buildingg.Split('(');
                            buildg = buildS1g[1];
                            buildS2g = buildg.Split(')');
                            buildg = buildS2g[0];
                            buildingg = buildg;
                        }
                        else if (buildingg.Contains("Cottage") == true)
                        {
                            buildingg = buildingg.Replace("Cottage", "Cot");
                        }

                        buildg = buildingg.ToString() + "/" + dr["roomno"].ToString();

                        PdfPCell cx1q = new PdfPCell(new Phrase(buildg.ToString(), font7));
                        cx1q.HorizontalAlignment = 1;
                        table1b.AddCell(cx1q);

                        DateTime dated = DateTime.Parse(dr["allocdate"].ToString());
                        string time1 = dated.ToString("dd-MMM hh:mm tt");
                        DateTime dated1 = DateTime.Parse(dr["exp_vecatedate"].ToString());
                        string time2 = dated1.ToString("dd-MMM hh:mm tt");

                        PdfPCell cx = new PdfPCell(new Phrase(time1.ToString(), font7));
                        cx.HorizontalAlignment = 1;
                        table1b.AddCell(cx);
                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);
                        doc.Add(table1b);

                    }

                }

                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomallocation ta,t_roomvacate tv");
                cmd311.Parameters.AddWithValue("attribute", "roomno,actualvecdate,exp_vecatedate,buildingname ");
                cmd311.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and  tv.createdon>='" + fromdate + "' and tv.createdon<='" + todate + "' and ta.alloc_id=tv.alloc_id and ta.room_id=mr.room_id ");
                DataTable dtt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);
               if (dtt1.Rows.Count > 0)
                {

                    PdfPTable table1x1 = new PdfPTable(4);
                    float[] colWidths231 = { 20, 20, 30, 40 };
                    table1x1.SetWidths(colWidths231);

                    PdfPCell cellz = new PdfPCell(new Phrase("Vacated Room List:  ", font9));
                    cellz.Colspan = 4;
                    cellz.Border = 1;
                    cellz.HorizontalAlignment = 0;
                    table1x1.AddCell(cellz);
                    int i = 0;
                    int slno = 0;

                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x1.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x1.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("Exp Checkout", font8));
                    b.HorizontalAlignment = 1;
                    table1x1.AddCell(b);

                    PdfPCell cq = new PdfPCell(new Phrase("Actual CheckOut", font8));
                    cq.HorizontalAlignment = 1;
                    table1x1.AddCell(cq);
                    doc.Add(table1x1);
                    i = 0;
                    foreach (DataRow dr in dtt1.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] oo = { 20, 20, 30, 40 };
                            table1.SetWidths(oo);
                            PdfPCell n = new PdfPCell(new Phrase("Slno", font8));
                            n.HorizontalAlignment = 1;
                            table1.AddCell(n);
                            PdfPCell an = new PdfPCell(new Phrase("Roomno", font8));
                            an.HorizontalAlignment = 1;
                            table1.AddCell(an);

                            PdfPCell bn = new PdfPCell(new Phrase("Exp CheckOut", font8));
                            bn.HorizontalAlignment = 1;
                            table1.AddCell(bn);

                            PdfPCell cha = new PdfPCell(new Phrase("Actual CheckOut", font8));
                            cha.HorizontalAlignment = 1;
                            table1.AddCell(cha);
                            doc.Add(table1);
                            i = 0;


                        }
                        i++;

                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);

                        PdfPCell cx11 = new PdfPCell(new Phrase(slno.ToString(), font7));
                        cx11.HorizontalAlignment = 1;
                        table1b.AddCell(cx11);

                        string buildg = "";
                        string buildingg = dr["buildingname"].ToString();
                        if (buildingg.Contains("(") == true)
                        {
                            string[] buildS1g, buildS2g; ;
                            buildS1g = buildingg.Split('(');
                            buildg = buildS1g[1];
                            buildS2g = buildg.Split(')');
                            buildg = buildS2g[0];
                            buildingg = buildg;
                        }
                        else if (buildingg.Contains("Cottage") == true)
                        {
                            buildingg = buildingg.Replace("Cottage", "Cot");
                        }


                        buildg = buildingg.ToString() + "/" + dr["roomno"].ToString();

                        PdfPCell cx1q1 = new PdfPCell(new Phrase(buildg.ToString(), font7));
                        cx1q1.HorizontalAlignment = 1;
                        table1b.AddCell(cx1q1);

                        DateTime dated = DateTime.Parse(dr["exp_vecatedate"].ToString());
                        string time1 = dated.ToString("dd-MMM hh:mm tt");

                        DateTime dated1 = DateTime.Parse(dr["actualvecdate"].ToString());
                        string time2 = dated1.ToString("dd-MMM hh:mm tt");

                        PdfPCell cj = new PdfPCell(new Phrase(time1.ToString(), font7));
                        cj.HorizontalAlignment = 1;
                        table1b.AddCell(cj);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);
                        doc.Add(table1b);
                   }

                }
                
                OdbcCommand cmd311m = new OdbcCommand();
                cmd311m.CommandType = CommandType.StoredProcedure;
                cmd311m.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_roomreservation  ta");
                cmd311m.Parameters.AddWithValue("attribute", "roomno,reservedate,expvacdate,buildingname");
                cmd311m.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id and ta.cretaedon>='" + fromdate + "' and ta.cretaedon<='" + todate + "' and  ta.room_id=mr.room_id  and  ta.status_reserve='0'");
                DataTable dtt1m = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311m);
               
                if (dtt1m.Rows.Count > 0)
                {
                    PdfPTable table1x = new PdfPTable(4);
                    float[] gg = { 20, 20, 30, 40 };
                    table1x.SetWidths(gg);

                    PdfPCell celln = new PdfPCell(new Phrase("Reserved List:  ", font9));
                    celln.Colspan = 4;
                    celln.Border = 1;
                    celln.MinimumHeight = 20;
                    celln.HorizontalAlignment = 0;
                    table1x.AddCell(celln);
                    int i = 0;
                    int slno = 0;

                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("Reserve Date", font8));
                    b.HorizontalAlignment = 1;
                    table1x.AddCell(b);

                    PdfPCell tc = new PdfPCell(new Phrase("Exp Checkout", font8));
                    tc.HorizontalAlignment = 1;
                    table1x.AddCell(tc);
                    doc.Add(table1x);
                    i = 0;
                    foreach (DataRow dr in dtt1m.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] o = { 20, 20, 30, 40 };
                            table1.SetWidths(o);
                            PdfPCell cell1c = new PdfPCell(new Phrase("Slno", font8));
                            cell1c.HorizontalAlignment = 1;
                            table1.AddCell(cell1c);
                            PdfPCell ac = new PdfPCell(new Phrase("Roomno", font8));
                            ac.HorizontalAlignment = 1;
                            table1.AddCell(ac);

                            PdfPCell bc = new PdfPCell(new Phrase("Reserve Date", font8));
                            bc.HorizontalAlignment = 1;
                            table1.AddCell(bc);

                            PdfPCell cc = new PdfPCell(new Phrase("Exp checkout", font8));
                            cc.HorizontalAlignment = 1;
                            table1.AddCell(cc);
                            doc.Add(table1);
                            i = 0;
                        }
                        i++;
                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);
                        PdfPCell axa = new PdfPCell(new Phrase(slno.ToString(), font7));
                        axa.HorizontalAlignment = 1;
                        table1b.AddCell(axa);

                        string buildg = "";
                        string buildingg = dr["buildingname"].ToString();
                        if (buildingg.Contains("(") == true)
                        {
                            string[] buildS1g, buildS2g; ;
                            buildS1g = buildingg.Split('(');
                            buildg = buildS1g[1];
                            buildS2g = buildg.Split(')');
                            buildg = buildS2g[0];
                            buildingg = buildg;
                        }
                        else if (buildingg.Contains("Cottage") == true)
                        {
                            buildingg = buildingg.Replace("Cottage", "Cot");
                        }

                        buildg = buildingg.ToString() + "/" + dr["roomno"].ToString();

                        PdfPCell ax1 = new PdfPCell(new Phrase(buildg.ToString(), font7));
                        ax1.HorizontalAlignment = 1;
                        table1b.AddCell(ax1);


                        DateTime dated = DateTime.Parse(dr["reservedate"].ToString());
                        string time1 = dated.ToString("dd-MMM hh:mm tt");

                        DateTime dated1 = DateTime.Parse(dr["expvacdate"].ToString());
                        string time2 = dated1.ToString("dd-MMM hh:mm tt");

                        PdfPCell vc = new PdfPCell(new Phrase(time1.ToString(), font7));
                        vc.HorizontalAlignment = 1;
                        table1b.AddCell(vc);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);
                        doc.Add(table1b);
                    }

                }

                OdbcCommand cmdz = new OdbcCommand();
                cmdz.CommandType = CommandType.StoredProcedure;
                cmdz.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_manage_room ta");
                cmdz.Parameters.AddWithValue("attribute", "roomno,fromdate,fromtime,todate,totime,buildingname");
                cmdz.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and  ta.room_id=mr.room_id  and  ta.roomstatus='3'");
                DataTable dttz = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdz);
                
                if (dttz.Rows.Count > 0)
                {
                    PdfPTable table1x = new PdfPTable(4);
                    float[] vf = { 20, 20, 30, 40 };
                    table1x.SetWidths(vf);

                    PdfPCell cellva = new PdfPCell(new Phrase("Blocked Room List:", font9));
                    cellva.Colspan = 4;
                    cellva.Border = 1;
                    cellva.HorizontalAlignment = 0;
                    table1x.AddCell(cellva);
                    int i = 0;
                    int slno = 0;

                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("From Date", font8));
                    b.HorizontalAlignment = 1;
                    table1x.AddCell(b);

                    PdfPCell cg = new PdfPCell(new Phrase("To Date", font8));
                    cg.HorizontalAlignment = 1;
                    table1x.AddCell(cg);
                    doc.Add(table1x);

                    foreach (DataRow dr in dttz.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] x = { 20, 20, 30, 40 };
                            table1.SetWidths(x);
                            PdfPCell xc = new PdfPCell(new Phrase("Slno", font8));
                            xc.HorizontalAlignment = 1;
                            table1.AddCell(xc);
                            PdfPCell ax = new PdfPCell(new Phrase("Roomno", font8));
                            ax.HorizontalAlignment = 1;
                            table1.AddCell(ax);

                            PdfPCell bx = new PdfPCell(new Phrase("From Date", font8));
                            b.HorizontalAlignment = 1;
                            table1.AddCell(bx);

                            PdfPCell cx = new PdfPCell(new Phrase("To checkout", font8));
                            cx.HorizontalAlignment = 1;
                            table1.AddCell(cx);
                            i = 0;
                            doc.Add(table1);


                        }
                        i++;

                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);

                        PdfPCell axa1 = new PdfPCell(new Phrase(slno.ToString(), font7));
                        axa1.HorizontalAlignment = 1;
                        table1b.AddCell(axa1);
                        string buildg = "";
                        string buildingg = dr["buildingname"].ToString();
                        if (buildingg.Contains("(") == true)
                        {
                            string[] buildS1g, buildS2g; ;
                            buildS1g = buildingg.Split('(');
                            buildg = buildS1g[1];
                            buildS2g = buildg.Split(')');
                            buildg = buildS2g[0];
                            buildingg = buildg;
                        }
                        else if (buildingg.Contains("Cottage") == true)
                        {
                            buildingg = buildingg.Replace("Cottage", "Cot");
                        }

                        buildg = buildingg.ToString() + "/" + dr["roomno"].ToString();

                        PdfPCell ax11 = new PdfPCell(new Phrase(buildg.ToString(), font7));
                        ax11.HorizontalAlignment = 1;
                        table1b.AddCell(ax11);

                        DateTime dated = DateTime.Parse(dr["fromdate"].ToString());
                        string time1 = dated.ToString("dd-MMM");
                        DateTime dater = DateTime.Parse(dr["fromtime"].ToString());
                        time1 = time1 + " " + dater.ToString("hh:mm tt");

                        DateTime dated1 = DateTime.Parse(dr["todate"].ToString());
                        string time2 = dated1.ToString("dd-MMM");
                        DateTime daterr = DateTime.Parse(dr["totime"].ToString());
                        time2 = time2 + " " + daterr.ToString("hh:mm tt");

                        PdfPCell cm = new PdfPCell(new Phrase(time1.ToString(), font7));
                        cm.HorizontalAlignment = 1;
                        table1b.AddCell(cm);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);

                        doc.Add(table1b);

                    }
                }

                OdbcCommand cmdz1 = new OdbcCommand();
                cmdz1.CommandType = CommandType.StoredProcedure;
                cmdz1.Parameters.AddWithValue("tblname", " m_room mr ,m_sub_building msb,t_manage_room ta");
                cmdz1.Parameters.AddWithValue("attribute", "releasedate,releasetime,fromdate,todate,fromtime,totime,roomno,buildingname");
                cmdz1.Parameters.AddWithValue("conditionv", " msb.build_id=mr.build_id  and ta.createdon>='" + fromdate + "' and ta.createdon<='" + todate + "' and  ta.room_id=mr.room_id  and ta.roomstatus='1' and criteria=2");
                DataTable dttz1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdz1);
              

                if (dttz1.Rows.Count > 0)
                {

                    PdfPTable table1x = new PdfPTable(4);
                    float[] colp = { 20, 20, 30, 40 };
                    table1x.SetWidths(colp);

                    PdfPCell cellm = new PdfPCell(new Phrase("Release Room List:", font9));
                    cellm.Colspan = 4;
                    cellm.Border = 1;
                    cellm.HorizontalAlignment = 0;
                    table1x.AddCell(cellm);
                    int i = 0;
                    int slno = 0;

                    PdfPCell cell1 = new PdfPCell(new Phrase("Slno", font8));
                    cell1.HorizontalAlignment = 1;
                    table1x.AddCell(cell1);
                    PdfPCell a = new PdfPCell(new Phrase("Roomno", font8));
                    a.HorizontalAlignment = 1;
                    table1x.AddCell(a);

                    PdfPCell b = new PdfPCell(new Phrase("Release Date", font8));
                    b.HorizontalAlignment = 1;
                    table1x.AddCell(b);

                    PdfPCell cnn = new PdfPCell(new Phrase("Release Time", font8));
                    cnn.HorizontalAlignment = 1;
                    table1x.AddCell(cnn);
                    doc.Add(table1x);
                    i = 0;
                    foreach (DataRow dr in dttz1.Rows)
                    {
                        slno = slno + 1;
                        if (i > 33)
                        {
                            PdfPTable table1 = new PdfPTable(4);
                            float[] nnn = { 20, 20, 30, 40 };
                            table1.SetWidths(nnn);
                            PdfPCell cell1a = new PdfPCell(new Phrase("Slno", font8));
                            cell1a.HorizontalAlignment = 1;
                            table1.AddCell(cell1a);
                            PdfPCell ax = new PdfPCell(new Phrase("Roomno", font8));
                            ax.HorizontalAlignment = 1;
                            table1.AddCell(ax);

                            PdfPCell bx = new PdfPCell(new Phrase("Release Date", font8));
                            bx.HorizontalAlignment = 1;
                            table1.AddCell(bx);

                            PdfPCell nc = new PdfPCell(new Phrase("Release Time", font8));
                            nc.HorizontalAlignment = 1;
                            table1.AddCell(nc);
                            i = 0;
                            doc.Add(table1);

                        }
                        i++;

                        PdfPTable table1b = new PdfPTable(4);
                        float[] colWidths23b = { 20, 20, 30, 40 };
                        table1b.SetWidths(colWidths23b);

                        PdfPCell axa1g = new PdfPCell(new Phrase(slno.ToString(), font7));
                        axa1g.HorizontalAlignment = 1;
                        table1b.AddCell(axa1g);
                        string buildg = "";
                        string buildingg = dr["buildingname"].ToString();
                        if (buildingg.Contains("(") == true)
                        {
                            string[] buildS1g, buildS2g; ;
                            buildS1g = buildingg.Split('(');
                            buildg = buildS1g[1];
                            buildS2g = buildg.Split(')');
                            buildg = buildS2g[0];
                            buildingg = buildg;
                        }
                        else if (buildingg.Contains("Cottage") == true)
                        {
                            buildingg = buildingg.Replace("Cottage", "Cot");
                        }

                        buildg = buildingg.ToString() + "/" + dr["roomno"].ToString();
                        PdfPCell ax11g = new PdfPCell(new Phrase(buildg.ToString(), font7));
                        ax11g.HorizontalAlignment = 1;
                        table1b.AddCell(ax11g);

                        DateTime dated = DateTime.Parse(dr["releasedate"].ToString());
                        string time1 = dated.ToString("dd-MMM");

                        DateTime dated1 = DateTime.Parse(dr["releasetime"].ToString());
                        String time2 = dated1.ToString("hh:mm tt");

                        PdfPCell cb = new PdfPCell(new Phrase(time1.ToString(), font7));
                        cb.HorizontalAlignment = 1;
                        table1b.AddCell(cb);

                        PdfPCell d = new PdfPCell(new Phrase(time2.ToString(), font7));
                        d.HorizontalAlignment = 1;
                        table1b.AddCell(d);
                        doc.Add(table1b);

                    }
                }

                PdfPTable table4 = new PdfPTable(7);
                PdfPCell cellf = new PdfPCell(new Phrase(new Chunk("Prepared By ", font8)));
                cellf.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf.PaddingLeft = 20;
                cellf.MinimumHeight = 30;
                cellf.Colspan = 7;
                cellf.Border = 0;
                table4.AddCell(cellf);

                PdfPCell cellf1 = new PdfPCell(new Phrase(new Chunk("Accommodation Officer ", font8)));
                cellf1.HorizontalAlignment = Element.ALIGN_LEFT;
                cellf1.PaddingLeft = 20;
                cellf1.Border = 0;
                cellf1.Colspan = 7;
                table4.AddCell(cellf1);

                PdfPCell cellh2 = new PdfPCell(new Phrase(new Chunk("Sabarimala Devaswom", font8)));
                cellh2.HorizontalAlignment = Element.ALIGN_LEFT;
                cellh2.PaddingLeft = 20;
                cellh2.Border = 0;
                cellh2.Colspan = 7;
                table4.AddCell(cellh2);
                doc.Add(table4);

            }

           
            doc.Close();
           
            Random r = new Random();
            string PopUpWindowPage = "print.aspx?reportname=" + ch.ToString() + "&Title=Due for vacating in max time report";
            string Script = "";
            Script += "<script id='PopupWindow'>";
            Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
            Script += "confirmWin.Setfocus()</script>";
            if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
                Page.RegisterClientScriptBlock("PopupWindow", Script);

        }
        catch (Exception ex)
        {
            messagedisplay("Problem found during report taking", "warn27");
         
        }
    }

    # endregion

    # region Deposit radio buttonchange
    protected void rdodeposit_CheckedChanged(object sender, EventArgs e)
    {
   
        Session["executeflag"] = 1;
        rbgrace.Checked = false;
        rdoKey.Checked = false;
        rostay.Checked = false;
    }
    # endregion

    # region Key radio button change
    protected void rdoKey_CheckedChanged(object sender, EventArgs e)
    {
        int executeflag = 2;
       
        Session["executeflag"] = executeflag;
        rdodeposit.Checked = false;
        rbgrace.Checked = false;
        rostay.Checked = false;
    }
    # endregion

    protected void CmbReason_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    # region Season deposit load
    public void SeaonDepositLoad()
    {
        # region Loading Season Deposit
        OdbcCommand cmdseasond = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmdseasond.CommandType = CommandType.StoredProcedure;
        cmdseasond.Parameters.AddWithValue("tblname", "t_settings");
        cmdseasond.Parameters.AddWithValue("attribute", " mal_year,mal_year_id,cashier_id,year_code");
        cmdseasond.Parameters.AddWithValue("conditionv", " end_eng_date>=curdate() and start_eng_date<=curdate() and is_current='1' ");
        OdbcDataReader or3 = cmdseasond.ExecuteReader();
        if (or3.Read())
        {
            malyear = Convert.ToInt32(or3["mal_year"]);
            malyearid = Convert.ToInt32(or3["mal_year_id"]);
            int cashierid = Convert.ToInt32(or3["cashier_id"]);
            Session["malyear"] = malyear;
            Session["malyyearid"] = malyearid;
            Session["cashierid"] = cashierid;
            Session["yearcode"] = or3["year_code"];

        }
        DateTime cur2 = DateTime.Now;
        int currentyear = cur2.Year;
        OdbcCommand cmdseasonname = new OdbcCommand();
        cmdseasonname.CommandType = CommandType.StoredProcedure;
        cmdseasonname.Parameters.AddWithValue("tblname", "m_season ss,m_sub_season  sms");
        cmdseasonname.Parameters.AddWithValue("attribute", "season_id,ss.season_sub_id");
        cmdseasonname.Parameters.AddWithValue("conditionv", "(curdate()>=startdate and   curdate()<=enddate) and is_current='1'  and  ss.season_sub_id=sms.season_sub_id");
        DataTable dtt205 = new DataTable();
        dtt205 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdseasonname);
        int seasonid1 = 0;
        int seasonsubid = 0;
        if (dtt205.Rows.Count > 0)
        {
           seasonid1 = Convert.ToInt32(dtt205.Rows[0]["season_id"]);
           seasonsubid = Convert.ToInt32(dtt205.Rows[0]["season_sub_id"]);
           Session["season_subid"] = seasonsubid;
           Session["currentseasonid"] = seasonid1;
        }
        OdbcCommand cmddeposit = new OdbcCommand();
        cmddeposit.CommandType = CommandType.StoredProcedure;
        cmddeposit.Parameters.AddWithValue("tblname", "t_seasondeposit");
        cmddeposit.Parameters.AddWithValue("attribute", "totaldeposit");
        cmddeposit.Parameters.AddWithValue("conditionv", "season_id =" + seasonid1 + " and mal_year_id=" + malyearid + "");
        DataTable dtt391 = new DataTable();
        dtt391 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmddeposit);
        if (dtt391.Rows.Count > 0)
        {
            int se = int.Parse(dtt391.Rows[0]["totaldeposit"].ToString());
            txtDeposit.Text = se.ToString();
         }
        else
        {
            txtDeposit.Text = "0";

        }




        OdbcCommand cmdSxc = new OdbcCommand();
        cmdSxc.Parameters.AddWithValue("tblname", "t_security_deposit");
        cmdSxc.Parameters.AddWithValue("attribute", "balance");
        cmdSxc.Parameters.AddWithValue("conditionv", "deposit_id =(SELECT MAX(deposit_id) FROM t_security_deposit WHERE counter1 =  '" + Session["counterid"].ToString() + "')");
        DataTable dtSxc = new DataTable();
        dtSxc = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdSxc);
        if (dtSxc.Rows.Count > 0 && dtSxc.Rows[0][0].ToString() != "")
        {
            txtcounterdeposit.Text = dtSxc.Rows[0][0].ToString();
        }
        else
        {
            txtcounterdeposit.Text = "0";
        }


        string unclaimed = @"SELECT IFNULL(SUM(amount),0)  -IFNULL((SELECT  IFNULL(SUM(amount),0) AS 'Deposit'  FROM  t_unclaimedremittance,m_season  WHERE 
  t_unclaimedremittance.DATE BETWEEN
m_season.startdate AND m_season.enddate AND m_season.season_id='" + Session["seasonid"] + "'  GROUP BY m_season.season_id),0) AS 'Unclaimed'  FROM  t_daily_transaction,m_season  WHERE t_daily_transaction.ledger_id = '2' AND t_daily_transaction.DATE BETWEEN m_season.startdate AND m_season.enddate AND m_season.season_id='" + Session["seasonid"] + "'  GROUP BY m_season.season_id";
        DataTable dt_unclaimed = objcls.DtTbl(unclaimed);
        if (dt_unclaimed.Rows.Count > 0)
        {
            txtunclaimed.Text = dt_unclaimed.Rows[0][0].ToString();
        }
        else
        {
            txtunclaimed.Text = "0";

        }

        # endregion

    }
    # endregion

    public void HouseKeepingInsertion()
    {

    #region inserting house keeping table
       

        int roomid1 = Convert.ToInt32(Session["roomid"]);
        #region Calculating proposed completion time
        int allocid = Convert.ToInt32(Session["allocid"]);
        string datetoday =Session["datenow"].ToString();
        int userid = Convert.ToInt32(Session["userid"]);
        DateTime tme = DateTime.Now;
        DateTime timc = new DateTime();
        OdbcCommand cmdselect1 = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmdselect1.CommandType = CommandType.StoredProcedure;
        cmdselect1.Parameters.AddWithValue("tblname", "m_complaint");
        cmdselect1.Parameters.AddWithValue("attribute", "complaint_id,cmp_category_id, timerequired");
        cmdselect1.Parameters.AddWithValue("conditionv", "rowstatus<>2 and complaint_id=(SELECT cmp.complaint_id FROM m_complaint cmp,t_policy_complaint pol  WHERE cmp.rowstatus<>2 and pol.complaint_id=cmp.complaint_id and ((curdate()>= pol.fromdate  and  curdate()<= pol.todate) or (curdate()>fromdate) and todate is null) and cmp.cmpname=upper('housekeeping')order by cmpname asc)");
        cmdselect1.Transaction = odbTrans;
        int cmpid = 0;
        int cmpcatid = 0;

        OdbcDataReader timecal1 = cmdselect1.ExecuteReader();
        if (timecal1.Read())
        {

            timc = DateTime.Parse(timecal1["timerequired"].ToString());
            cmpid = Convert.ToInt32(timecal1["complaint_id"]);
            cmpcatid = Convert.ToInt32(timecal1["cmp_category_id"]);
            DateTime timeto = tme.AddHours(timc.Hour);
            string txt = timeto.ToString("yyyy-MM-dd HH:mm:00");

        #endregion


            int houseslno = 0;

            #region House keeping Primary key
            try
            {

                OdbcCommand cmd = new OdbcCommand("Select max(hkeeping_id) from t_manage_housekeeping", conn);
                cmd.Transaction = odbTrans;
                houseslno = Convert.ToInt32(cmd.ExecuteScalar());
                houseslno = houseslno + 1;
            }
            catch (Exception ex)
            {
                houseslno = 1;
            }
            #endregion
            OdbcCommand teamname = new OdbcCommand("select team_id from m_team_workplace where workplace_id=" + int.Parse(cmbBuilding.SelectedValue) + "  and task_id='1'", conn);
            teamname.Transaction = odbTrans;
            OdbcDataReader teamread = teamname.ExecuteReader();
            if (teamread.Read())
            {

                OdbcCommand cmd3 = new OdbcCommand("CALL savedata(?,?)", conn);
                cmd3.CommandType = CommandType.StoredProcedure;
                cmd3.Parameters.AddWithValue("tblname", "t_manage_housekeeping");
                cmd3.Parameters.AddWithValue("valu", " " + houseslno + "," + cmpid + "," + cmpcatid + "," + int.Parse(Session["roomid"].ToString()) + "," + int.Parse(teamread["team_id"].ToString()) + "," + 1 + ",'" + txt.ToString() + "',null," + 0 + "," + userid + ",'" + datetoday + "','" + datetoday + "'," + userid + ", " + 0 + ",null");
                cmd3.Transaction = odbTrans;
                cmd3.ExecuteNonQuery();
               
            }

            OdbcCommand cmd90 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd90.CommandType = CommandType.StoredProcedure;
            cmd90.Parameters.AddWithValue("tblname", "m_room");
            cmd90.Parameters.AddWithValue("valu", "housekeepstatus=0");
            cmd90.Parameters.AddWithValue("convariable", "room_id=" + roomid1 + "");
            cmd90.Transaction = odbTrans;
            cmd90.ExecuteNonQuery();
        }

        #endregion

    }

    # region  Saving Data TO Ledger without using transaction

    public void SavingDataToLedgerWithoutTrans(int ledger_id, int value, int cashierid, int type)
    {
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        string dayendd = Session["dayend"].ToString();
        datetoday = Session["datenow"].ToString();
        counterno = Convert.ToInt32(Session["counterid"]);
        OdbcCommand cmdread = new OdbcCommand("CALL selectcond(?,?,?)", conn);
        cmdread.CommandType = CommandType.StoredProcedure;
        cmdread.Parameters.AddWithValue("tblname", "t_daily_transaction");
        cmdread.Parameters.AddWithValue("attribute", "amount");
        cmdread.Parameters.AddWithValue("conditionv", "date='" + dayendd + "' and liability_type=" + type + " and counter_id=" + counterno + " and cash_caretake_id=" + cashierid + " and ledger_id=" + ledger_id + "");
       OdbcDataReader orn = cmdread.ExecuteReader();
        if (orn.Read())
        {
            int amount = Convert.ToInt32(orn["amount"]);
            amount = amount + value;
            OdbcCommand cmd3 = new OdbcCommand("CALL updatedata(?,?,?)", conn);
            cmd3.CommandType = CommandType.StoredProcedure;
            cmd3.Parameters.AddWithValue("tablename", "t_daily_transaction");
            cmd3.Parameters.AddWithValue("valu", " amount= " + amount + ",updateddate='" + datetoday + "'");
            cmd3.Parameters.AddWithValue("convariable", "cash_caretake_id=" + cashierid + " and liability_type=" + type + "   and date='" + dayendd + "' and  counter_id=" + counterno + " and ledger_id=" + ledger_id + "");
            cmd3.ExecuteNonQuery();
        }
        else
        {
            int transid = 0;
            OdbcCommand cmd48 = new OdbcCommand("CALL selectdata(?,?)", conn);
            cmd48.CommandType = CommandType.StoredProcedure;
            cmd48.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmd48.Parameters.AddWithValue("attribute", "max(trans_id) as trans_id");
            OdbcDataAdapter dacnt48 = new OdbcDataAdapter(cmd48);
            DataTable dtt48 = new DataTable();
            dacnt48.Fill(dtt48);
            if (Convert.IsDBNull(dtt48.Rows[0]["trans_id"]) == false)
            {
                transid = Convert.ToInt32(dtt48.Rows[0]["trans_id"]);
                transid = transid + 1;
            }
            else
            {
                transid = 1;
            }
            OdbcCommand cmdliability = new OdbcCommand("CALL savedata(?,?)", conn);
            cmdliability.CommandType = CommandType.StoredProcedure;
            cmdliability.Parameters.AddWithValue("tblname", "t_daily_transaction");
            cmdliability.Parameters.AddWithValue("val", "" + transid + "," + type + "," + cashierid + "," + counterno + ",'0'," + ledger_id + "," + value + ",'" + dayendd + "'," + userid + ",'" + datetoday + "'," + userid + ",'" + datetoday + "'");
            cmdliability.ExecuteNonQuery();
        }
    }
    # endregion
    # region Old receipt check change
    protected void chkOldReceipt_CheckedChanged(object sender, EventArgs e)
    {
    //    if (chkOldReceipt.Checked == true)
    //    {
    //        #region old Reciept
    //        int receiptbalance = 0;
    //        OdbcCommand cmd18 = new OdbcCommand();
    //        cmd18.Parameters.AddWithValue("tblname", "t_pass_receipt");
    //        cmd18.Parameters.AddWithValue("attribute", "balance");
    //        cmd18.Parameters.AddWithValue("conditionv", "counter_id=" + int.Parse(Session["counterid"].ToString()) + " and item_id=" + 2 + " and balance!=" + 0 + "");
    //        DataTable dtt18 = new DataTable();
    //        dtt18 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd18);
    //        if (dtt18.Rows.Count > 0)
    //        {
    //            receiptbalance = int.Parse(dtt18.Rows[0]["balance"].ToString());
    //            if (receiptbalance < 10)
    //            {
    //                messagedisplay("Reciept remainimg less than 10","warrr");
    //            }
    //            OdbcCommand cmd115 = new OdbcCommand();
    //            cmd115.Parameters.AddWithValue("tblname", "t_roomallocation");
    //            cmd115.Parameters.AddWithValue("attribute", "adv_recieptno");
    //            cmd115.Parameters.AddWithValue("conditionv", " t_roomallocation.alloc_id = (SELECT MAX(alloc_id)  FROM t_roomallocation WHERE roomstatus<>'null' and is_plainprint='yes' and counter_id='" + Session["counterid"].ToString() + "' ) order by alloc_id desc limit 0,1");
    //            DataTable dtt115 = new DataTable();
    //            dtt115 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd115);
    //            if (dtt115.Rows.Count > 0)
    //            {
    //                int rs = int.Parse(dtt115.Rows[0]["adv_recieptno"].ToString());
    //                rs = rs + 1;
    //                txtAllocRecNo.Text = rs.ToString();
    //            }
    //            else
    //            {
    //                messagedisplay("Enter Receipt No", "warrr");
    //                txtAllocRecNo.Text = "0";                                      
    //            }
    //        }
    //        else
    //        {
    //            string prevpage1 = Request.UrlReferrer.ToString();
    //          messagedisplay("No old advance receipt approved for this counter","warnn");
    //            Response.Redirect(prevpage1, false);
    //        }
    //        #endregion
    //        clsCommon.PrintType = "old";
    //    }
    //    else
    //    {
        //#region New Reciept
        //int receiptbalance = 0;
        //OdbcCommand cmd18 = new OdbcCommand();
        //cmd18.Parameters.AddWithValue("tblname", "t_pass_receipt");
        //cmd18.Parameters.AddWithValue("attribute", "balance");
        //cmd18.Parameters.AddWithValue("conditionv", "counter_id=" + int.Parse(Session["counterid"].ToString()) + " and item_id=" + 1 + " and balance!=" + 0 + "");
        //DataTable dtt18 = new DataTable();
        //dtt18 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd18);
        //if (dtt18.Rows.Count > 0)
        //{
        //    receiptbalance = int.Parse(dtt18.Rows[0]["balance"].ToString());
        //    if (receiptbalance < 10)
        //    {
        //        messagedisplay("Reciept remainimg less than 10", "warrr");
        //    }
        //    OdbcCommand cmd115 = new OdbcCommand();
        //    cmd115.Parameters.AddWithValue("tblname", "t_roomallocation");
        //    cmd115.Parameters.AddWithValue("attribute", "adv_recieptno");
        //    cmd115.Parameters.AddWithValue("conditionv", " t_roomallocation.alloc_id = (SELECT MAX(alloc_id)  FROM t_roomallocation WHERE roomstatus<>'null' and is_plainprint='no' and counter_id='" + Session["counterid"].ToString() + "' ) order by alloc_id desc limit 0,1");
        //    DataTable dtt115 = new DataTable();
        //    dtt115 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd115);
        //    if (dtt115.Rows.Count > 0)
        //    {
        //        int rs = int.Parse(dtt115.Rows[0]["adv_recieptno"].ToString());
        //        rs = rs + 1;
        //        txtAllocRecNo.Text = rs.ToString();
        //    }
        //    else
        //    {
        //        messagedisplay("Enter New Receipt No", "warnnn");
        //        txtAllocRecNo.Text = "0";
        //    }
        //}
        //else
        //{
        //    string prevpage1 = Request.UrlReferrer.ToString();
        //    messagedisplay("No New advance receipt approved for this counter", "warrr");
        //    Response.Redirect(prevpage1, false);
        //}
        //#endregion
        //clsCommon.PrintType = "new";
    //    }
    }
    # endregion
    # region Excel Security deposit
    protected void lnkUnclaimedExcel_Click(object sender, EventArgs e)
    {
         if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
            DataTable dttucdeposit = new DataTable();
            dttucdeposit.Columns.Clear();
            dttucdeposit.Columns.Add("date", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("description", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("amount", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("payment", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("balance", System.Type.GetType("System.String"));
            dttucdeposit.Columns.Add("reason", System.Type.GetType("System.String"));
            Session["prev"] = "";
           if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = strConnection;
                conn.Open();
            }
            int total = 0;
            int allocid = Convert.ToInt32(Session["allocid"]);
            string dat = Session["dayend"].ToString();
            DateTime dts = DateTime.Parse(dat.ToString());
            string f2 = dts.ToString("dd/MM/yyyy");
            string dayclosed = dts.ToString("dd MMM yyyy");
            DateTime tim1 = DateTime.Now;
            string kk = tim1.ToString("yyyy/MM/dd");
            string yy = tim1.ToString("dd/MM/yyyy");
            yy = tim1.ToString("dd MMM  yyyy");         
            int s = 0;
                if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
                {
                    string fromdate =objcls.yearmonthdate(txtFromDate.Text);
                    string todate = objcls.yearmonthdate(txtToDate.Text);
                    DateTime t1 = DateTime.Parse(fromdate);
                    DateTime t2 = DateTime.Parse(todate);
                    string t11 = t1.ToString("dd MMM");
                    string t22 = t2.ToString("dd MMM");
                    if (t1 == t2)
                    {
                        yy = t11;
                    }
                    else
                    {
                        yy = t11 + "-" + t22; 
                    }
                    OdbcCommand cmd31 = new OdbcCommand();
                    cmd31.CommandType = CommandType.StoredProcedure;
                    cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                    cmd31.Parameters.AddWithValue("attribute", "alloc_no,adv_recieptno, ta.deposit, tv.dayend,buildingname,bill_receiptno,roomno,remark");
                    cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and return_deposit='0' order by adv_recieptno ");
                    DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);                 
                    int k = 0;
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        string prevday = "";
                        if (i > 0)
                        {
                            prevday = dt1.Rows[i - 1]["dayend"].ToString();
                            DateTime prevday1 = DateTime.Parse(dt1.Rows[i - 1]["dayend"].ToString());
                            string prevday11 = prevday1.ToString("yyyy-MM-dd");
                            DateTime prevday2 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                            string prevday22 = prevday2.ToString("yyyy-MM-dd");
                            Session["prev"] = prevday22;
                            if (prevday2 > prevday1)
                            {
                                try
                                {
                                    OdbcCommand cmdch = new OdbcCommand();
                                    cmdch.CommandType = CommandType.StoredProcedure;
                                    cmdch.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                                    cmdch.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno");
                                    cmdch.Parameters.AddWithValue("conditionv", "dayend='" + prevday11 + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='2'");
                                    DataTable dtch = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch);                                  
                                    if (dtch.Rows.Count > 0)
                                    {
                                        dttucdeposit.Rows.Add();
                                        dttucdeposit.Rows[k]["date"] = prevday11 ;
                                        dttucdeposit.Rows[k]["description"] = "Bank Remmittance Chl.no  " + dtch.Rows[0]["chelanno"].ToString();
                                        dttucdeposit.Rows[k]["amount"] = 0;
                                        dttucdeposit.Rows[k]["payment"] = Convert.ToInt32(dtch.Rows[0]["amount_paid"]);
                                        dttucdeposit.Rows[k]["balance"] = Convert.ToInt32(dtch.Rows[0]["balance"]);
                                        total = total - Convert.ToInt32(Convert.ToInt32(dtch.Rows[0]["amount_paid"]));
                                        k++;
                                    }
                                }
                                catch
                                {
                                }
                            }
                        }
                        DateTime dayend1 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                        string day = dayend1.ToString("dd");
                        string bill = dt1.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                        bill = dt1.Rows[i]["adv_recieptno"].ToString();
                        string build = "";
                        string building = dt1.Rows[i]["buildingname"].ToString();
                        if (building.Contains("(") == true)
                        {
                            string[] buildS1, buildS2; ;
                            buildS1 = building.Split('(');
                            build = buildS1[1];
                            buildS2 = build.Split(')');
                            build = buildS2[0];
                            building = build;
                        }
                        else if (building.Contains("Cottage") == true)
                        {
                            building = building.Replace("Cottage", "Cot");
                        }
                        building = building + "/" + dt1.Rows[i]["roomno"].ToString();
                        if (Convert.ToInt32(dt1.Rows[i]["deposit"]) > 0)
                        {
                            dttucdeposit.Rows.Add();
                            dttucdeposit.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                            dttucdeposit.Rows[k]["description"] = " UC Deposit againt Bill  " + bill + " " + building;
                            dttucdeposit.Rows[k]["amount"] = dt1.Rows[i]["deposit"].ToString();
                            dttucdeposit.Rows[k]["payment"] = "";
                            dttucdeposit.Rows[k]["balance"] = "";
                            dttucdeposit.Rows[k]["reason"] = dt1.Rows[i]["remark"].ToString();
                            total = total + Convert.ToInt32(dt1.Rows[i]["deposit"]);
                            k++;
                            s = k;
                        }
                    }
                    try
                    {
                        string dater = Convert.ToString(Session["prev"]);
                        OdbcCommand cmdch1 = new OdbcCommand();
                        cmdch1.CommandType = CommandType.StoredProcedure;
                        cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                        cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                        cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dater + "'  and tv.chelanno=tt.chelanno   and  status='3' and ledger_id='2'");
                        DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
                        if (dtch1.Rows.Count > 0)
                        {
                            dttucdeposit.Rows.Add();
                            dttucdeposit.Rows[s]["date"] = dater.ToString();
                            dttucdeposit.Rows[s]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                            dttucdeposit.Rows[s]["amount"] = 0;
                            dttucdeposit.Rows[s]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                            dttucdeposit.Rows[s]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                            total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));                           
                         }
                    }
                    catch { }
                }
                else
                {
                    dat=objcls.yearmonthdate(txtDaycloseDate.Text);
                    DateTime t3 = DateTime.Parse(dat);
                    yy = t3.ToString("dd-MMM-yyyy");
                    OdbcCommand cmd311 = new OdbcCommand();
                    cmd311.CommandType = CommandType.StoredProcedure;
                    cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                    cmd311.Parameters.AddWithValue("attribute", "remark,adv_recieptno,alloc_no,ta.deposit, tv.dayend,buildingname,bill_receiptno,roomno");
                    cmd311.Parameters.AddWithValue("conditionv", "tv.dayend='" + dat + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and return_deposit='0'  order by adv_recieptno ");
                    DataTable dt11 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);                   
                    int k = 0;
                    for (int i = 0; i < dt11.Rows.Count; i++)
                    {
                        DateTime dayend1 = DateTime.Parse(dt11.Rows[i]["dayend"].ToString());
                        string day = dayend1.ToString("dd");
                        string bill = dt11.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                        bill = dt11.Rows[i]["adv_recieptno"].ToString();
                        string build = "";
                        string building = dt11.Rows[i]["buildingname"].ToString();
                        if (building.Contains("(") == true)
                        {
                            string[] buildS1, buildS2; ;
                            buildS1 = building.Split('(');
                            build = buildS1[1];
                            buildS2 = build.Split(')');
                            build = buildS2[0];
                            building = build;
                        }
                        else if (building.Contains("Cottage") == true)
                        {
                            building = building.Replace("Cottage", "Cot");
                        }
                        building = building + "/" + dt11.Rows[i]["roomno"].ToString();
                        if (Convert.ToInt32(dt11.Rows[i]["deposit"]) > 0)
                        {
                            dttucdeposit.Rows.Add();
                            dttucdeposit.Rows[k]["date"] = dt11.Rows[i]["dayend"].ToString();
                            dttucdeposit.Rows[k]["description"] = " UC Deposit againt Bill  " + bill + " " + building;
                            dttucdeposit.Rows[k]["amount"] = dt11.Rows[i]["deposit"].ToString();
                            dttucdeposit.Rows[k]["payment"] = "";
                            dttucdeposit.Rows[k]["balance"] = "";
                            dttucdeposit.Rows[k]["reason"] = dt11.Rows[i]["remark"].ToString();
                            total = total + Convert.ToInt32(dt11.Rows[i]["deposit"]);
                            k++;
                        }
                    }
                    OdbcCommand cmdch1 = new OdbcCommand();
                    cmdch1.CommandType = CommandType.StoredProcedure;
                    cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                    cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                    cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dat + "'  and tv.chelanno=tt.chelanno   and  status='3' and ledger_id='2'");
                    DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);                 
                    if (dtch1.Rows.Count > 0)
                    {
                        dttucdeposit.Rows.Add();
                        dttucdeposit.Rows[k]["date"] = dtch1.Rows[0]["dayend"].ToString();
                        dttucdeposit.Rows[k]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                        dttucdeposit.Rows[k]["amount"] = 0;
                        dttucdeposit.Rows[k]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                        dttucdeposit.Rows[k]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                        total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                       }
                       GetExcel(dttucdeposit,"Unclaimed Security deposit ledger");
                }
            }
    # endregion
    #region Excel Function
            public void GetExcel(DataTable dt, string Heading)
    {
        DataTable myReader = new DataTable();
        myReader = dt;
        DateTime dth = DateTime.Now;
        string S_head = Heading + dth.ToString("dd-MM-yyyy hh:mm:ss");
        Response.Clear();
        Response.ContentType = "application/vnd.ms-excel";
        string sep = "";
        string MH = "TRAVANCORE DEVASWOM BOARD";
        Response.Write("\t\t\t" + MH);
        Response.Write("\n\n");
        Response.Write("\t\t\t" + S_head);
        Response.Write("\n\n");
        foreach (DataColumn c in myReader.Columns)
        {
            string hd = c.ColumnName.ToUpper();
            Response.Write(sep + hd);
            sep = "\t";
        }
        Response.Write("\n");
        int i;
        Response.Write("\n");
        foreach (DataRow dr in myReader.Rows)
        {
            sep = "";
            for (i = 0; i < myReader.Columns.Count; i++)
            {
                Response.Write(sep + dr[i].ToString());
                sep = "\t";
            }
            Response.Write("\n");
        }
        Response.End();
    }
# endregion
    # region Ecel Room damage
    protected void lnkExcelDamage_Click(object sender, EventArgs e)
    {
       if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        Session["prev"] = "";
        int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
        DataTable dttroomdamage = new DataTable();
        dttroomdamage.Columns.Clear();
        dttroomdamage.Columns.Add("date", System.Type.GetType("System.String"));
        dttroomdamage.Columns.Add("description", System.Type.GetType("System.String"));
        dttroomdamage.Columns.Add("amount", System.Type.GetType("System.String"));
        dttroomdamage.Columns.Add("payment", System.Type.GetType("System.String"));
        dttroomdamage.Columns.Add("balance", System.Type.GetType("System.String"));      
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        int total = 0;
        int allocid = Convert.ToInt32(Session["allocid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dayclosed = dts.ToString("dd MMM yyyy");
        DateTime tim1 = DateTime.Now;
        string kk = tim1.ToString("yyyy/MM/dd");
        string yy = tim1.ToString("dd/MM/yyyy");
        yy = tim1.ToString("dd MMM  yyyy");       
            if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
            {
               string fromdate =objcls.yearmonthdate(txtFromDate.Text);
               string todate =objcls.yearmonthdate(txtToDate.Text);
               DateTime t1 = DateTime.Parse(fromdate);
               DateTime t2 = DateTime.Parse(todate);
               string t11 = t1.ToString("dd MMM");
               string t22 = t2.ToString("dd MMM");
                if (t1 == t2)
                {
                    yy = t11;
                }
                else
                {
                    yy = t11 + "-" + t22;
                }
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", " adv_recieptno,alloc_no,damage_penality, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and liability_by='0'  and damage_penality>0  and roomcondition='0' and inmate_abscond='0'  ");
                DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);
                int k = 0,s=0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    string prevday = "";
                    if (i > 0)
                    {
                        prevday = dt1.Rows[i - 1]["dayend"].ToString();
                        DateTime prevday1 = DateTime.Parse(dt1.Rows[i - 1]["dayend"].ToString());
                        string prevday11 = prevday1.ToString("yyyy-MM-dd");
                        DateTime prevday2 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                        string prevday22 = prevday2.ToString("yyyy-MM-dd");
                        Session["prev"] = prevday22;
                        if (prevday2 > prevday1)
                        {
                            try
                            {
                                OdbcCommand cmdch = new OdbcCommand();
                                cmdch.CommandType = CommandType.StoredProcedure;
                                cmdch.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                                cmdch.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno");
                                cmdch.Parameters.AddWithValue("conditionv", "dayend='" + prevday11 + "'  and tv.chelanno=tt.chelanno   and  status='3' and ledger_id='4'");
                                DataTable dtch = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch);                             
                                if (dtch.Rows.Count > 0)
                                {
                                    dttroomdamage.Rows.Add();
                                    dttroomdamage.Rows[k]["date"] = prevday11.ToString();
                                    dttroomdamage.Rows[k]["description"] = "Bank Remmittance Chl.no  " + dtch.Rows[0]["chelanno"].ToString();
                                    dttroomdamage.Rows[k]["amount"] = 0;
                                    dttroomdamage.Rows[k]["payment"] = Convert.ToInt32(dtch.Rows[0]["amount_paid"]);
                                    dttroomdamage.Rows[k]["balance"] = Convert.ToInt32(dtch.Rows[0]["balance"]);
                                    total = total - Convert.ToInt32(Convert.ToInt32(dtch.Rows[0]["amount_paid"]));
                                    k++;                           
                                }
                            }
                            catch
                            {

                            }
                        }
                    }
                    DateTime dayend1 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt1.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt1.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt1.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt1.Rows[i]["roomno"].ToString();
                    if (Convert.ToInt32(dt1.Rows[i]["damage_penality"]) > 0)
                    {
                        dttroomdamage.Rows.Add();
                        dttroomdamage.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttroomdamage.Rows[k]["description"] = " Room  Damage Charge againt Bill  " + bill + " " + building;
                        dttroomdamage.Rows[k]["amount"] = dt1.Rows[i]["damage_penality"].ToString();
                        dttroomdamage.Rows[k]["payment"] = "";
                        dttroomdamage.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt1.Rows[i]["damage_penality"]);
                        k++;
                    }
                    s = k;
                }
                string dater = Convert.ToString(Session["prev"]);
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dater + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='4'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);             
                if (dtch1.Rows.Count > 0)
                {
                    dttroomdamage.Rows.Add();
                    dttroomdamage.Rows[s]["date"] = dater.ToString();
                    dttroomdamage.Rows[s]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttroomdamage.Rows[s]["amount"] = 0;
                    dttroomdamage.Rows[s]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttroomdamage.Rows[s]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));                                                         
                }
            }
            else
           {
               dat =objcls.yearmonthdate(txtDaycloseDate.Text);
               DateTime t3 = DateTime.Parse(dat);
               yy = t3.ToString("dd-MMM-yyyy");
                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd311.Parameters.AddWithValue("attribute", "adv_recieptno, alloc_no,damage_penality, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd311.Parameters.AddWithValue("conditionv", "tv.dayend>='" + dat + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and liability_by='0' and damage_penality>0  and roomcondition='0' and inmate_abscond='0'  ");
                DataTable dt11 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);              
                int k = 0;
                for (int i = 0; i < dt11.Rows.Count; i++)
                {
                    DateTime dayend1 = DateTime.Parse(dt11.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt11.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt11.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt11.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt11.Rows[i]["roomno"].ToString();
                    if (Convert.ToInt32(dt11.Rows[i]["damage_penality"]) > 0)
                    {
                        dttroomdamage.Rows.Add();
                        dttroomdamage.Rows[k]["date"] = dt11.Rows[i]["dayend"].ToString();
                        dttroomdamage.Rows[k]["description"] = "Room  Damage Charge against Bill  " + bill + " " + building;
                        dttroomdamage.Rows[k]["amount"] = dt11.Rows[i]["damage_penality"].ToString();
                        dttroomdamage.Rows[k]["payment"] = "";
                        dttroomdamage.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt11.Rows[i]["damage_penality"]);
                        k++;
                    }
                }
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dat + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='4'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);               
                if (dtch1.Rows.Count > 0)
                {
                    dttroomdamage.Rows.Add();
                    dttroomdamage.Rows[k]["date"] = dtch1.Rows[0]["dayend"].ToString();
                    dttroomdamage.Rows[k]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttroomdamage.Rows[k]["amount"] = 0;
                    dttroomdamage.Rows[k]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttroomdamage.Rows[k]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                }
            }
            GetExcel(dttroomdamage,"Room Damage Ledger");
    }
    # endregion
    protected void lnkKeylostExcel_Click(object sender, EventArgs e)
    {
         if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        Session["prev"] = "";
        int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
        DataTable dttkeylost = new DataTable();
        dttkeylost.Columns.Clear();        
        dttkeylost.Columns.Add("date", System.Type.GetType("System.String"));
        dttkeylost.Columns.Add("description", System.Type.GetType("System.String"));
        dttkeylost.Columns.Add("amount", System.Type.GetType("System.String"));
        dttkeylost.Columns.Add("payment", System.Type.GetType("System.String"));
        dttkeylost.Columns.Add("balance", System.Type.GetType("System.String"));
        int s = 0;
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        int total = 0;
        int allocid = Convert.ToInt32(Session["allocid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dayclosed = dts.ToString("dd MMM yyyy");
        DateTime tim1 = DateTime.Now;
        string kk = tim1.ToString("yyyy/MM/dd");
        string yy = tim1.ToString("dd/MM/yyyy");
        yy = tim1.ToString("dd MMM  yyyy");     
            if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
             {
                string fromdate =objcls.yearmonthdate(txtFromDate.Text);
                string todate =objcls.yearmonthdate(txtToDate.Text);
               DateTime t1 = DateTime.Parse(fromdate);
                DateTime t2 = DateTime.Parse(todate);
                string t11 = t1.ToString("dd MMM");
                string t22 = t2.ToString("dd MMM");
                if (t1 == t2)
                {
                    yy = t11;
                }
                else
                {
                    yy = t11 + "-" + t22;
                }
                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "adv_recieptno,alloc_no,key_penality, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and liability_by='0'  and key_penality>0  and return_key='0' and inmate_abscond='0'");
                DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31 );                
               OdbcDataAdapter da1 = new OdbcDataAdapter("select alloc_no, retdepamount  as key_penality ,tv.dayend,buildingname,bill_receiptno,roomno from m_room mr,m_sub_building msb, t_roomvacate tv ,t_roomallocation ta  where ta.alloc_id=tv.alloc_id and  inmate_abscond=1 and  remark='Key penality' and msb.build_id=mr.build_id and mr.room_id=ta.room_id and tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "' ", conn);
               da1.Fill(dt1);
               int k = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    string prevday = "";
                    if (i > 0)
                    {
                        prevday = dt1.Rows[i - 1]["dayend"].ToString();
                        DateTime prevday1 = DateTime.Parse(dt1.Rows[i - 1]["dayend"].ToString());
                        string prevday11 = prevday1.ToString("yyyy-MM-dd");
                        DateTime prevday2 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                        string prevday22 = prevday2.ToString("yyyy-MM-dd");
                        Session["prev"] = prevday22;
                        if (prevday2 > prevday1)
                        {
                            try
                            {
                                OdbcCommand cmdch = new OdbcCommand();
                                cmdch.CommandType = CommandType.StoredProcedure;
                                cmdch.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                                cmdch.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno");
                                cmdch.Parameters.AddWithValue("conditionv", "dayend='" + prevday11 + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='3'");
                                DataTable dtch = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch);                              
                                if (dtch.Rows.Count > 0)
                                {
                                    dttkeylost.Rows.Add();
                                    dttkeylost.Rows[k]["date"] = prevday11;
                                    dttkeylost.Rows[k]["description"] = "Bank Remmittance Chl.no  " + dtch.Rows[0]["chelanno"].ToString();
                                    dttkeylost.Rows[k]["amount"] = 0;
                                    dttkeylost.Rows[k]["payment"] = Convert.ToInt32(dtch.Rows[0]["amount_paid"]);
                                    dttkeylost.Rows[k]["balance"] = Convert.ToInt32(dtch.Rows[0]["balance"]);
                                    total = total - Convert.ToInt32(Convert.ToInt32(dtch.Rows[0]["amount_paid"]));
                                    k++;
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    DateTime dayend1 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt1.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt1.Rows[i]["adv_recieptno"].ToString();
                     string build = "";
                    string building = dt1.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt1.Rows[i]["roomno"].ToString();
                    if (Convert.ToInt32(dt1.Rows[i]["key_penality"]) > 0)
                    {
                        dttkeylost.Rows.Add();
                        dttkeylost.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttkeylost.Rows[k]["description"] = " Payment Charge againt Bill  " + bill + " " + building;
                        dttkeylost.Rows[k]["amount"] = dt1.Rows[i]["key_penality"].ToString();
                        dttkeylost.Rows[k]["payment"] = "";
                        dttkeylost.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt1.Rows[i]["key_penality"]);
                        k++;
                    }
                    s = k;
                }
                string dater = Convert.ToString(Session["prev"]);
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dater + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='3'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);              
                if (dtch1.Rows.Count > 0)
                {
                    dttkeylost.Rows.Add();
                    dttkeylost.Rows[s]["date"] = dater.ToString();
                    dttkeylost.Rows[s]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttkeylost.Rows[s]["amount"] = 0;
                    dttkeylost.Rows[s]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttkeylost.Rows[s]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                }
            }
            else
            {
                dat =objcls.yearmonthdate(txtDaycloseDate.Text);
                DateTime t3 = DateTime.Parse(dat);
                yy = t3.ToString("dd-MMM-yyyy");
                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd311.Parameters.AddWithValue("attribute", "adv_recieptno,alloc_no, key_penality, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd311.Parameters.AddWithValue("conditionv", "tv.dayend>='" + dat + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id  and liability_by='0' and key_penality>0  and return_key='0' and inmate_abscond='0'  ");
                DataTable dt11 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311 );
                int k = 0;
                OdbcDataAdapter da11 = new OdbcDataAdapter("select alloc_no, retdepamount  as key_penality ,tv.dayend,buildingname,bill_receiptno,roomno from m_room mr,m_sub_building msb, t_roomvacate tv ,t_roomallocation ta  where ta.alloc_id=tv.alloc_id and  inmate_abscond=1 and  remark='Key penality' and msb.build_id=mr.build_id and mr.room_id=ta.room_id and  tv.dayend>='" + dat + "'", conn);
                da11.Fill(dt11);
                for (int i = 0; i < dt11.Rows.Count; i++)
                {
                    DateTime dayend1 = DateTime.Parse(dt11.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt11.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt11.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt11.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt11.Rows[i]["roomno"].ToString();
                    if (Convert.ToInt32(dt11.Rows[i]["key_penality"]) > 0)
                    {
                        dttkeylost.Rows.Add();
                        dttkeylost.Rows[k]["date"] = dt11.Rows[i]["dayend"].ToString();
                        dttkeylost.Rows[k]["description"] = "Pay receipt against Bill  " + bill + " " + building;
                        dttkeylost.Rows[k]["amount"] = dt11.Rows[i]["key_penality"].ToString();
                        dttkeylost.Rows[k]["payment"] = "";
                        dttkeylost.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt11.Rows[i]["key_penality"]);
                        k++;
                    }
                }
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dat + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='3'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1); 
                if (dtch1.Rows.Count > 0)
                {
                    dttkeylost.Rows.Add();
                    dttkeylost.Rows[k]["date"] = dtch1.Rows[0]["dayend"].ToString();
                    dttkeylost.Rows[k]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttkeylost.Rows[k]["amount"] = 0;
                    dttkeylost.Rows[k]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttkeylost.Rows[k]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                }
            }
            GetExcel(dttkeylost,"Key Damage Ledger");
    }
    protected void lnkOverstayExcel_Click(object sender, EventArgs e)
    {
        if (conn.State == ConnectionState.Closed)
         {
            conn.ConnectionString = strConnection;
            conn.Open();
         }
        Session["prev"] = "";
        int s = 0;
        int c = Convert.ToInt32(cmbSelectBuilding.SelectedValue);
        DataTable dttoverstay = new DataTable();
        dttoverstay.Columns.Clear();
        dttoverstay.Columns.Add("date", System.Type.GetType("System.String"));
        dttoverstay.Columns.Add("description", System.Type.GetType("System.String"));
        dttoverstay.Columns.Add("Amount", System.Type.GetType("System.String"));
        dttoverstay.Columns.Add("payment", System.Type.GetType("System.String"));
        dttoverstay.Columns.Add("balance", System.Type.GetType("System.String"));
        if (conn.State == ConnectionState.Closed)
        {
            conn.ConnectionString = strConnection;
            conn.Open();
        }
        int total = 0;
        int allocid = Convert.ToInt32(Session["allocid"]);
        string dat = Session["dayend"].ToString();
        DateTime dts = DateTime.Parse(dat.ToString());
        string f2 = dts.ToString("dd/MM/yyyy");
        string dayclosed = dts.ToString("dd MMM yyyy");
        DateTime tim1 = DateTime.Now;
        string kk = tim1.ToString("yyyy/MM/dd");
        string yy = tim1.ToString("dd/MM/yyyy");
        yy = tim1.ToString("dd MMM  yyyy");       
            if ((txtFromDate.Text != "") && (txtToDate.Text != ""))
             {
                string fromdate =objcls.yearmonthdate(txtFromDate.Text);
                string todate =objcls.yearmonthdate(txtToDate.Text);
                DateTime t1 = DateTime.Parse(fromdate);
                DateTime t2 = DateTime.Parse(todate);
                string t11 = t1.ToString("dd MMM");
                string t22 = t2.ToString("dd MMM");
                if (t1 == t2)
                {
                    yy = t11;
                }
                else
                {
                    yy = t11 + "-" + t22;
                }

                OdbcCommand cmd31 = new OdbcCommand();
                cmd31.CommandType = CommandType.StoredProcedure;
                cmd31.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd31.Parameters.AddWithValue("attribute", "adv_recieptno,alloc_no,tv.roomrent, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd31.Parameters.AddWithValue("conditionv", "tv.dayend>='" + fromdate + "' and tv.dayend<='" + todate + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id    and tv.roomrent>0 and inmate_abscond='0' ");
                DataTable dt1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd31);              
                int k = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    string prevday = "";
                    if (i > 0)
                    {
                        prevday = dt1.Rows[i - 1]["dayend"].ToString();
                        DateTime prevday1 = DateTime.Parse(dt1.Rows[i - 1]["dayend"].ToString());
                        string prevday11 = prevday1.ToString("yyyy-MM-dd");
                        DateTime prevday2 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                        string prevday22 = prevday2.ToString("yyyy-MM-dd");
                        Session["prev"] = prevday22;
                        if (prevday2 > prevday1)
                        {
                            try
                            {
                                OdbcCommand cmdch = new OdbcCommand();
                                cmdch.CommandType = CommandType.StoredProcedure;
                                cmdch.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                                cmdch.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno");
                                cmdch.Parameters.AddWithValue("conditionv", "dayend='" + prevday11 + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='5'");
                                DataTable dtch = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch);
                                if (dtch.Rows.Count > 0)
                                {
                                    dttoverstay.Rows.Add();
                                    dttoverstay.Rows[k]["date"] = prevday11;
                                    dttoverstay.Rows[k]["description"] = "Bank Remmittance Chl.no  " + dtch.Rows[0]["chelanno"].ToString();
                                    dttoverstay.Rows[k]["amount"] = 0;
                                    dttoverstay.Rows[k]["payment"] = Convert.ToInt32(dtch.Rows[0]["amount_paid"]);
                                    dttoverstay.Rows[k]["balance"] = Convert.ToInt32(dtch.Rows[0]["balance"]);
                                    total = total - Convert.ToInt32(Convert.ToInt32(dtch.Rows[0]["amount_paid"]));
                                    k++;
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    DateTime dayend1 = DateTime.Parse(dt1.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt1.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt1.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt1.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; ;
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt1.Rows[i]["roomno"].ToString();
                    if (Convert.ToInt32(dt1.Rows[i]["roomrent"]) > 0)
                    {
                        dttoverstay.Rows.Add();
                        dttoverstay.Rows[k]["date"] = dt1.Rows[i]["dayend"].ToString();
                        dttoverstay.Rows[k]["description"] = " Payment Charge againt Bill  " + bill + " " + building;
                        dttoverstay.Rows[k]["amount"] = dt1.Rows[i]["roomrent"].ToString();
                        dttoverstay.Rows[k]["payment"] = "";
                        dttoverstay.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt1.Rows[i]["roomrent"]);
                        k++;
                    }
                    s = k;
                }
                string dater = Convert.ToString(Session["prev"]);
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dater + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='5'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);      
                if (dtch1.Rows.Count > 0)
                {
                    dttoverstay.Rows.Add();
                    dttoverstay.Rows[s]["date"] = dater.ToString();
                    dttoverstay.Rows[s]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttoverstay.Rows[s]["amount"] = 0;
                    dttoverstay.Rows[s]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttoverstay.Rows[s]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                }
            }
            else
            {
                dat =objcls.yearmonthdate(txtDaycloseDate.Text);
                DateTime t3 = DateTime.Parse(dat);
                yy = t3.ToString("dd-MMM-yyyy");
                OdbcCommand cmd311 = new OdbcCommand();
                cmd311.CommandType = CommandType.StoredProcedure;
                cmd311.Parameters.AddWithValue("tblname", "t_roomvacate tv,t_roomallocation ta,m_room mr,m_sub_building msb");
                cmd311.Parameters.AddWithValue("attribute", " adv_recieptno, alloc_no,tv.roomrent, tv.dayend,buildingname,bill_receiptno,roomno");
                cmd311.Parameters.AddWithValue("conditionv", "tv.dayend>='" + dat + "'   and   msb.build_id=mr.build_id and mr.room_id=ta.room_id and ta.alloc_id=tv.alloc_id   and tv.roomrent>0 and inmate_abscond='0'");
                DataTable dt11 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmd311);             
                int k = 0;
                for (int i = 0; i < dt11.Rows.Count; i++)
                {
                    DateTime dayend1 = DateTime.Parse(dt11.Rows[i]["dayend"].ToString());
                    string day = dayend1.ToString("dd");
                    string bill = dt11.Rows[i]["adv_recieptno"].ToString() + "/" + day;
                    bill = dt11.Rows[i]["adv_recieptno"].ToString();
                    string build = "";
                    string building = dt11.Rows[i]["buildingname"].ToString();
                    if (building.Contains("(") == true)
                    {
                        string[] buildS1, buildS2; 
                        buildS1 = building.Split('(');
                        build = buildS1[1];
                        buildS2 = build.Split(')');
                        build = buildS2[0];
                        building = build;
                    }
                    else if (building.Contains("Cottage") == true)
                    {
                        building = building.Replace("Cottage", "Cot");
                    }
                    building = building + "/" + dt11.Rows[i]["roomno"].ToString();
                    if (Convert.ToInt32(dt11.Rows[i]["roomrent"]) > 0)
                    {
                        dttoverstay.Rows.Add();
                        dttoverstay.Rows[k]["date"] = dt11.Rows[i]["dayend"].ToString();
                        dttoverstay.Rows[k]["description"] = "Pay receipt against Bill  " + bill + " " + building;
                        dttoverstay.Rows[k]["amount"] = dt11.Rows[i]["roomrent"].ToString();
                        dttoverstay.Rows[k]["payment"] = "";
                        dttoverstay.Rows[k]["balance"] = "";
                        total = total + Convert.ToInt32(dt11.Rows[i]["roomrent"]);
                        k++;
                    }
                }
                OdbcCommand cmdch1 = new OdbcCommand();
                cmdch1.CommandType = CommandType.StoredProcedure;
                cmdch1.Parameters.AddWithValue("tblname", "t_chelanentry_days tv,t_chelanentry tt");
                cmdch1.Parameters.AddWithValue("attribute", "tv.amount_paid,tv.balance,tv.chelanno,dayend");
                cmdch1.Parameters.AddWithValue("conditionv", "dayend='" + dat + "'  and tv.chelanno=tt.chelanno   and status='3' and ledger_id='5'");
                DataTable dtch1 = objcls.SpDtTbl("CALL selectcond(?,?,?)", cmdch1);
               if (dtch1.Rows.Count > 0)
                {
                    dttoverstay.Rows.Add();
                    dttoverstay.Rows[k]["date"] = dtch1.Rows[0]["dayend"].ToString();
                    dttoverstay.Rows[k]["description"] = "Bank Remmittance Chl.no" + dtch1.Rows[0]["chelanno"].ToString();
                    dttoverstay.Rows[k]["amount"] = 0;
                    dttoverstay.Rows[k]["payment"] = Convert.ToInt32(dtch1.Rows[0]["amount_paid"]);
                    dttoverstay.Rows[k]["balance"] = Convert.ToInt32(dtch1.Rows[0]["balance"]);
                    total = total - Convert.ToInt32(Convert.ToInt32(dtch1.Rows[0]["amount_paid"]));
                }
            }
            GetExcel(dttoverstay,"Extended Stay Ledger" );
    }
    #region KEY LOST REPORT
    protected void lnkKeyLostReport_Click(object sender, EventArgs e)
    {
        string hh = objG.Heading(clsgridview.gridView_HeadingType.key_lost);
        Session["head"] = hh;
        if (txtDaycloseDate.Text == "")
        {
            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Must enter Day Close Date";
            ModalPopupExtender1.Show();
            return;
        }
        String vecate = objcls.yearmonthdate(txtDaycloseDate.Text.ToString());
        OdbcCommand Date = new OdbcCommand();
        Date.CommandType = CommandType.StoredProcedure;
        Date.Parameters.AddWithValue("tblname", " t_roomvacate v,t_roomallocation alloc,m_room r,m_sub_building b ");
        Date.Parameters.AddWithValue("attribute", " alloc_no 'Alloc No',buildingname 'Building',roomno 'Room',"
                     + " DATE_FORMAT(v.dayend,'%d-%m-%Y') 'Vecate Date' ");
        Date.Parameters.AddWithValue("conditionv", " return_key=0 and date(actualvecdate)>='" + vecate.ToString() + "' and "
                     + " v.alloc_id=alloc.alloc_id and "
                     + " r.room_id=alloc.room_id and b.build_id=r.build_id and b.rowstatus<>2 and r.rowstatus<>2");
        DataTable dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", Date);
        if (dt.Rows.Count == 0)
        {
            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "No Details Found";
            ModalPopupExtender1.Show();
            return;
        }
        Session["DataTable"] = dt;
        /////////
        Random r = new Random();
        string PopUpWindowPage = "View1.aspx?reportname=ARMS Data View";
        string Script = "";
        Script += "<script id='PopupWindow'>";
        Script += "confirmWin = window.open(' " + PopUpWindowPage + "','" + r.Next() + "','scrollbars=yes,resizable=1,width=1350,height=680,left=0,top=0,status');";
        Script += "confirmWin.Setfocus()</script>";
        if (!Page.IsClientScriptBlockRegistered("PopupWindow"))
            Page.RegisterClientScriptBlock("PopupWindow", Script);
    }
    #endregion
    #region KEY LOST REPORT IN EXCEL
    protected void lnkExcelKey_Click(object sender, EventArgs e)
    {
        string hh = objG.Heading(clsgridview.gridView_HeadingType.key_lost);
        Session["head"] = hh;
        if (txtDaycloseDate.Text == "")
        {
            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "Must enter Day Close Date";
            ModalPopupExtender1.Show();
            return;
        }
        String vecate = objcls.yearmonthdate(txtDaycloseDate.Text.ToString());
        OdbcCommand Date = new OdbcCommand();
        Date.CommandType = CommandType.StoredProcedure;
        Date.Parameters.AddWithValue("tblname", " t_roomvacate v,t_roomallocation alloc,m_room r,m_sub_building b ");
        Date.Parameters.AddWithValue("attribute", " alloc_no 'Alloc No',buildingname 'Building',roomno 'Room',"
                     + " DATE_FORMAT(v.dayend,'%d-%m-%Y') 'Vecate Date',alloc.room_id,b.build_id ");
        Date.Parameters.AddWithValue("conditionv", " return_key=0 and date(actualvecdate)>='" + vecate.ToString() + "' and "
                     + " v.alloc_id=alloc.alloc_id and "
                     + " r.room_id=alloc.room_id and b.build_id=r.build_id and b.rowstatus<>2 and r.rowstatus<>2");
        DataTable dt = objcls.SpDtTbl("CALL selectcond(?,?,?)", Date);
        if (dt.Rows.Count == 0)
        {
            lblHead.Text = "Tsunami ARMS - Warning";
            pnlOk.Visible = true;
            pnlYesNo.Visible = false;
            lblOk.Text = "No Details Found";
            ModalPopupExtender1.Show();
            return;
        }
        Session["DataTable"] = dt;
        GetExcel(dt, "Key Lost details ");
    }
    #endregion
    protected void txtAdRecieptNo_Unload(object sender, EventArgs e)
    {

    }
    protected void rbgrace_CheckedChanged(object sender, EventArgs e)
    {
            
        Session["executeflag"] = 1;
        rdodeposit.Checked = false;
        rdoKey.Checked = false;
        rostay.Checked = false;
    }


    protected void rostay_CheckedChanged(object sender, EventArgs e)
    {

        Session["executeflag"] = 1;
        rdodeposit.Checked = false;
        rdoKey.Checked = false;
        rbgrace.Checked = false;

    }
    protected void txtinmno_TextChanged(object sender, EventArgs e)
    {
        ViewState["CONTROL"] ="1";
        try
        {
            this.ScriptManager1.SetFocus(cmbaltbulilding);
             
            
            if (cmbCheckOutMehtod.SelectedItem.ToString() == "Inmates Add")
            {
                extend();
            }
           
            if (cmbCheckOutMehtod.SelectedItem.ToString() == "Extended Stay")
            {
                extend();
            }
            else if (cmbCheckOutMehtod.SelectedItem.ToString() == "Overstay")
            {
                extend();

            }
            else
            {
                ExtendTImeChange();
            }
            viewinmates();
            //AllocationPrint();
        }
        catch { }
    }

    protected void txtAllocNumber_TextChanged(object sender, EventArgs e)
    {

    }

    protected void txtBalanceAmount_TextChanged(object sender, EventArgs e)
    {

    }
    protected void txtinmateadvance_TextChanged(object sender, EventArgs e)
    {

    }
    protected void txtinmcharge_TextChanged(object sender, EventArgs e)
    {

    }
    protected void txtAdvAmount_TextChanged(object sender, EventArgs e)
    {

    }
}